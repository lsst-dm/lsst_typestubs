import enum
from typing import Any, Optional

def getPropertySetState(container: Any, asLists: bool = ...): ...
def getPropertyListState(container: Any, asLists: bool = ...): ...
def setPropertySetState(container: Any, state: Any) -> None: ...
def setPropertyListState(container: Any, state: Any) -> None: ...

class ReturnStyle(enum.Enum):
    ARRAY: Any = ...
    SCALAR: Any = ...
    AUTO: Any = ...

class PropertySet:
    def get(self, name: Any, default: Optional[Any] = ...): ...
    def getArray(self, name: Any): ...
    def getScalar(self, name: Any): ...
    def set(self, name: Any, value: Any): ...
    def add(self, name: Any, value: Any): ...
    def update(self, addition: Any) -> None: ...
    def toDict(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self, memo: Any): ...
    def __contains__(self, name: Any): ...
    def __setitem__(self, name: Any, value: Any) -> None: ...
    def __getitem__(self, name: Any): ...
    def __delitem__(self, name: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    def keys(self): ...
    def items(self): ...
    def values(self): ...
    def __reduce__(self): ...

class PropertyList:
    COMMENTSUFFIX: str = ...
    def get(self, name: Any, default: Optional[Any] = ...): ...
    def getArray(self, name: Any): ...
    def getScalar(self, name: Any): ...
    def set(self, name: Any, value: Any, comment: Optional[Any] = ...): ...
    def add(self, name: Any, value: Any, comment: Optional[Any] = ...): ...
    def setComment(self, name: Any, comment: Any) -> None: ...
    def toList(self): ...
    def toOrderedDict(self): ...
    toDict: Any = ...
    def __eq__(self, other: Any) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self, memo: Any): ...
    def __iter__(self) -> Any: ...
    def __setitem__(self, name: Any, value: Any) -> None: ...
    def __reduce__(self): ...
