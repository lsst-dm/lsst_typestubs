from . import fsScanner as fsScanner, sequencify as sequencify
from typing import Any

haveSqlite3: bool
havePgsql: bool

class Registry:
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...
    @staticmethod
    def create(location: Any): ...

class PosixRegistry(Registry):
    root: Any = ...
    def __init__(self, root: Any) -> None: ...
    @staticmethod
    def getHduNumber(template: Any, dataId: Any): ...
    class LookupData:
        dataId: Any = ...
        lookupProperties: Any = ...
        foundItems: Any = ...
        cachedStatus: Any = ...
        neededKeys: Any = ...
        def __init__(self, lookupProperties: Any, dataId: Any) -> None: ...
        def status(self): ...
        def setFoundItems(self, items: Any) -> None: ...
        def addFoundItems(self, items: Any) -> None: ...
        def getMissingKeys(self): ...
    def lookup(self, lookupProperties: Any, reference: Any, dataId: Any, **kwargs: Any): ...
    @staticmethod
    def lookupMetadata(filepath: Any, template: Any, lookupData: Any, storage: Any) -> None: ...
    @staticmethod
    def lookupFitsMetadata(filepath: Any, template: Any, lookupData: Any, dataId: Any) -> None: ...

class SqlRegistry(Registry):
    placeHolder: str = ...
    conn: Any = ...
    def __init__(self, conn: Any) -> None: ...
    def __del__(self) -> None: ...
    def lookup(self, lookupProperties: Any, reference: Any, dataId: Any, **kwargs: Any): ...
    def executeQuery(self, returnFields: Any, joinClause: Any, whereFields: Any, range: Any, values: Any): ...

class SqliteRegistry(SqlRegistry):
    placeHolder: str = ...
    root: Any = ...
    def __init__(self, location: Any) -> None: ...

class PgsqlRegistry(SqlRegistry):
    placeHolder: str = ...
    root: Any = ...
    def __init__(self, location: Any) -> None: ...
    @staticmethod
    def readYaml(location: Any): ...
    def lookup(self, *args: Any, **kwargs: Any): ...
