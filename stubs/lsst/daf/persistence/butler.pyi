import yaml
from . import ButlerComposite as ButlerComposite, ButlerDataRef as ButlerDataRef, ButlerSubset as ButlerSubset, DataId as DataId, NoResults as NoResults, ParentsMismatch as ParentsMismatch, Policy as Policy, PosixStorage as PosixStorage, ReadProxy as ReadProxy, Repository as Repository, RepositoryArgs as RepositoryArgs, RepositoryCfg as RepositoryCfg, Storage as Storage, doImport as doImport, genericAssembler as genericAssembler, genericDisassembler as genericDisassembler, listify as listify, sequencify as sequencify, setify as setify
from lsst.log import Log as Log
from typing import Any, Optional

preinitedMapperWarning: str

class ButlerCfg(Policy, yaml.YAMLObject):
    yaml_tag: str = ...
    def __init__(self, cls: Any, repoCfg: Any) -> None: ...

class RepoData:
    cfg: Any = ...
    cfgRoot: Any = ...
    repo: Any = ...
    parentRepoDatas: Any = ...
    isV1Repository: bool = ...
    tags: Any = ...
    parentRegistry: Any = ...
    def __init__(self, args: Any, role: Any) -> None: ...
    @property
    def repoArgs(self): ...
    @property
    def repoData(self): ...
    def setCfg(self, cfg: Any, origin: Any, root: Any, isV1Repository: Any) -> None: ...
    @property
    def cfgOrigin(self): ...
    @property
    def isNewRepository(self): ...
    @property
    def role(self): ...
    @role.setter
    def role(self, val: Any) -> None: ...
    def getParentRepoDatas(self, context: Optional[Any] = ...): ...
    def addParentRepoData(self, parentRepoData: Any) -> None: ...
    def addTags(self, tags: Any) -> None: ...

class RepoDataContainer:
    def __init__(self, repoDataList: Any) -> None: ...
    def inputs(self): ...
    def outputs(self): ...
    def all(self): ...

class Butler:
    GENERATION: int = ...
    log: Any = ...
    def __init__(self, root: Optional[Any] = ..., mapper: Optional[Any] = ..., inputs: Optional[Any] = ..., outputs: Optional[Any] = ..., **mapperArgs: Any) -> None: ...
    @staticmethod
    def getMapperClass(root: Any): ...
    def defineAlias(self, alias: Any, datasetType: Any) -> None: ...
    def getKeys(self, datasetType: Optional[Any] = ..., level: Optional[Any] = ..., tag: Optional[Any] = ...): ...
    def getDatasetTypes(self, tag: Optional[Any] = ...): ...
    def queryMetadata(self, datasetType: Any, format: Any, dataId: Any = ..., **rest: Any): ...
    def datasetExists(self, datasetType: Any, dataId: Any = ..., write: bool = ..., **rest: Any): ...
    def get(self, datasetType: Any, dataId: Optional[Any] = ..., immediate: bool = ..., **rest: Any): ...
    def put(self, obj: Any, datasetType: Any, dataId: Any = ..., doBackup: bool = ..., **rest: Any) -> None: ...
    def subset(self, datasetType: Any, level: Optional[Any] = ..., dataId: Any = ..., **rest: Any): ...
    def dataRef(self, datasetType: Any, level: Optional[Any] = ..., dataId: Any = ..., **rest: Any): ...
    def getUri(self, datasetType: Any, dataId: Optional[Any] = ..., write: bool = ..., **rest: Any): ...
    def __reduce__(self): ...
