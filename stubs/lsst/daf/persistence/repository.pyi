from lsst.daf.persistence import Policy as Policy, Storage as Storage, doImport as doImport, listify as listify
from typing import Any, Optional

class RepositoryArgs:
    mapperArgs: Any = ...
    tags: Any = ...
    mode: Any = ...
    policy: Any = ...
    def __init__(self, cfgRoot: Optional[Any] = ..., root: Optional[Any] = ..., mapper: Optional[Any] = ..., mapperArgs: Optional[Any] = ..., tags: Optional[Any] = ..., mode: Optional[Any] = ..., policy: Optional[Any] = ...) -> None: ...
    @property
    def mapper(self): ...
    @mapper.setter
    def mapper(self, mapper: Any) -> None: ...
    @property
    def cfgRoot(self): ...
    @property
    def root(self): ...
    @staticmethod
    def inputRepo(storage: Any, tags: Optional[Any] = ...): ...
    @staticmethod
    def outputRepo(storage: Any, mapper: Optional[Any] = ..., mapperArgs: Optional[Any] = ..., tags: Optional[Any] = ..., mode: Optional[Any] = ...): ...
    def tag(self, tag: Any) -> None: ...

class Repository:
    def __init__(self, repoData: Any) -> None: ...
    def write(self, butlerLocation: Any, obj: Any): ...
    def read(self, butlerLocation: Any): ...
    def mappers(self): ...
    def getRegistry(self): ...
    def getKeys(self, *args: Any, **kwargs: Any): ...
    def map(self, *args: Any, **kwargs: Any): ...
    def queryMetadata(self, *args: Any, **kwargs: Any): ...
    def backup(self, *args: Any, **kwargs: Any) -> None: ...
    def getMapperDefaultLevel(self): ...
    def exists(self, location: Any): ...
