import collections.abc
import yaml
from typing import Any, Optional

class _PolicyMeta: ...
class _PolicyBase(collections.UserDict, yaml.YAMLObject, metaclass=_PolicyMeta): ...

class Policy(_PolicyBase):
    data: Any = ...
    def __init__(self, other: Optional[Any] = ...) -> None: ...
    def ppprint(self): ...
    def __getitem__(self, name: Any): ...
    def __setitem__(self, name: Any, value: Any) -> None: ...
    def __contains__(self, key: Any): ...
    @staticmethod
    def defaultPolicyFile(productName: Any, fileName: Any, relativePath: Optional[Any] = ...): ...
    def update(self, other: Any): ...
    def merge(self, other: Any) -> None: ...
    def names(self, topLevelOnly: bool = ...): ...
    def asArray(self, name: Any): ...
    def getValue(self, name: Any): ...
    def setValue(self, name: Any, value: Any) -> None: ...
    def mergeDefaults(self, other: Any) -> None: ...
    def exists(self, key: Any): ...
    def getString(self, key: Any): ...
    def getBool(self, key: Any): ...
    def getPolicy(self, key: Any): ...
    def getStringArray(self, key: Any): ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def dump(self, output: Any) -> None: ...
    def dumpToFile(self, path: Any) -> None: ...
