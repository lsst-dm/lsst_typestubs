from typing import Any, Callable, Iterable, Iterator, Optional, Type, TypeVar, Union

def safeMakeDir(directory: str) -> None: ...
def iterable(a: Any) -> Iterable[Any]: ...
def allSlots(self) -> Iterator[str]: ...
def getFullTypeName(cls: Any) -> str: ...
def getClassOf(typeOrName: Union[Type, str]) -> Type: ...
def getInstanceOf(typeOrName: Union[Type, str], *args: Any, **kwargs: Any) -> Any: ...

class Singleton(type):
    def __call__(cls: Any) -> Any: ...
F = TypeVar('F', bound=Callable)

def transactional(func: F) -> F: ...
def stripIfNotNone(s: Optional[str]) -> Optional[str]: ...
def immutable(cls: _T) -> _T: ...
