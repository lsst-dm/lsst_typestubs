import collections
import yaml
from ._butlerUri import ButlerURI
from typing import Any, ClassVar, IO, Optional, Sequence, Union

yamlLoader = yaml.CSafeLoader
yamlLoader = yaml.SafeLoader

class Loader(yamlLoader):
    def __init__(self, stream: Any) -> None: ...
    def include(self, node: Any): ...
    def extractFile(self, filename: Any): ...

class Config(collections.abc.MutableMapping):
    includeKey: ClassVar[str] = ...
    resourcesPackage: str = ...
    configFile: Any = ...
    def __init__(self, other: Optional[Any] = ...) -> None: ...
    def ppprint(self): ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    def copy(self): ...
    @classmethod
    def fromString(cls: Any, string: str, format: str=...) -> Config: ...
    @classmethod
    def fromYaml(cls: Any, string: str) -> Config: ...
    def __getitem__(self, name: Any): ...
    def __setitem__(self, name: Any, value: Any) -> None: ...
    def __contains__(self, key: Any): ...
    def __delitem__(self, key: Any) -> None: ...
    def update(self, other: Any): ...
    def merge(self, other: Any) -> None: ...
    def nameTuples(self, topLevelOnly: bool = ...): ...
    def names(self, topLevelOnly: bool = ..., delimiter: Optional[Any] = ...): ...
    def asArray(self, name: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def dump(self, output: Optional[IO]=..., format: str=...) -> Optional[str]: ...
    def dumpToUri(self, uri: Union[ButlerURI, str], updateFile: bool=..., defaultFileName: str=..., overwrite: bool=...) -> None: ...
    @staticmethod
    def updateParameters(configType: Any, config: Any, full: Any, toUpdate: Optional[Any] = ..., toCopy: Optional[Any] = ..., overwrite: bool = ...) -> None: ...
    def toDict(self): ...

class ConfigSubset(Config):
    component: ClassVar[Optional[str]] = ...
    requiredKeys: ClassVar[Sequence[str]] = ...
    defaultConfigFile: ClassVar[Optional[str]] = ...
    filesRead: Any = ...
    def __init__(self, other: Optional[Any] = ..., validate: bool = ..., mergeDefaults: bool = ..., searchPaths: Optional[Any] = ...) -> None: ...
    @classmethod
    def defaultSearchPaths(cls): ...
    def validate(self) -> None: ...
