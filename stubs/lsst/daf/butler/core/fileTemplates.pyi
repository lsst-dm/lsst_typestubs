from .config import Config
from .configSupport import LookupKey
from .datasets import DatasetRef, DatasetType
from .dimensions import DimensionUniverse
from .exceptions import ValidationError
from .storageClass import StorageClass
from typing import Any, Iterable, Mapping, Optional, Set, Tuple, Union

class FileTemplateValidationError(ValidationError): ...
class FileTemplatesConfig(Config): ...

class FileTemplates:
    defaultKey: Any = ...
    config: Any = ...
    default: Any = ...
    def __init__(self, config: Union[FileTemplatesConfig, str], default: Optional[str]=..., universe: DimensionUniverse) -> None: ...
    @property
    def templates(self) -> Mapping[LookupKey, FileTemplate]: ...
    def __contains__(self, key: LookupKey) -> bool: ...
    def __getitem__(self, key: LookupKey) -> FileTemplate: ...
    def validateTemplates(self, entities: Iterable[Union[DatasetType, DatasetRef, StorageClass]], logFailures: bool=...) -> None: ...
    def getLookupKeys(self) -> Set[LookupKey]: ...
    def getTemplateWithMatch(self, entity: Union[DatasetRef, DatasetType, StorageClass]) -> Tuple[LookupKey, FileTemplate]: ...
    def getTemplate(self, entity: Union[DatasetType, DatasetRef, StorageClass]) -> FileTemplate: ...

class FileTemplate:
    mandatoryFields: Any = ...
    datasetFields: Any = ...
    specialFields: Any = ...
    template: Any = ...
    def __init__(self, template: str) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def fields(self, optionals: bool=..., specials: bool=..., subfields: bool=...) -> Set[str]: ...
    def format(self, ref: DatasetRef) -> str: ...
    def validateTemplate(self, entity: Union[DatasetRef, DatasetType, StorageClass, None]) -> None: ...
