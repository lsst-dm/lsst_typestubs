from .config import Config
from .dimensions import Dimension, DimensionGraph, DimensionUniverse
from collections.abc import Mapping
from typing import Any, Dict, Iterable, Optional, Set, Union

class LookupKey:
    def __init__(self, name: Optional[str]=..., dimensions: Optional[Iterable[Union[str, Dimension]]]=..., dataId: Optional[Dict[str, Any]]=..., *, universe: Optional[DimensionUniverse]=...) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    @property
    def name(self) -> Optional[str]: ...
    @property
    def dimensions(self) -> Optional[DimensionGraph]: ...
    @property
    def dataId(self) -> Optional[Dict[str, Any]]: ...
    def __hash__(self) -> int: ...
    def clone(self, name: Optional[str]=..., dimensions: Optional[DimensionGraph]=..., dataId: Optional[Dict[str, Any]]=...) -> LookupKey: ...

def processLookupConfigs(config: Config, *, allow_hierarchy: bool=..., universe: Optional[DimensionUniverse]=...) -> Dict[LookupKey, Union[str, Dict[str, Any]]]: ...
def processLookupConfigList(config: Iterable[Union[str, Mapping]], *, universe: Optional[DimensionUniverse]=...) -> Set[LookupKey]: ...
