from .config import Config, ConfigSubset
from .storageClassDelegate import StorageClassDelegate
from .utils import Singleton
from typing import Any, Collection, Dict, Mapping, Optional, Sequence, Set, Type, Union

class StorageClassConfig(ConfigSubset):
    component: str = ...
    defaultConfigFile: str = ...

class StorageClass:
    defaultDelegate: Type = ...
    defaultDelegateName: str = ...
    name: Any = ...
    def __init__(self, name: Optional[str]=..., pytype: Optional[Union[Type, str]]=..., components: Optional[Dict[str, StorageClass]]=..., derivedComponents: Optional[Dict[str, StorageClass]]=..., parameters: Optional[Union[Sequence, Set]]=..., delegate: Optional[str]=...) -> None: ...
    @property
    def components(self) -> Dict[str, StorageClass]: ...
    @property
    def derivedComponents(self) -> Dict[str, StorageClass]: ...
    @property
    def parameters(self) -> Set[str]: ...
    @property
    def pytype(self) -> Type: ...
    @property
    def delegateClass(self) -> Optional[Type]: ...
    def allComponents(self) -> Mapping[str, StorageClass]: ...
    def delegate(self) -> StorageClassDelegate: ...
    def isComposite(self) -> bool: ...
    def knownParameters(self) -> Set[str]: ...
    def validateParameters(self, parameters: Collection=...) -> None: ...
    def filterParameters(self, parameters: Dict[str, Any], subset: Collection=...) -> Dict[str, Any]: ...
    def validateInstance(self, instance: Any) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...

class StorageClassFactory(metaclass=Singleton):
    def __init__(self, config: Optional[Union[StorageClassConfig, str]]=...) -> None: ...
    def __contains__(self, storageClassOrName: Union[StorageClass, str]) -> bool: ...
    def addFromConfig(self, config: Union[StorageClassConfig, Config, str]) -> None: ...
    @staticmethod
    def makeNewStorageClass(name: str, baseClass: Optional[Type[StorageClass]]=..., **kwargs: Any) -> Type[StorageClass]: ...
    def getStorageClass(self, storageClassName: str) -> StorageClass: ...
    def registerStorageClass(self, storageClass: StorageClass) -> None: ...
