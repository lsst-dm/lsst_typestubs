from .datasets import DatasetRef, DatasetType
from .dimensions import DataCoordinate
from .named import NamedKeyMapping
from typing import Any, Iterable, List, Mapping, Optional, Tuple, Type, Union

class Quantum:
    def __init__(self, *, taskName: Optional[str]=..., taskClass: Optional[Type]=..., dataId: Optional[DataCoordinate]=..., initInputs: Optional[Union[Mapping[DatasetType, DatasetRef], Iterable[DatasetRef]]]=..., inputs: Optional[Mapping[DatasetType, List[DatasetRef]]]=..., outputs: Optional[Mapping[DatasetType, List[DatasetRef]]]=...) -> None: ...
    @property
    def taskClass(self) -> Optional[Type]: ...
    @property
    def taskName(self) -> Optional[str]: ...
    @property
    def dataId(self) -> Optional[DataCoordinate]: ...
    @property
    def initInputs(self) -> NamedKeyMapping[DatasetType, DatasetRef]: ...
    @property
    def inputs(self) -> NamedKeyMapping[DatasetType, List[DatasetRef]]: ...
    @property
    def outputs(self) -> NamedKeyMapping[DatasetType, List[DatasetRef]]: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __reduce__(self) -> Union[str, Tuple[Any, ...]]: ...
