import abc
import enum
import sqlalchemy
from .named import NamedValueAbstractSet
from abc import ABC, abstractmethod
from typing import Any, Mapping, Optional, Type

class TopologicalSpace(enum.Enum):
    SPATIAL: Any = ...
    TEMPORAL: Any = ...

class TopologicalFamily(ABC, metaclass=abc.ABCMeta):
    name: Any = ...
    space: Any = ...
    def __init__(self, name: str, space: TopologicalSpace) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __contains__(self, other: TopologicalRelationshipEndpoint) -> bool: ...
    @abstractmethod
    def choose(self, endpoints: NamedValueAbstractSet[TopologicalRelationshipEndpoint]) -> TopologicalRelationshipEndpoint: ...

class TopologicalRelationshipEndpoint(ABC, metaclass=abc.ABCMeta):
    @property
    @abstractmethod
    def name(self) -> str: ...
    @property
    @abstractmethod
    def topology(self) -> Mapping[TopologicalSpace, TopologicalFamily]: ...
    @property
    def spatial(self) -> Optional[TopologicalFamily]: ...
    @property
    def temporal(self) -> Optional[TopologicalFamily]: ...

class TopologicalExtentDatabaseRepresentation(ABC, metaclass=abc.ABCMeta):
    @classmethod
    @abstractmethod
    def fromSelectable(cls: Type[_S], selectable: sqlalchemy.sql.FromClause) -> _S: ...
    @abstractmethod
    def overlaps(self, other: _S) -> sqlalchemy.sql.ColumnElement: ...
