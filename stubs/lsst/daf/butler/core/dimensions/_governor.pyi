from .. import ddl
from ...registry.interfaces import Database, GovernorDimensionRecordStorage, StaticTablesContext
from .._topology import TopologicalFamily, TopologicalSpace
from ..named import NamedValueAbstractSet
from ._elements import Dimension
from .construction import DimensionConstructionBuilder, DimensionConstructionVisitor
from typing import AbstractSet, Iterable, Mapping, Optional

class GovernorDimension(Dimension):
    def __init__(self, name: str, storage: dict, metadata: NamedValueAbstractSet[ddl.FieldSpec], uniqueKeys: NamedValueAbstractSet[ddl.FieldSpec]) -> None: ...
    MAX_KEY_LENGTH: int = ...
    @property
    def name(self) -> str: ...
    @property
    def required(self) -> NamedValueAbstractSet[Dimension]: ...
    @property
    def implied(self) -> NamedValueAbstractSet[Dimension]: ...
    @property
    def topology(self) -> Mapping[TopologicalSpace, TopologicalFamily]: ...
    @property
    def metadata(self) -> NamedValueAbstractSet[ddl.FieldSpec]: ...
    @property
    def uniqueKeys(self) -> NamedValueAbstractSet[ddl.FieldSpec]: ...
    def makeStorage(self, db: Database, *, context: Optional[StaticTablesContext]=...) -> GovernorDimensionRecordStorage: ...

class GovernorDimensionConstructionVisitor(DimensionConstructionVisitor):
    def __init__(self, name: str, storage: dict, *, metadata: Iterable[ddl.FieldSpec]=..., uniqueKeys: Iterable[ddl.FieldSpec]=...) -> None: ...
    def hasDependenciesIn(self, others: AbstractSet[str]) -> bool: ...
    def visit(self, builder: DimensionConstructionBuilder) -> None: ...
