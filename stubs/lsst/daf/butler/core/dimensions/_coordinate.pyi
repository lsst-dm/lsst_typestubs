import abc
from ..named import NameLookupMapping, NamedKeyMapping, NamedValueAbstractSet
from ..timespan import Timespan
from ._elements import Dimension, DimensionElement
from ._graph import DimensionGraph
from ._records import DimensionRecord
from ._universe import DimensionUniverse
from abc import abstractmethod
from lsst.sphgeom import Region
from typing import AbstractSet, Any, Iterator, Mapping, Optional, Tuple, Union

DataIdKey = Union[str, Dimension]
DataIdValue = Union[str, int, None]

class DataCoordinate(NamedKeyMapping[Dimension, DataIdValue], metaclass=abc.ABCMeta):
    @staticmethod
    def standardize(mapping: Optional[NameLookupMapping[Dimension, DataIdValue]]=..., *, graph: Optional[DimensionGraph]=..., universe: Optional[DimensionUniverse]=..., **kwargs: Any) -> DataCoordinate: ...
    @staticmethod
    def makeEmpty(universe: DimensionUniverse) -> DataCoordinate: ...
    @staticmethod
    def fromRequiredValues(graph: DimensionGraph, values: Tuple[DataIdValue, ...]) -> DataCoordinate: ...
    @staticmethod
    def fromFullValues(graph: DimensionGraph, values: Tuple[DataIdValue, ...]) -> DataCoordinate: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __iter__(self) -> Iterator[Dimension]: ...
    def __len__(self) -> int: ...
    def keys(self) -> NamedValueAbstractSet[Dimension]: ...
    @property
    def names(self) -> AbstractSet[str]: ...
    @abstractmethod
    def subset(self, graph: DimensionGraph) -> DataCoordinate: ...
    @abstractmethod
    def expanded(self, records: NameLookupMapping[DimensionElement, Optional[DimensionRecord]]) -> DataCoordinate: ...
    @property
    def universe(self) -> DimensionUniverse: ...
    @property
    @abstractmethod
    def graph(self) -> DimensionGraph: ...
    @abstractmethod
    def hasFull(self) -> bool: ...
    @property
    def full(self) -> NamedKeyMapping[Dimension, DataIdValue]: ...
    @abstractmethod
    def hasRecords(self) -> bool: ...
    @property
    def records(self) -> NamedKeyMapping[DimensionElement, Optional[DimensionRecord]]: ...
    @property
    def region(self) -> Optional[Region]: ...
    @property
    def timespan(self) -> Optional[Timespan]: ...
    def pack(self, name: str, *, returnMaxBits: bool=...) -> Union[Tuple[int, int], int]: ...
DataId = Union[DataCoordinate, Mapping[str, Any]]

class _DataCoordinateFullView(NamedKeyMapping[Dimension, DataIdValue]):
    def __init__(self, target: DataCoordinate) -> None: ...
    def __getitem__(self, key: DataIdKey) -> DataIdValue: ...
    def __iter__(self) -> Iterator[Dimension]: ...
    def __len__(self) -> int: ...
    def keys(self) -> NamedValueAbstractSet[Dimension]: ...
    @property
    def names(self) -> AbstractSet[str]: ...

class _DataCoordinateRecordsView(NamedKeyMapping[DimensionElement, Optional[DimensionRecord]]):
    def __init__(self, target: DataCoordinate) -> None: ...
    def __getitem__(self, key: Union[DimensionElement, str]) -> Optional[DimensionRecord]: ...
    def __iter__(self) -> Iterator[DimensionElement]: ...
    def __len__(self) -> int: ...
    def keys(self) -> NamedValueAbstractSet[DimensionElement]: ...
    @property
    def names(self) -> AbstractSet[str]: ...

class _BasicTupleDataCoordinate(DataCoordinate):
    def __init__(self, graph: DimensionGraph, values: Tuple[DataIdValue, ...]) -> None: ...
    @property
    def graph(self) -> DimensionGraph: ...
    def __getitem__(self, key: DataIdKey) -> DataIdValue: ...
    def subset(self, graph: DimensionGraph) -> DataCoordinate: ...
    def expanded(self, records: NameLookupMapping[DimensionElement, Optional[DimensionRecord]]) -> DataCoordinate: ...
    def hasFull(self) -> bool: ...
    def hasRecords(self) -> bool: ...

class _ExpandedTupleDataCoordinate(_BasicTupleDataCoordinate):
    def __init__(self, graph: DimensionGraph, values: Tuple[DataIdValue, ...], records: NameLookupMapping[DimensionElement, Optional[DimensionRecord]]) -> None: ...
    def subset(self, graph: DimensionGraph) -> DataCoordinate: ...
    def expanded(self, records: NameLookupMapping[DimensionElement, Optional[DimensionRecord]]) -> DataCoordinate: ...
    def hasFull(self) -> bool: ...
    def hasRecords(self) -> bool: ...
