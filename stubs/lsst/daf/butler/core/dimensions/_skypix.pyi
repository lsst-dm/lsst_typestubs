from .. import ddl
from ...registry.interfaces import SkyPixDimensionRecordStorage
from .._topology import TopologicalFamily, TopologicalRelationshipEndpoint, TopologicalSpace
from ..named import NamedValueAbstractSet
from ._elements import Dimension
from .construction import DimensionConstructionBuilder, DimensionConstructionVisitor
from lsst.sphgeom import Pixelization
from typing import AbstractSet, Any, Mapping, Optional, Type

class SkyPixSystem(TopologicalFamily):
    maxLevel: Any = ...
    PixelizationClass: Any = ...
    def __init__(self, name: str, maxLevel: int, PixelizationClass: Type[Pixelization]) -> None: ...
    def choose(self, endpoints: NamedValueAbstractSet[TopologicalRelationshipEndpoint]) -> SkyPixDimension: ...
    def __getitem__(self, level: int) -> SkyPixDimension: ...

class SkyPixDimension(Dimension):
    system: Any = ...
    level: Any = ...
    pixelization: Any = ...
    def __init__(self, system: SkyPixSystem, level: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def required(self) -> NamedValueAbstractSet[Dimension]: ...
    @property
    def implied(self) -> NamedValueAbstractSet[Dimension]: ...
    @property
    def topology(self) -> Mapping[TopologicalSpace, TopologicalFamily]: ...
    @property
    def metadata(self) -> NamedValueAbstractSet[ddl.FieldSpec]: ...
    def hasTable(self) -> bool: ...
    def makeStorage(self) -> SkyPixDimensionRecordStorage: ...
    @property
    def uniqueKeys(self) -> NamedValueAbstractSet[ddl.FieldSpec]: ...

class SkyPixConstructionVisitor(DimensionConstructionVisitor):
    def __init__(self, name: str, pixelizationClassName: str, maxLevel: Optional[int]=...) -> None: ...
    def hasDependenciesIn(self, others: AbstractSet[str]) -> bool: ...
    def visit(self, builder: DimensionConstructionBuilder) -> None: ...
