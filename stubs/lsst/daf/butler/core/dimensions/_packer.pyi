from ._coordinate import DataCoordinate, DataId
from ._graph import DimensionGraph
from ._universe import DimensionUniverse
from .construction import DimensionConstructionBuilder, DimensionConstructionVisitor
from abc import ABCMeta, abstractmethod
from typing import AbstractSet, Any, Iterable, Tuple, Union

class DimensionPacker(metaclass=ABCMeta):
    fixed: Any = ...
    dimensions: Any = ...
    def __init__(self, fixed: DataCoordinate, dimensions: DimensionGraph) -> None: ...
    @property
    def universe(self) -> DimensionUniverse: ...
    @property
    @abstractmethod
    def maxBits(self) -> int: ...
    def pack(self, dataId: DataId, *, returnMaxBits: bool=..., **kwargs: Any) -> Union[Tuple[int, int], int]: ...
    @abstractmethod
    def unpack(self, packedId: int) -> DataCoordinate: ...

class DimensionPackerFactory:
    def __init__(self, clsName: str, fixed: AbstractSet[str], dimensions: AbstractSet[str]) -> None: ...
    def __call__(self, universe: DimensionUniverse, fixed: DataCoordinate) -> DimensionPacker: ...

class DimensionPackerConstructionVisitor(DimensionConstructionVisitor):
    def __init__(self, name: str, clsName: str, fixed: Iterable[str], dimensions: Iterable[str]) -> None: ...
    def hasDependenciesIn(self, others: AbstractSet[str]) -> bool: ...
    def visit(self, builder: DimensionConstructionBuilder) -> None: ...
