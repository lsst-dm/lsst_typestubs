import abc
import sqlalchemy
from ..simpleQuery import SimpleQuery
from ._coordinate import DataCoordinate
from ._graph import DimensionGraph
from ._universe import DimensionUniverse
from abc import abstractmethod
from typing import AbstractSet, Any, Callable, Collection, Iterable, Iterator, Optional, Sequence

class DataCoordinateIterable(Iterable[DataCoordinate], metaclass=abc.ABCMeta):
    @staticmethod
    def fromScalar(dataId: DataCoordinate) -> _ScalarDataCoordinateIterable: ...
    @property
    @abstractmethod
    def graph(self) -> DimensionGraph: ...
    @property
    def universe(self) -> DimensionUniverse: ...
    @abstractmethod
    def hasFull(self) -> bool: ...
    @abstractmethod
    def hasRecords(self) -> bool: ...
    def toSet(self) -> DataCoordinateSet: ...
    def toSequence(self) -> DataCoordinateSequence: ...
    def constrain(self, query: SimpleQuery, columns: Callable[[str], sqlalchemy.sql.ColumnElement]) -> None: ...
    @abstractmethod
    def subset(self, graph: DimensionGraph) -> DataCoordinateIterable: ...

class _ScalarDataCoordinateIterable(DataCoordinateIterable):
    def __init__(self, dataId: DataCoordinate) -> None: ...
    def __iter__(self) -> Iterator[DataCoordinate]: ...
    def __len__(self) -> int: ...
    def __contains__(self, key: Any) -> bool: ...
    @property
    def graph(self) -> DimensionGraph: ...
    def hasFull(self) -> bool: ...
    def hasRecords(self) -> bool: ...
    def subset(self, graph: DimensionGraph) -> _ScalarDataCoordinateIterable: ...

class _DataCoordinateCollectionBase(DataCoordinateIterable, metaclass=abc.ABCMeta):
    def __init__(self, dataIds: Collection[DataCoordinate], graph: DimensionGraph, *, hasFull: Optional[bool]=..., hasRecords: Optional[bool]=..., check: bool=...) -> None: ...
    @property
    def graph(self) -> DimensionGraph: ...
    def hasFull(self) -> bool: ...
    def hasRecords(self) -> bool: ...
    def toSet(self) -> DataCoordinateSet: ...
    def toSequence(self) -> DataCoordinateSequence: ...
    def __iter__(self) -> Iterator[DataCoordinate]: ...
    def __len__(self) -> int: ...
    def __contains__(self, key: Any) -> bool: ...

class DataCoordinateSet(_DataCoordinateCollectionBase):
    def __init__(self, dataIds: AbstractSet[DataCoordinate], graph: DimensionGraph, *, hasFull: Optional[bool]=..., hasRecords: Optional[bool]=..., check: bool=...) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __le__(self, other: DataCoordinateSet) -> bool: ...
    def __ge__(self, other: DataCoordinateSet) -> bool: ...
    def __lt__(self, other: DataCoordinateSet) -> bool: ...
    def __gt__(self, other: DataCoordinateSet) -> bool: ...
    def issubset(self, other: DataCoordinateIterable) -> bool: ...
    def issuperset(self, other: DataCoordinateIterable) -> bool: ...
    def isdisjoint(self, other: DataCoordinateIterable) -> bool: ...
    def __and__(self, other: DataCoordinateSet) -> DataCoordinateSet: ...
    def __or__(self, other: DataCoordinateSet) -> DataCoordinateSet: ...
    def __xor__(self, other: DataCoordinateSet) -> DataCoordinateSet: ...
    def __sub__(self, other: DataCoordinateSet) -> DataCoordinateSet: ...
    def intersection(self, other: DataCoordinateIterable) -> DataCoordinateSet: ...
    def union(self, other: DataCoordinateIterable) -> DataCoordinateSet: ...
    def symmetric_difference(self, other: DataCoordinateIterable) -> DataCoordinateSet: ...
    def difference(self, other: DataCoordinateIterable) -> DataCoordinateSet: ...
    def toSet(self) -> DataCoordinateSet: ...
    def subset(self, graph: DimensionGraph) -> DataCoordinateSet: ...

class DataCoordinateSequence(_DataCoordinateCollectionBase, Sequence[DataCoordinate]):
    def __init__(self, dataIds: Sequence[DataCoordinate], graph: DimensionGraph, *, hasFull: Optional[bool]=..., hasRecords: Optional[bool]=..., check: bool=...) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __getitem__(self, index: int) -> DataCoordinate: ...
    def __getitem__(self, index: slice) -> DataCoordinateSequence: ...
    def __getitem__(self, index: Any) -> Any: ...
    def toSequence(self) -> DataCoordinateSequence: ...
    def subset(self, graph: DimensionGraph) -> DataCoordinateSequence: ...
