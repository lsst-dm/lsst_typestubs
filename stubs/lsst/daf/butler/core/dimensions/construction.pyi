import abc
from .._topology import TopologicalFamily as TopologicalFamily, TopologicalSpace as TopologicalSpace
from ..named import NamedValueSet as NamedValueSet
from ._elements import Dimension as Dimension, DimensionElement as DimensionElement
from ._packer import DimensionPackerFactory as DimensionPackerFactory
from abc import ABC, abstractmethod
from typing import AbstractSet, Any, Iterable

class DimensionConstructionVisitor(ABC, metaclass=abc.ABCMeta):
    name: Any = ...
    def __init__(self, name: str) -> None: ...
    @abstractmethod
    def hasDependenciesIn(self, others: AbstractSet[str]) -> bool: ...
    @abstractmethod
    def visit(self, builder: DimensionConstructionBuilder) -> None: ...

class DimensionConstructionBuilder:
    dimensions: Any = ...
    elements: Any = ...
    topology: Any = ...
    packers: Any = ...
    version: Any = ...
    commonSkyPixName: Any = ...
    def __init__(self, version: int, commonSkyPixName: str, *, visitors: Iterable[DimensionConstructionVisitor]=...) -> None: ...
    def add(self, visitor: DimensionConstructionVisitor) -> None: ...
    def update(self, visitors: Iterable[DimensionConstructionVisitor]) -> None: ...
    def finish(self) -> None: ...
