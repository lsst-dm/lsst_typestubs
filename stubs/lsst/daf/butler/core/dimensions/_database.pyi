import abc
from .. import ddl
from ...registry.interfaces import Database, DatabaseDimensionRecordStorage, GovernorDimensionRecordStorage, StaticTablesContext
from .._topology import TopologicalFamily, TopologicalRelationshipEndpoint, TopologicalSpace
from ..named import NamedKeyMapping, NamedValueAbstractSet, NamedValueSet
from ._elements import Dimension, DimensionCombination, DimensionElement
from ._governor import GovernorDimension
from .construction import DimensionConstructionBuilder, DimensionConstructionVisitor
from typing import AbstractSet, Any, Iterable, Mapping, Optional, Set

class DatabaseTopologicalFamily(TopologicalFamily):
    members: Any = ...
    def __init__(self, name: str, space: TopologicalSpace, members: NamedValueAbstractSet[DimensionElement]) -> None: ...
    def choose(self, endpoints: NamedValueAbstractSet[TopologicalRelationshipEndpoint]) -> DimensionElement: ...
    @property
    def governor(self) -> GovernorDimension: ...

class DatabaseTopologicalFamilyConstructionVisitor(DimensionConstructionVisitor):
    def __init__(self, name: str, space: TopologicalSpace, members: Iterable[str]) -> None: ...
    def hasDependenciesIn(self, others: AbstractSet[str]) -> bool: ...
    def visit(self, builder: DimensionConstructionBuilder) -> None: ...

class DatabaseDimensionElement(DimensionElement, metaclass=abc.ABCMeta):
    def __init__(self, name: str, storage: dict, implied: NamedValueAbstractSet[Dimension], metadata: NamedValueAbstractSet[ddl.FieldSpec]) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def implied(self) -> NamedValueAbstractSet[Dimension]: ...
    @property
    def metadata(self) -> NamedValueAbstractSet[ddl.FieldSpec]: ...
    @property
    def viewOf(self) -> Optional[str]: ...
    @property
    def topology(self) -> Mapping[TopologicalSpace, DatabaseTopologicalFamily]: ...
    @property
    def spatial(self) -> Optional[DatabaseTopologicalFamily]: ...
    @property
    def temporal(self) -> Optional[DatabaseTopologicalFamily]: ...
    def makeStorage(self, db: Database, *, context: Optional[StaticTablesContext]=..., governors: NamedKeyMapping[GovernorDimension, GovernorDimensionRecordStorage]) -> DatabaseDimensionRecordStorage: ...

class DatabaseDimension(Dimension, DatabaseDimensionElement):
    def __init__(self, name: str, storage: dict, required: NamedValueSet[Dimension], implied: NamedValueAbstractSet[Dimension], metadata: NamedValueAbstractSet[ddl.FieldSpec], uniqueKeys: NamedValueAbstractSet[ddl.FieldSpec]) -> None: ...
    @property
    def required(self) -> NamedValueAbstractSet[Dimension]: ...
    @property
    def uniqueKeys(self) -> NamedValueAbstractSet[ddl.FieldSpec]: ...

class DatabaseDimensionCombination(DimensionCombination, DatabaseDimensionElement):
    def __init__(self, name: str, storage: dict, required: NamedValueAbstractSet[Dimension], implied: NamedValueAbstractSet[Dimension], metadata: NamedValueAbstractSet[ddl.FieldSpec], alwaysJoin: bool) -> None: ...
    @property
    def required(self) -> NamedValueAbstractSet[Dimension]: ...
    @property
    def alwaysJoin(self) -> bool: ...

class DatabaseDimensionElementConstructionVisitor(DimensionConstructionVisitor):
    def __init__(self, name: str, storage: dict, required: Set[str], implied: Set[str], metadata: Iterable[ddl.FieldSpec]=..., uniqueKeys: Iterable[ddl.FieldSpec]=..., alwaysJoin: bool=...) -> None: ...
    def hasDependenciesIn(self, others: AbstractSet[str]) -> bool: ...
    def visit(self, builder: DimensionConstructionBuilder) -> None: ...
