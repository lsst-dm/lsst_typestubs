from .configSupport import LookupKey
from typing import Any, Dict, Iterable, Set, Tuple, Type, Union

class MappingFactory:
    refType: Any = ...
    def __init__(self, refType: Type) -> None: ...
    def __contains__(self, key: Any) -> bool: ...
    def getLookupKeys(self) -> Set[LookupKey]: ...
    def getClassFromRegistryWithMatch(self, targetClasses: Iterable[Any]) -> Tuple[LookupKey, Type, Dict[Any, Any]]: ...
    def getClassFromRegistry(self, targetClasses: Iterable[Any]) -> Type: ...
    def getFromRegistryWithMatch(self, targetClasses: Iterable[Any], *args: Any, **kwargs: Any) -> Tuple[LookupKey, Any]: ...
    def getFromRegistry(self, targetClasses: Iterable[Any], *args: Any, **kwargs: Any) -> Any: ...
    def placeInRegistry(self, registryKey: Any, typeName: Union[str, Type], overwrite: bool=..., **kwargs: Any) -> None: ...
