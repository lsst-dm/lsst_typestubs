from ..core import DatasetAssociation, DatasetType, Datastore, DimensionElement, DimensionRecord, FileDataset
from ..registry import CollectionType, Registry
from ..registry.interfaces import CollectionRecord
from ._interfaces import RepoExportBackend, RepoImportBackend
from typing import Any, IO, Iterable, Optional, Set

class YamlRepoExportBackend(RepoExportBackend):
    stream: Any = ...
    data: Any = ...
    def __init__(self, stream: IO) -> None: ...
    def saveDimensionData(self, element: DimensionElement, *data: DimensionRecord) -> None: ...
    def saveCollection(self, record: CollectionRecord, doc: Optional[str]) -> None: ...
    def saveDatasets(self, datasetType: DatasetType, run: str, *datasets: FileDataset) -> None: ...
    def saveDatasetAssociations(self, collection: str, collectionType: CollectionType, associations: Iterable[DatasetAssociation]) -> None: ...
    def finish(self) -> None: ...

class YamlRepoImportBackend(RepoImportBackend):
    runs: Any = ...
    chains: Any = ...
    collections: Any = ...
    collectionDocs: Any = ...
    datasetTypes: Any = ...
    dimensions: Any = ...
    tagAssociations: Any = ...
    calibAssociations: Any = ...
    refsByFileId: Any = ...
    registry: Any = ...
    datasets: Any = ...
    def __init__(self, stream: IO, registry: Registry) -> None: ...
    def register(self) -> None: ...
    def load(self, datastore: Optional[Datastore], *, directory: Optional[str]=..., transfer: Optional[str]=..., skip_dimensions: Optional[Set]=...) -> None: ...
