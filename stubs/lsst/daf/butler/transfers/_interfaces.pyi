import abc
from ..core import ConfigSubset, DatasetAssociation, DatasetType, Datastore, DimensionElement, DimensionRecord, FileDataset
from ..registry import CollectionType
from ..registry.interfaces import CollectionRecord
from abc import ABC, abstractmethod
from typing import Iterable, Optional, Set

class RepoTransferFormatConfig(ConfigSubset):
    component: str = ...
    defaultConfigFile: str = ...

class RepoExportBackend(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def saveDimensionData(self, element: DimensionElement, *data: DimensionRecord) -> None: ...
    @abstractmethod
    def saveCollection(self, record: CollectionRecord, doc: Optional[str]) -> None: ...
    @abstractmethod
    def saveDatasets(self, datasetType: DatasetType, run: str, *datasets: FileDataset) -> None: ...
    @abstractmethod
    def saveDatasetAssociations(self, collection: str, collectionType: CollectionType, associations: Iterable[DatasetAssociation]) -> None: ...
    @abstractmethod
    def finish(self) -> None: ...

class RepoImportBackend(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def register(self) -> None: ...
    @abstractmethod
    def load(self, datastore: Optional[Datastore], *, directory: Optional[str]=..., transfer: Optional[str]=..., skip_dimensions: Optional[Set]=...) -> None: ...
