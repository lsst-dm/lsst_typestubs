from .tables import CollectionSummaryTables, StaticDatasetTablesTuple
from lsst.daf.butler import DatasetRef, DatasetType, ddl
from lsst.daf.butler.registry.interfaces import CollectionManager, Database, DatasetRecordStorage, DatasetRecordStorageManager, DimensionRecordStorageManager, StaticTablesContext, VersionTuple
from typing import Any, Iterator, Optional, Tuple

class ByDimensionsDatasetRecordStorageManager(DatasetRecordStorageManager):
    def __init__(self, db: Database, collections: CollectionManager, dimensions: DimensionRecordStorageManager, static: StaticDatasetTablesTuple, summaries: CollectionSummaryTables) -> None: ...
    @classmethod
    def initialize(cls: Any, db: Database, context: StaticTablesContext, collections: CollectionManager, dimensions: DimensionRecordStorageManager) -> DatasetRecordStorageManager: ...
    @classmethod
    def addDatasetForeignKey(cls: Any, tableSpec: ddl.TableSpec, *, name: str=..., constraint: bool=..., onDelete: Optional[str]=..., **kwargs: Any) -> ddl.FieldSpec: ...
    def refresh(self) -> None: ...
    def remove(self, name: str) -> None: ...
    def find(self, name: str) -> Optional[DatasetRecordStorage]: ...
    def register(self, datasetType: DatasetType) -> Tuple[DatasetRecordStorage, bool]: ...
    def __iter__(self) -> Iterator[DatasetType]: ...
    def getDatasetRef(self, id: int) -> Optional[DatasetRef]: ...
    @classmethod
    def currentVersion(cls: Any) -> Optional[VersionTuple]: ...
    def schemaDigest(self) -> Optional[str]: ...
