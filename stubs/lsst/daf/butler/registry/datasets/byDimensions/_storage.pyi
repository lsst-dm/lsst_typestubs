import sqlalchemy
from ...interfaces import CollectionManager, CollectionRecord, Database, RunRecord
from .tables import CollectionSummaryTables, StaticDatasetTablesTuple
from lsst.daf.butler import DataCoordinate, DatasetRef, DatasetType, SimpleQuery, Timespan
from lsst.daf.butler.registry.interfaces import DatasetRecordStorage
from typing import Iterable, Iterator, Optional

class ByDimensionsDatasetRecordStorage(DatasetRecordStorage):
    def __init__(self, datasetType: DatasetType, db: Database, dataset_type_id: int, collections: CollectionManager, static: StaticDatasetTablesTuple, summaries: CollectionSummaryTables, tags: sqlalchemy.schema.Table, calibs: Optional[sqlalchemy.schema.Table]) -> None: ...
    def insert(self, run: RunRecord, dataIds: Iterable[DataCoordinate]) -> Iterator[DatasetRef]: ...
    def find(self, collection: CollectionRecord, dataId: DataCoordinate, timespan: Optional[Timespan]=...) -> Optional[DatasetRef]: ...
    def delete(self, datasets: Iterable[DatasetRef]) -> None: ...
    def associate(self, collection: CollectionRecord, datasets: Iterable[DatasetRef]) -> None: ...
    def disassociate(self, collection: CollectionRecord, datasets: Iterable[DatasetRef]) -> None: ...
    def certify(self, collection: CollectionRecord, datasets: Iterable[DatasetRef], timespan: Timespan) -> None: ...
    def decertify(self, collection: CollectionRecord, timespan: Timespan, *, dataIds: Optional[Iterable[DataCoordinate]]=...) -> None: ...
    def select(self, collection: CollectionRecord, dataId: SimpleQuery.Select.Or[DataCoordinate]=..., id: SimpleQuery.Select.Or[Optional[int]]=..., run: SimpleQuery.Select.Or[None]=..., timespan: SimpleQuery.Select.Or[Optional[Timespan]]=..., ingestDate: SimpleQuery.Select.Or[Optional[Timespan]]=...) -> SimpleQuery: ...
    def getDataId(self, id: int) -> DataCoordinate: ...
