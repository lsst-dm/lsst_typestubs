import abc
import sqlalchemy
from ...core import DimensionUniverse as DimensionUniverse, Timespan as Timespan, TimespanDatabaseRepresentation as TimespanDatabaseRepresentation, ddl as ddl
from .._collectionType import CollectionType as CollectionType
from ..interfaces import ChainedCollectionRecord as ChainedCollectionRecord, CollectionManager as CollectionManager, CollectionRecord as CollectionRecord, Database as Database, DimensionRecordStorageManager as DimensionRecordStorageManager, MissingCollectionError as MissingCollectionError, RunRecord as RunRecord
from ..wildcards import CollectionSearch as CollectionSearch
from collections import namedtuple
from typing import Any, Iterator, Optional, Type, TypeVar

CollectionTablesTuple = namedtuple('CollectionTablesTuple', ['collection', 'run', 'collection_chain'])

def makeRunTableSpec(collectionIdName: str, collectionIdType: type, tsRepr: Type[TimespanDatabaseRepresentation]) -> ddl.TableSpec: ...
def makeCollectionChainTableSpec(collectionIdName: str, collectionIdType: type) -> ddl.TableSpec: ...

class DefaultRunRecord(RunRecord):
    def __init__(self, db: Database, key: Any, name: str, table: sqlalchemy.schema.Table, idColumnName: str, *, host: Optional[str]=..., timespan: Optional[Timespan]=...) -> None: ...
    def update(self, host: Optional[str]=..., timespan: Optional[Timespan]=...) -> None: ...
    @property
    def host(self) -> Optional[str]: ...
    @property
    def timespan(self) -> Timespan: ...

class DefaultChainedCollectionRecord(ChainedCollectionRecord):
    def __init__(self, db: Database, key: Any, name: str, table: sqlalchemy.schema.Table, universe: DimensionUniverse) -> None: ...
K = TypeVar('K')

class DefaultCollectionManager(CollectionManager, metaclass=abc.ABCMeta):
    def __init__(self, db: Database, tables: CollectionTablesTuple, collectionIdName: str, dimensions: DimensionRecordStorageManager) -> None: ...
    def refresh(self) -> None: ...
    def register(self, name: str, type: CollectionType, doc: Optional[str]=...) -> CollectionRecord: ...
    def remove(self, name: str) -> None: ...
    def find(self, name: str) -> CollectionRecord: ...
    def __getitem__(self, key: Any) -> CollectionRecord: ...
    def __iter__(self) -> Iterator[CollectionRecord]: ...
    def getDocumentation(self, key: Any) -> Optional[str]: ...
    def setDocumentation(self, key: Any, doc: Optional[str]) -> None: ...
