from ...core import ddl
from ..interfaces import Database, DimensionRecordStorageManager, StaticTablesContext, VersionTuple
from ._base import DefaultCollectionManager
from typing import Any, Optional

class NameKeyCollectionManager(DefaultCollectionManager):
    @classmethod
    def initialize(cls: Any, db: Database, context: StaticTablesContext, dimensions: DimensionRecordStorageManager) -> NameKeyCollectionManager: ...
    @classmethod
    def getCollectionForeignKeyName(cls: Any, prefix: str=...) -> str: ...
    @classmethod
    def getRunForeignKeyName(cls: Any, prefix: str=...) -> str: ...
    @classmethod
    def addCollectionForeignKey(cls: Any, tableSpec: ddl.TableSpec, *, prefix: str=..., onDelete: Optional[str]=..., constraint: bool=..., **kwargs: Any) -> ddl.FieldSpec: ...
    @classmethod
    def addRunForeignKey(cls: Any, tableSpec: ddl.TableSpec, *, prefix: str=..., onDelete: Optional[str]=..., constraint: bool=..., **kwargs: Any) -> ddl.FieldSpec: ...
    @classmethod
    def currentVersion(cls: Any) -> Optional[VersionTuple]: ...
    def schemaDigest(self) -> Optional[str]: ...
