from .interfaces import ButlerAttributeManager, VersionTuple
from typing import Any, Mapping, Optional

class MissingVersionError(RuntimeError): ...
class IncompatibleVersionError(RuntimeError): ...
class MissingManagerError(RuntimeError): ...
class ManagerMismatchError(RuntimeError): ...
class DigestMismatchError(RuntimeError): ...

class VersionInfo:
    version: Any = ...
    digest: Any = ...
    def __init__(self, version: VersionTuple, digest: Optional[str]=...) -> None: ...

class ButlerVersionsManager:
    def __init__(self, attributes: ButlerAttributeManager, managers: Mapping[str, Any]) -> None: ...
    @staticmethod
    def checkCompatibility(old_version: VersionTuple, new_version: VersionTuple, update: bool) -> bool: ...
    def storeManagersConfig(self) -> None: ...
    def storeManagersVersions(self) -> None: ...
    def checkManagersConfig(self) -> None: ...
    def checkManagersVersions(self, writeable: bool) -> None: ...
    def checkManagersDigests(self) -> None: ...
