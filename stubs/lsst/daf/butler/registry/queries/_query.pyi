import abc
import enum
import sqlalchemy
from ...core import DataCoordinate, DatasetRef, DatasetType, Dimension, DimensionElement, DimensionGraph, DimensionRecord, DimensionUniverse, SimpleQuery
from ..interfaces import Database
from ._builder import QueryBuilder
from ._structs import DatasetQueryColumns, QueryColumns, QuerySummary, RegistryManagers
from abc import ABC, abstractmethod
from lsst.sphgeom import Region
from typing import Any, Callable, Iterable, Iterator, Mapping, Optional

class Query(ABC, metaclass=abc.ABCMeta):
    graph: Any = ...
    whereRegion: Any = ...
    managers: Any = ...
    def __init__(self, graph: DimensionGraph, whereRegion: Optional[Region], managers: RegistryManagers) -> None: ...
    @abstractmethod
    def isUnique(self) -> bool: ...
    @abstractmethod
    def getDimensionColumn(self, name: str) -> sqlalchemy.sql.ColumnElement: ...
    @property
    @abstractmethod
    def spatial(self) -> Iterator[DimensionElement]: ...
    @abstractmethod
    def getRegionColumn(self, name: str) -> sqlalchemy.sql.ColumnElement: ...
    @property
    def datasetType(self) -> Optional[DatasetType]: ...
    @abstractmethod
    def getDatasetColumns(self) -> Optional[DatasetQueryColumns]: ...
    @property
    @abstractmethod
    def sql(self) -> Optional[sqlalchemy.sql.FromClause]: ...
    def predicate(self, region: Optional[Region]=...) -> Callable[[sqlalchemy.engine.RowProxy], bool]: ...
    def rows(self, db: Database, *, region: Optional[Region]=...) -> Iterator[Optional[sqlalchemy.engine.RowProxy]]: ...
    def extractDimensionsTuple(self, row: Optional[sqlalchemy.engine.RowProxy], dimensions: Iterable[Dimension]) -> tuple: ...
    def extractDataId(self, row: Optional[sqlalchemy.engine.RowProxy], *, graph: Optional[DimensionGraph]=..., records: Optional[Mapping[str, Mapping[tuple, DimensionRecord]]]=...) -> DataCoordinate: ...
    def extractDatasetRef(self, row: sqlalchemy.engine.RowProxy, dataId: Optional[DataCoordinate]=..., records: Optional[Mapping[str, Mapping[tuple, DimensionRecord]]]=...) -> DatasetRef: ...
    def materialize(self, db: Database) -> Iterator[Query]: ...
    @abstractmethod
    def subset(self, *, graph: Optional[DimensionGraph]=..., datasets: bool=..., unique: bool=...) -> Query: ...
    @abstractmethod
    def makeBuilder(self, summary: Optional[QuerySummary]=...) -> QueryBuilder: ...

class DirectQueryUniqueness(enum.Enum):
    NOT_UNIQUE: Any = ...
    NATURALLY_UNIQUE: Any = ...
    NEEDS_DISTINCT: Any = ...

class DirectQuery(Query):
    def __init__(self, simpleQuery: SimpleQuery, columns: QueryColumns, uniqueness: DirectQueryUniqueness, graph: DimensionGraph, whereRegion: Optional[Region], managers: RegistryManagers) -> None: ...
    def isUnique(self) -> bool: ...
    def getDimensionColumn(self, name: str) -> sqlalchemy.sql.ColumnElement: ...
    @property
    def spatial(self) -> Iterator[DimensionElement]: ...
    def getRegionColumn(self, name: str) -> sqlalchemy.sql.ColumnElement: ...
    def getDatasetColumns(self) -> Optional[DatasetQueryColumns]: ...
    @property
    def sql(self) -> sqlalchemy.sql.FromClause: ...
    def subset(self, *, graph: Optional[DimensionGraph]=..., datasets: bool=..., unique: bool=...) -> Query: ...
    def makeBuilder(self, summary: Optional[QuerySummary]=...) -> QueryBuilder: ...

class MaterializedQuery(Query):
    def __init__(self, table: sqlalchemy.schema.Table, spatial: Iterable[DimensionElement], datasetType: Optional[DatasetType], isUnique: bool, graph: DimensionGraph, whereRegion: Optional[Region], managers: RegistryManagers) -> None: ...
    def isUnique(self) -> bool: ...
    def getDimensionColumn(self, name: str) -> sqlalchemy.sql.ColumnElement: ...
    @property
    def spatial(self) -> Iterator[DimensionElement]: ...
    def getRegionColumn(self, name: str) -> sqlalchemy.sql.ColumnElement: ...
    def getDatasetColumns(self) -> Optional[DatasetQueryColumns]: ...
    @property
    def sql(self) -> sqlalchemy.sql.FromClause: ...
    def materialize(self, db: Database) -> Iterator[Query]: ...
    def subset(self, *, graph: Optional[DimensionGraph]=..., datasets: bool=..., unique: bool=...) -> Query: ...
    def makeBuilder(self, summary: Optional[QuerySummary]=...) -> QueryBuilder: ...

class EmptyQuery(Query):
    def __init__(self, universe: DimensionUniverse, managers: RegistryManagers) -> None: ...
    def isUnique(self) -> bool: ...
    def getDimensionColumn(self, name: str) -> sqlalchemy.sql.ColumnElement: ...
    @property
    def spatial(self) -> Iterator[DimensionElement]: ...
    def getRegionColumn(self, name: str) -> sqlalchemy.sql.ColumnElement: ...
    def getDatasetColumns(self) -> Optional[DatasetQueryColumns]: ...
    def rows(self, db: Database, *, region: Optional[Region]=...) -> Iterator[Optional[sqlalchemy.engine.RowProxy]]: ...
    @property
    def sql(self) -> Optional[sqlalchemy.sql.FromClause]: ...
    def materialize(self, db: Database) -> Iterator[Query]: ...
    def subset(self, *, graph: Optional[DimensionGraph]=..., datasets: bool=..., unique: bool=...) -> Query: ...
    def makeBuilder(self, summary: Optional[QuerySummary]=...) -> QueryBuilder: ...
