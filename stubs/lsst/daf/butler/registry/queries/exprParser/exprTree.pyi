import abc
import astropy.time
from .treeVisitor import TreeVisitor
from abc import ABC, abstractmethod
from typing import Any, List, Optional, Tuple

class Node(ABC, metaclass=abc.ABCMeta):
    children: Any = ...
    def __init__(self, children: Tuple[Node, ...]=...) -> None: ...
    @abstractmethod
    def visit(self, visitor: TreeVisitor) -> Any: ...

class BinaryOp(Node):
    lhs: Any = ...
    op: Any = ...
    rhs: Any = ...
    def __init__(self, lhs: Node, op: str, rhs: Node) -> None: ...
    def visit(self, visitor: TreeVisitor) -> Any: ...

class UnaryOp(Node):
    op: Any = ...
    operand: Any = ...
    def __init__(self, op: str, operand: Node) -> None: ...
    def visit(self, visitor: TreeVisitor) -> Any: ...

class StringLiteral(Node):
    value: Any = ...
    def __init__(self, value: str) -> None: ...
    def visit(self, visitor: TreeVisitor) -> Any: ...

class TimeLiteral(Node):
    value: Any = ...
    def __init__(self, value: astropy.time.Time) -> None: ...
    def visit(self, visitor: TreeVisitor) -> Any: ...

class NumericLiteral(Node):
    value: Any = ...
    def __init__(self, value: str) -> None: ...
    def visit(self, visitor: TreeVisitor) -> Any: ...

class Identifier(Node):
    name: Any = ...
    def __init__(self, name: str) -> None: ...
    def visit(self, visitor: TreeVisitor) -> Any: ...

class RangeLiteral(Node):
    start: Any = ...
    stop: Any = ...
    stride: Any = ...
    def __init__(self, start: int, stop: int, stride: Optional[int]=...) -> None: ...
    def visit(self, visitor: TreeVisitor) -> Any: ...

class IsIn(Node):
    lhs: Any = ...
    values: Any = ...
    not_in: Any = ...
    def __init__(self, lhs: Node, values: List[Node], not_in: bool=...) -> None: ...
    def visit(self, visitor: TreeVisitor) -> Any: ...

class Parens(Node):
    expr: Any = ...
    def __init__(self, expr: Node) -> None: ...
    def visit(self, visitor: TreeVisitor) -> Any: ...

class TupleNode(Node):
    items: Any = ...
    def __init__(self, items: Tuple[Node, ...]) -> None: ...
    def visit(self, visitor: TreeVisitor) -> Any: ...

class FunctionCall(Node):
    name: Any = ...
    args: Any = ...
    def __init__(self, function: str, args: List[Node]) -> None: ...
    def visit(self, visitor: TreeVisitor) -> Any: ...

class PointNode(Node):
    ra: Any = ...
    dec: Any = ...
    def __init__(self, ra: Node, dec: Node) -> None: ...
    def visit(self, visitor: TreeVisitor) -> Any: ...

def function_call(function: str, args: List[Node]) -> Node: ...
