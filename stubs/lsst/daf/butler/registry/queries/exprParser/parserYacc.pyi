from typing import Any, Optional

class ParserYaccError(Exception): ...

class ParseError(ParserYaccError):
    expression: Any = ...
    token: Any = ...
    pos: Any = ...
    lineno: Any = ...
    posInLine: Any = ...
    def __init__(self, expression: Any, token: Any, pos: Any, lineno: Any) -> None: ...

class ParserEOFError(ParserYaccError):
    def __init__(self) -> None: ...

class ParserYacc:
    parser: Any = ...
    def __init__(self, idMap: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def parse(self, input: Any, lexer: Optional[Any] = ..., debug: bool = ..., tracking: bool = ...): ...
    tokens: Any = ...
    precedence: Any = ...
    def p_input(self, p: Any) -> None: ...
    def p_empty(self, p: Any) -> None: ...
    def p_expr(self, p: Any) -> None: ...
    def p_bool_primary(self, p: Any) -> None: ...
    def p_predicate(self, p: Any) -> None: ...
    def p_identifier(self, p: Any) -> None: ...
    def p_literal_or_id_list(self, p: Any) -> None: ...
    def p_bit_expr(self, p: Any) -> None: ...
    def p_simple_expr_lit(self, p: Any) -> None: ...
    def p_simple_expr_id(self, p: Any) -> None: ...
    def p_simple_expr_function_call(self, p: Any) -> None: ...
    def p_simple_expr_unary(self, p: Any) -> None: ...
    def p_simple_expr_paren(self, p: Any) -> None: ...
    def p_simple_expr_tuple(self, p: Any) -> None: ...
    def p_literal_num(self, p: Any) -> None: ...
    def p_literal_num_signed(self, p: Any) -> None: ...
    def p_literal_str(self, p: Any) -> None: ...
    def p_literal_time(self, p: Any) -> None: ...
    def p_literal_range(self, p: Any) -> None: ...
    def p_function_call(self, p: Any) -> None: ...
    def p_expr_list(self, p: Any) -> None: ...
    def p_error(self, p: Any) -> None: ...
