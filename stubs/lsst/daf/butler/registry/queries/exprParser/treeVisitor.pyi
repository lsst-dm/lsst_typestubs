import abc
import astropy.time
from .exprTree import Node
from abc import abstractmethod
from typing import List, Optional, Tuple, TypeVar

T = TypeVar('T')

class TreeVisitor(metaclass=abc.ABCMeta):
    @abstractmethod
    def visitNumericLiteral(self, value: str, node: Node) -> T: ...
    @abstractmethod
    def visitStringLiteral(self, value: str, node: Node) -> T: ...
    @abstractmethod
    def visitTimeLiteral(self, value: astropy.time.Time, node: Node) -> T: ...
    @abstractmethod
    def visitRangeLiteral(self, start: int, stop: int, stride: Optional[int], node: Node) -> T: ...
    @abstractmethod
    def visitIdentifier(self, name: str, node: Node) -> T: ...
    @abstractmethod
    def visitUnaryOp(self, operator: str, operand: T, node: Node) -> T: ...
    @abstractmethod
    def visitBinaryOp(self, operator: str, lhs: T, rhs: T, node: Node) -> T: ...
    @abstractmethod
    def visitIsIn(self, lhs: T, values: List[T], not_in: bool, node: Node) -> T: ...
    @abstractmethod
    def visitParens(self, expression: T, node: Node) -> T: ...
    @abstractmethod
    def visitTupleNode(self, items: Tuple[T, ...], node: Node) -> T: ...
    def visitFunctionCall(self, name: str, args: List[T], node: Node) -> T: ...
    @abstractmethod
    def visitPointNode(self, ra: T, dec: T, node: Node) -> T: ...
