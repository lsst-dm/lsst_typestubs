import abc
import sqlalchemy
from ...core import DataCoordinate, DataCoordinateIterable, DatasetRef, DatasetType, DimensionGraph, DimensionRecord, SimpleQuery
from ..interfaces import Database
from ._query import Query
from abc import abstractmethod
from typing import Any, Callable, ContextManager, Iterable, Iterator, Mapping, Optional, Sequence, Union

class DataCoordinateQueryResults(DataCoordinateIterable):
    def __init__(self, db: Database, query: Query, *, records: Optional[Mapping[str, Mapping[tuple, DimensionRecord]]]=...) -> None: ...
    def __iter__(self) -> Iterator[DataCoordinate]: ...
    @property
    def graph(self) -> DimensionGraph: ...
    def hasFull(self) -> bool: ...
    def hasRecords(self) -> bool: ...
    def materialize(self) -> Iterator[DataCoordinateQueryResults]: ...
    def expanded(self) -> DataCoordinateQueryResults: ...
    def subset(self, graph: Optional[DimensionGraph]=..., *, unique: bool=...) -> DataCoordinateQueryResults: ...
    def constrain(self, query: SimpleQuery, columns: Callable[[str], sqlalchemy.sql.ColumnElement]) -> None: ...
    def findDatasets(self, datasetType: Union[DatasetType, str], collections: Any, *, findFirst: bool=...) -> ParentDatasetQueryResults: ...

class DatasetQueryResults(Iterable[DatasetRef], metaclass=abc.ABCMeta):
    @abstractmethod
    def byParentDatasetType(self) -> Iterator[ParentDatasetQueryResults]: ...
    @abstractmethod
    def materialize(self) -> ContextManager[DatasetQueryResults]: ...
    @abstractmethod
    def expanded(self) -> DatasetQueryResults: ...

class ParentDatasetQueryResults(DatasetQueryResults):
    def __init__(self, db: Database, query: Query, components: Sequence[Optional[str]], *, records: Optional[Mapping[str, Mapping[tuple, DimensionRecord]]]=...) -> None: ...
    def __iter__(self) -> Iterator[DatasetRef]: ...
    def byParentDatasetType(self) -> Iterator[ParentDatasetQueryResults]: ...
    def materialize(self) -> Iterator[ParentDatasetQueryResults]: ...
    @property
    def parentDatasetType(self) -> DatasetType: ...
    @property
    def dataIds(self) -> DataCoordinateQueryResults: ...
    def withComponents(self, components: Sequence[Optional[str]]) -> ParentDatasetQueryResults: ...
    def expanded(self) -> ParentDatasetQueryResults: ...

class ChainedDatasetQueryResults(DatasetQueryResults):
    def __init__(self, chain: Sequence[ParentDatasetQueryResults]) -> None: ...
    def __iter__(self) -> Iterator[DatasetRef]: ...
    def byParentDatasetType(self) -> Iterator[ParentDatasetQueryResults]: ...
    def materialize(self) -> Iterator[ChainedDatasetQueryResults]: ...
    def expanded(self) -> ChainedDatasetQueryResults: ...
