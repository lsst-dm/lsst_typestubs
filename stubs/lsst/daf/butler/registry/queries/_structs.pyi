from ...core import DataCoordinate, DatasetType, Dimension, DimensionElement, DimensionGraph, DimensionUniverse, NamedKeyMapping, NamedValueAbstractSet, NamedValueSet
from ..interfaces import CollectionManager, DatasetRecordStorageManager, DimensionRecordStorageManager
from ..wildcards import GovernorDimensionRestriction
from .exprParser import Node
from lsst.sphgeom import Region
from sqlalchemy.sql import ColumnElement
from typing import AbstractSet, Any, Iterator, Optional, Union

class QueryWhereExpression:
    def __init__(self, expression: Optional[str]=...) -> None: ...
    def attach(self, graph: DimensionGraph, dataId: Optional[DataCoordinate]=..., region: Optional[Region]=..., check: bool=...) -> QueryWhereClause: ...

class QueryWhereClause:
    tree: Optional[Node]
    dataId: DataCoordinate
    dimensions: NamedValueAbstractSet[Dimension]
    columns: NamedKeyMapping[DimensionElement, AbstractSet[str]]
    region: Optional[Region]
    restriction: GovernorDimensionRestriction
    def __init__(self, tree: Any, dataId: Any, dimensions: Any, columns: Any, region: Any, restriction: Any) -> None: ...

class QuerySummary:
    requested: Any = ...
    where: Any = ...
    def __init__(self, requested: DimensionGraph, *, dataId: Optional[DataCoordinate]=..., expression: Optional[Union[str, QueryWhereExpression]]=..., whereRegion: Optional[Region]=..., check: bool=...) -> None: ...
    @property
    def universe(self) -> DimensionUniverse: ...
    @property
    def spatial(self) -> NamedValueSet[DimensionElement]: ...
    @property
    def temporal(self) -> NamedValueSet[DimensionElement]: ...
    @property
    def mustHaveKeysJoined(self) -> DimensionGraph: ...
    @property
    def mustHaveTableJoined(self) -> NamedValueSet[DimensionElement]: ...

class DatasetQueryColumns:
    datasetType: DatasetType
    id: ColumnElement
    runKey: ColumnElement
    ingestDate: Optional[ColumnElement]
    def __iter__(self) -> Iterator[ColumnElement]: ...
    def __init__(self, datasetType: Any, id: Any, runKey: Any, ingestDate: Any) -> None: ...

class QueryColumns:
    keys: Any = ...
    timespans: Any = ...
    regions: Any = ...
    datasets: Any = ...
    def __init__(self) -> None: ...
    def isEmpty(self) -> bool: ...
    def getKeyColumn(self, dimension: Union[Dimension, str]) -> ColumnElement: ...

class RegistryManagers:
    collections: CollectionManager
    datasets: DatasetRecordStorageManager
    dimensions: DimensionRecordStorageManager
    def __init__(self, collections: Any, datasets: Any, dimensions: Any) -> None: ...
