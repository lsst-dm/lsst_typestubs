import astropy.time
import sqlalchemy
from ...core import DataCoordinate as DataCoordinate, Dimension as Dimension, DimensionElement as DimensionElement, DimensionGraph as DimensionGraph, DimensionUniverse as DimensionUniverse, GovernorDimension as GovernorDimension, NamedKeyDict as NamedKeyDict, NamedValueSet as NamedValueSet
from ...core.ddl import AstropyTimeNsecTai as AstropyTimeNsecTai
from ..wildcards import Ellipsis as Ellipsis, EllipsisType as EllipsisType
from ._structs import QueryColumns as QueryColumns
from .exprParser import Node as Node, NormalForm as NormalForm, NormalFormVisitor as NormalFormVisitor, TreeVisitor as TreeVisitor
from typing import Any, List, Mapping, Optional, Sequence, Set, Tuple, Union

class _TimestampColumnElement(sqlalchemy.sql.ColumnElement):
    def __init__(self, column: sqlalchemy.sql.ColumnElement) -> None: ...

def compile_timestamp_sqlite(element: Any, compiler: Any, **kw: Mapping[str, Any]) -> str: ...
def compile_timestamp_pg(element: Any, compiler: Any, **kw: Mapping[str, Any]) -> str: ...
def categorizeIngestDateId(name: str) -> bool: ...
def categorizeElementId(universe: DimensionUniverse, name: str) -> Tuple[DimensionElement, Optional[str]]: ...

class InspectionSummary:
    hasIngestDate: Any = ...
    def update(self, other: InspectionSummary) -> None: ...
    dimensions: NamedValueSet[Dimension] = ...
    columns: NamedKeyDict[DimensionElement, Set[str]] = ...
    def __init__(self, dimensions: Any, columns: Any, hasIngestDate: Any) -> None: ...

class TreeSummary(InspectionSummary):
    dataIdValue: Any = ...
    dataIdKey: Any = ...
    def merge(self, other: TreeSummary, isEq: bool=...) -> TreeSummary: ...
    def isDataIdKeyOnly(self) -> bool: ...
    def isDataIdValueOnly(self) -> bool: ...
    def __init__(self, dimensions: Any, columns: Any, hasIngestDate: Any, dataIdKey: Any, dataIdValue: Any) -> None: ...

class InspectionVisitor(TreeVisitor[TreeSummary]):
    universe: Any = ...
    def __init__(self, universe: DimensionUniverse) -> None: ...
    def visitNumericLiteral(self, value: str, node: Node) -> TreeSummary: ...
    def visitStringLiteral(self, value: str, node: Node) -> TreeSummary: ...
    def visitTimeLiteral(self, value: astropy.time.Time, node: Node) -> TreeSummary: ...
    def visitIdentifier(self, name: str, node: Node) -> TreeSummary: ...
    def visitUnaryOp(self, operator: str, operand: TreeSummary, node: Node) -> TreeSummary: ...
    def visitBinaryOp(self, operator: str, lhs: TreeSummary, rhs: TreeSummary, node: Node) -> TreeSummary: ...
    def visitIsIn(self, lhs: TreeSummary, values: List[TreeSummary], not_in: bool, node: Node) -> TreeSummary: ...
    def visitParens(self, expression: TreeSummary, node: Node) -> TreeSummary: ...
    def visitTupleNode(self, items: Tuple[TreeSummary, ...], node: Node) -> TreeSummary: ...
    def visitRangeLiteral(self, start: int, stop: int, stride: Optional[int], node: Node) -> TreeSummary: ...
    def visitPointNode(self, ra: TreeSummary, dec: TreeSummary, node: Node) -> TreeSummary: ...

class InnerSummary(InspectionSummary):
    governors: NamedKeyDict[GovernorDimension, str] = ...
    def __init__(self, dimensions: Any, columns: Any, hasIngestDate: Any, governors: Any) -> None: ...

class OuterSummary(InspectionSummary):
    governors: NamedKeyDict[GovernorDimension, Union[Set[str], EllipsisType]] = ...
    def __init__(self, dimensions: Any, columns: Any, hasIngestDate: Any, governors: Any) -> None: ...

class CheckVisitor(NormalFormVisitor[TreeSummary, InnerSummary, OuterSummary]):
    dataId: Any = ...
    graph: Any = ...
    def __init__(self, dataId: DataCoordinate, graph: DimensionGraph) -> None: ...
    def visitBranch(self, node: Node) -> TreeSummary: ...
    def visitInner(self, branches: Sequence[TreeSummary], form: NormalForm) -> InnerSummary: ...
    def visitOuter(self, branches: Sequence[InnerSummary], form: NormalForm) -> OuterSummary: ...

class ClauseVisitor(TreeVisitor[sqlalchemy.sql.ColumnElement]):
    unaryOps: Any = ...
    binaryOps: Any = ...
    universe: Any = ...
    columns: Any = ...
    elements: Any = ...
    hasIngestDate: bool = ...
    def __init__(self, universe: DimensionUniverse, columns: QueryColumns, elements: NamedKeyDict[DimensionElement, sqlalchemy.sql.FromClause]) -> None: ...
    def visitNumericLiteral(self, value: str, node: Node) -> sqlalchemy.sql.ColumnElement: ...
    def visitStringLiteral(self, value: str, node: Node) -> sqlalchemy.sql.ColumnElement: ...
    def visitTimeLiteral(self, value: astropy.time.Time, node: Node) -> sqlalchemy.sql.ColumnElement: ...
    def visitIdentifier(self, name: str, node: Node) -> sqlalchemy.sql.ColumnElement: ...
    def visitUnaryOp(self, operator: str, operand: sqlalchemy.sql.ColumnElement, node: Node) -> sqlalchemy.sql.ColumnElement: ...
    def visitBinaryOp(self, operator: str, lhs: sqlalchemy.sql.ColumnElement, rhs: sqlalchemy.sql.ColumnElement, node: Node) -> sqlalchemy.sql.ColumnElement: ...
    def visitIsIn(self, lhs: sqlalchemy.sql.ColumnElement, values: List[sqlalchemy.sql.ColumnElement], not_in: bool, node: Node) -> sqlalchemy.sql.ColumnElement: ...
    def visitParens(self, expression: sqlalchemy.sql.ColumnElement, node: Node) -> sqlalchemy.sql.ColumnElement: ...
    def visitTupleNode(self, items: Tuple[sqlalchemy.sql.ColumnElement, ...], node: Node) -> sqlalchemy.sql.ColumnElement: ...
    def visitRangeLiteral(self, start: int, stop: int, stride: Optional[int], node: Node) -> sqlalchemy.sql.ColumnElement: ...
    def visitPointNode(self, ra: Any, dec: Any, node: Node) -> None: ...
