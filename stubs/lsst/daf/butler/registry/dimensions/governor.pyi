import sqlalchemy
from ...core import DataCoordinateIterable, DimensionElement, DimensionRecord, GovernorDimension, NamedKeyDict, TimespanDatabaseRepresentation
from ..interfaces import Database, GovernorDimensionRecordStorage, StaticTablesContext
from ..queries import QueryBuilder
from typing import AbstractSet, Any, Callable, Iterable, Mapping, Optional

class BasicGovernorDimensionRecordStorage(GovernorDimensionRecordStorage):
    def __init__(self, db: Database, dimension: GovernorDimension, table: sqlalchemy.schema.Table) -> None: ...
    @classmethod
    def initialize(cls: Any, db: Database, element: GovernorDimension, *, context: Optional[StaticTablesContext]=..., config: Mapping[str, Any]) -> GovernorDimensionRecordStorage: ...
    @property
    def element(self) -> GovernorDimension: ...
    def refresh(self) -> None: ...
    @property
    def values(self) -> AbstractSet[str]: ...
    @property
    def table(self) -> sqlalchemy.schema.Table: ...
    def registerInsertionListener(self, callback: Callable[[DimensionRecord], None]) -> None: ...
    def clearCaches(self) -> None: ...
    def join(self, builder: QueryBuilder, *, regions: Optional[NamedKeyDict[DimensionElement, sqlalchemy.sql.ColumnElement]]=..., timespans: Optional[NamedKeyDict[DimensionElement, TimespanDatabaseRepresentation]]=...) -> None: ...
    def insert(self, *records: DimensionRecord) -> None: ...
    def sync(self, record: DimensionRecord) -> bool: ...
    def fetch(self, dataIds: DataCoordinateIterable) -> Iterable[DimensionRecord]: ...
    def digestTables(self) -> Iterable[sqlalchemy.schema.Table]: ...
