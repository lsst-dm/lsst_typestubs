import sqlalchemy
from ...core import DataCoordinateIterable, DatabaseDimensionElement, DimensionElement, DimensionRecord, GovernorDimension, NamedKeyDict, NamedKeyMapping, SkyPixDimension, TimespanDatabaseRepresentation
from ..interfaces import Database, DatabaseDimensionOverlapStorage, DatabaseDimensionRecordStorage, GovernorDimensionRecordStorage, StaticTablesContext
from ..queries import QueryBuilder
from ..wildcards import EllipsisType
from typing import AbstractSet, Any, Iterable, Mapping, Optional, Sequence, Union

class TableDimensionRecordStorage(DatabaseDimensionRecordStorage):
    def __init__(self, db: Database, element: DatabaseDimensionElement, table: sqlalchemy.schema.Table, *, skyPixOverlap: Optional[_SkyPixOverlapStorage]=...) -> None: ...
    @classmethod
    def initialize(cls: Any, db: Database, element: DatabaseDimensionElement, *, context: Optional[StaticTablesContext]=..., config: Mapping[str, Any], governors: NamedKeyMapping[GovernorDimension, GovernorDimensionRecordStorage]) -> DatabaseDimensionRecordStorage: ...
    @property
    def element(self) -> DatabaseDimensionElement: ...
    def clearCaches(self) -> None: ...
    def join(self, builder: QueryBuilder, *, regions: Optional[NamedKeyDict[DimensionElement, sqlalchemy.sql.ColumnElement]]=..., timespans: Optional[NamedKeyDict[DimensionElement, TimespanDatabaseRepresentation]]=...) -> None: ...
    def fetch(self, dataIds: DataCoordinateIterable) -> Iterable[DimensionRecord]: ...
    def insert(self, *records: DimensionRecord) -> None: ...
    def sync(self, record: DimensionRecord) -> bool: ...
    def digestTables(self) -> Iterable[sqlalchemy.schema.Table]: ...
    def connect(self, overlaps: DatabaseDimensionOverlapStorage) -> None: ...

class _SkyPixOverlapStorage:
    element: Any = ...
    def __init__(self, db: Database, element: DatabaseDimensionElement, summaryTable: sqlalchemy.schema.Table, overlapTable: sqlalchemy.schema.Table, governor: GovernorDimensionRecordStorage) -> None: ...
    @classmethod
    def initialize(cls: Any, db: Database, element: DatabaseDimensionElement, context: Optional[StaticTablesContext], governor: GovernorDimensionRecordStorage) -> _SkyPixOverlapStorage: ...
    def enable(self, storage: TableDimensionRecordStorage, skypix: SkyPixDimension, governorValue: str) -> None: ...
    def insert(self, records: Sequence[DimensionRecord]) -> None: ...
    def select(self, skypix: SkyPixDimension, governorValues: Union[AbstractSet[str], EllipsisType]) -> sqlalchemy.sql.FromClause: ...
    def digestTables(self) -> Iterable[sqlalchemy.schema.Table]: ...
