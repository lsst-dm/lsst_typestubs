import sqlalchemy
from ...core import DataCoordinateIterable, DatabaseDimension, DatabaseDimensionElement, DimensionElement, DimensionRecord, GovernorDimension, NamedKeyDict, NamedKeyMapping, TimespanDatabaseRepresentation
from ..interfaces import Database, DatabaseDimensionRecordStorage, GovernorDimensionRecordStorage, StaticTablesContext
from ..queries import QueryBuilder
from typing import Any, Iterable, Mapping, Optional

class QueryDimensionRecordStorage(DatabaseDimensionRecordStorage):
    def __init__(self, db: Database, element: DatabaseDimensionElement, viewOf: str) -> None: ...
    @classmethod
    def initialize(cls: Any, db: Database, element: DatabaseDimensionElement, *, context: Optional[StaticTablesContext]=..., config: Mapping[str, Any], governors: NamedKeyMapping[GovernorDimension, GovernorDimensionRecordStorage]) -> DatabaseDimensionRecordStorage: ...
    @property
    def element(self) -> DatabaseDimension: ...
    def clearCaches(self) -> None: ...
    def join(self, builder: QueryBuilder, *, regions: Optional[NamedKeyDict[DimensionElement, sqlalchemy.sql.ColumnElement]]=..., timespans: Optional[NamedKeyDict[DimensionElement, TimespanDatabaseRepresentation]]=...) -> None: ...
    def insert(self, *records: DimensionRecord) -> None: ...
    def sync(self, record: DimensionRecord) -> bool: ...
    def fetch(self, dataIds: DataCoordinateIterable) -> Iterable[DimensionRecord]: ...
    def digestTables(self) -> Iterable[sqlalchemy.schema.Table]: ...
