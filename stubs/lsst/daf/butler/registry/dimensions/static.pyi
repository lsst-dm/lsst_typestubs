import sqlalchemy
from ...core import DatabaseDimensionElement as DatabaseDimensionElement, DatabaseTopologicalFamily as DatabaseTopologicalFamily, DimensionElement as DimensionElement, DimensionGraph as DimensionGraph, DimensionUniverse as DimensionUniverse, GovernorDimension as GovernorDimension, NamedKeyDict as NamedKeyDict, SkyPixDimension as SkyPixDimension, ddl as ddl
from ..interfaces import Database as Database, DatabaseDimensionOverlapStorage as DatabaseDimensionOverlapStorage, DatabaseDimensionRecordStorage as DatabaseDimensionRecordStorage, DimensionRecordStorage as DimensionRecordStorage, DimensionRecordStorageManager as DimensionRecordStorageManager, GovernorDimensionRecordStorage as GovernorDimensionRecordStorage, StaticTablesContext as StaticTablesContext, VersionTuple as VersionTuple
from typing import Any, Dict, Optional, Tuple

class StaticDimensionRecordStorageManager(DimensionRecordStorageManager):
    def __init__(self, db: Database, records: NamedKeyDict[DimensionElement, DimensionRecordStorage], overlaps: Dict[Tuple[DatabaseDimensionElement, DatabaseDimensionElement], DatabaseDimensionOverlapStorage], dimensionGraphStorage: _DimensionGraphStorage, universe: DimensionUniverse) -> None: ...
    @classmethod
    def initialize(cls: Any, db: Database, context: StaticTablesContext, universe: DimensionUniverse) -> DimensionRecordStorageManager: ...
    def refresh(self) -> None: ...
    def get(self, element: DimensionElement) -> Optional[DimensionRecordStorage]: ...
    def register(self, element: DimensionElement) -> DimensionRecordStorage: ...
    def saveDimensionGraph(self, graph: DimensionGraph) -> int: ...
    def loadDimensionGraph(self, key: int) -> DimensionGraph: ...
    def clearCaches(self) -> None: ...
    @classmethod
    def currentVersion(cls: Any) -> Optional[VersionTuple]: ...
    def schemaDigest(self) -> Optional[str]: ...

class _DimensionGraphStorage:
    def __init__(self, db: Database, idTable: sqlalchemy.schema.Table, definitionTable: sqlalchemy.schema.Table, universe: DimensionUniverse) -> None: ...
    @classmethod
    def initialize(cls: Any, db: Database, context: StaticTablesContext, universe: DimensionUniverse) -> _DimensionGraphStorage: ...
    def refresh(self) -> None: ...
    def save(self, graph: DimensionGraph) -> int: ...
    def load(self, key: int) -> DimensionGraph: ...
