import sqlalchemy.ext.compiler
from ..interfaces import Database, StaticTablesContext
from typing import Any, ContextManager, Iterable, List, Optional

class _Replace(sqlalchemy.sql.Insert): ...
class _Ensure(sqlalchemy.sql.Insert): ...

class _AutoincrementCompoundKeyWorkaround:
    table: sqlalchemy.schema.Table
    column: str
    def __init__(self, table: Any, column: Any) -> None: ...

class SqliteDatabase(Database):
    filename: Any = ...
    def __init__(self, connection: sqlalchemy.engine.Connection, origin: int, *, namespace: Optional[str]=..., writeable: bool=...) -> None: ...
    @classmethod
    def makeDefaultUri(cls: Any, root: str) -> Optional[str]: ...
    @classmethod
    def connect(cls: Any, uri: Optional[str]=..., *, filename: Optional[str]=..., writeable: bool=...) -> sqlalchemy.engine.Connection: ...
    @classmethod
    def fromConnection(cls: Any, connection: sqlalchemy.engine.Connection, origin: int, *, namespace: Optional[str]=..., writeable: bool=...) -> Database: ...
    def isWriteable(self) -> bool: ...
    def declareStaticTables(self, create: bool) -> ContextManager[StaticTablesContext]: ...
    def insert(self, table: sqlalchemy.schema.Table, *rows: dict, returnIds: bool=..., select: Optional[sqlalchemy.sql.Select]=..., names: Optional[Iterable[str]]=...) -> Optional[List[int]]: ...
    def replace(self, table: sqlalchemy.schema.Table, *rows: dict) -> None: ...
    def ensure(self, table: sqlalchemy.schema.Table, *rows: dict) -> int: ...
