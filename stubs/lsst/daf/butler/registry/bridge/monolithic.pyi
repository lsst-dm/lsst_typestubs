from collections import namedtuple
from lsst.daf.butler import DatasetRef, DimensionUniverse
from lsst.daf.butler.registry.interfaces import Database, DatasetIdRef, DatasetRecordStorageManager, DatastoreRegistryBridge, DatastoreRegistryBridgeManager, OpaqueTableStorageManager, StaticTablesContext, VersionTuple
from typing import Any, Iterable, Iterator, Optional, Type

_TablesTuple = namedtuple('_TablesTuple', ['dataset_location', 'dataset_location_trash'])

class MonolithicDatastoreRegistryBridge(DatastoreRegistryBridge):
    def __init__(self, datastoreName: str, db: Database, tables: _TablesTuple) -> None: ...
    def insert(self, refs: Iterable[DatasetIdRef]) -> None: ...
    def moveToTrash(self, refs: Iterable[DatasetIdRef]) -> None: ...
    def check(self, refs: Iterable[DatasetIdRef]) -> Iterable[DatasetIdRef]: ...
    def emptyTrash(self) -> Iterator[Iterable[DatasetIdRef]]: ...

class MonolithicDatastoreRegistryBridgeManager(DatastoreRegistryBridgeManager):
    def __init__(self, db: Database, tables: _TablesTuple, opaque: OpaqueTableStorageManager, universe: DimensionUniverse) -> None: ...
    @classmethod
    def initialize(cls: Any, db: Database, context: StaticTablesContext, opaque: OpaqueTableStorageManager, datasets: Type[DatasetRecordStorageManager], universe: DimensionUniverse) -> DatastoreRegistryBridgeManager: ...
    def refresh(self) -> None: ...
    def register(self, name: str, *, ephemeral: bool=...) -> DatastoreRegistryBridge: ...
    def findDatastores(self, ref: DatasetRef) -> Iterable[str]: ...
    @classmethod
    def currentVersion(cls: Any) -> Optional[VersionTuple]: ...
    def schemaDigest(self) -> Optional[str]: ...
