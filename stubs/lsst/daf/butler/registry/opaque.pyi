import sqlalchemy
from ..core.ddl import TableSpec
from .interfaces import Database, OpaqueTableStorage, OpaqueTableStorageManager, StaticTablesContext, VersionTuple
from typing import Any, Iterator, Optional

class ByNameOpaqueTableStorage(OpaqueTableStorage):
    def __init__(self, db: Database, name: str, table: sqlalchemy.schema.Table) -> None: ...
    def insert(self, *data: dict) -> None: ...
    def fetch(self, **where: Any) -> Iterator[dict]: ...
    def delete(self, **where: Any) -> None: ...

class ByNameOpaqueTableStorageManager(OpaqueTableStorageManager):
    def __init__(self, db: Database, metaTable: sqlalchemy.schema.Table) -> None: ...
    @classmethod
    def initialize(cls: Any, db: Database, context: StaticTablesContext) -> OpaqueTableStorageManager: ...
    def get(self, name: str) -> Optional[OpaqueTableStorage]: ...
    def register(self, name: str, spec: TableSpec) -> OpaqueTableStorage: ...
    @classmethod
    def currentVersion(cls: Any) -> Optional[VersionTuple]: ...
    def schemaDigest(self) -> Optional[str]: ...
