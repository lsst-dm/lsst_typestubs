import abc
import sqlalchemy
from ...core import ddl
from ..interfaces import Database
from abc import ABC, abstractmethod
from collections import namedtuple
from typing import Any, ContextManager

StaticTablesTuple = namedtuple('StaticTablesTuple', ['a', 'b', 'c'])

class DatabaseTests(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def makeEmptyDatabase(self, origin: int=...) -> Database: ...
    @abstractmethod
    def asReadOnly(self, database: Database) -> ContextManager[Database]: ...
    @abstractmethod
    def getNewConnection(self, database: Database, writeable: bool) -> Database: ...
    def checkTable(self, spec: ddl.TableSpec, table: sqlalchemy.schema.Table) -> Any: ...
    def checkStaticSchema(self, tables: StaticTablesTuple) -> Any: ...
    def testDeclareStaticTables(self) -> None: ...
    def testDeclareStaticTablesTwice(self) -> None: ...
    def testRepr(self) -> None: ...
    def testDynamicTables(self) -> None: ...
    def testTemporaryTables(self) -> None: ...
    def testSchemaSeparation(self) -> None: ...
    def testInsertQueryDelete(self) -> None: ...
    def testUpdate(self) -> None: ...
    def testSync(self) -> None: ...
    def testReplace(self) -> None: ...
    def testEnsure(self) -> None: ...
    def testTransactionNesting(self) -> None: ...
    def testTransactionLocking(self): ...
    def testTimespanDatabaseRepresentation(self): ...
