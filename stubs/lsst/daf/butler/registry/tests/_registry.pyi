import abc
from .._registry import Registry, RegistryConfig
from abc import ABC, abstractmethod
from typing import Any, Optional

class RegistryTests(ABC, metaclass=abc.ABCMeta):
    collectionsManager: Optional[str] = ...
    @classmethod
    @abstractmethod
    def getDataDir(cls: Any) -> str: ...
    def makeRegistryConfig(self) -> RegistryConfig: ...
    @abstractmethod
    def makeRegistry(self) -> Registry: ...
    def loadData(self, registry: Registry, filename: str) -> Any: ...
    def testOpaque(self) -> None: ...
    def testDatasetType(self) -> None: ...
    def testDimensions(self) -> None: ...
    def testNumpyDataId(self) -> None: ...
    def testDataIdRelationships(self) -> None: ...
    def testDataset(self) -> None: ...
    def testFindDataset(self) -> None: ...
    def testDatasetTypeComponentQueries(self) -> None: ...
    def testComponentLookups(self) -> None: ...
    def testCollections(self) -> None: ...
    def testBasicTransaction(self) -> None: ...
    def testNestedTransaction(self) -> None: ...
    def testInstrumentDimensions(self) -> None: ...
    def testSkyMapDimensions(self) -> None: ...
    def testSpatialJoin(self) -> None: ...
    def testAbstractQuery(self) -> None: ...
    def testAttributeManager(self) -> None: ...
    def testQueryDatasetsDeduplication(self) -> None: ...
    def testQueryResults(self) -> None: ...
    def testEmptyDimensionsQueries(self) -> None: ...
    def testCalibrationCollections(self) -> None: ...
    def testIngestTimeQuery(self) -> None: ...
