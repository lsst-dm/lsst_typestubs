import abc
from ...core import DatasetRef, DatasetType, DimensionUniverse
from ._database import Database, StaticTablesContext
from ._datasets import DatasetRecordStorageManager
from ._opaque import OpaqueTableStorageManager
from ._versioning import VersionedExtension
from abc import ABC, abstractmethod
from typing import Any, ContextManager, Iterable, Type, Union

class FakeDatasetRef:
    id: Any = ...
    def __init__(self, id: int) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def getCheckedId(self) -> int: ...
    @property
    def datasetType(self) -> DatasetType: ...
DatasetIdRef = Union[DatasetRef, FakeDatasetRef]

class DatastoreRegistryBridge(ABC, metaclass=abc.ABCMeta):
    datastoreName: Any = ...
    def __init__(self, datastoreName: str) -> None: ...
    @abstractmethod
    def insert(self, refs: Iterable[DatasetIdRef]) -> None: ...
    @abstractmethod
    def moveToTrash(self, refs: Iterable[DatasetIdRef]) -> None: ...
    @abstractmethod
    def check(self, refs: Iterable[DatasetIdRef]) -> Iterable[DatasetIdRef]: ...
    @abstractmethod
    def emptyTrash(self) -> ContextManager[Iterable[DatasetIdRef]]: ...

class DatastoreRegistryBridgeManager(VersionedExtension, metaclass=abc.ABCMeta):
    opaque: Any = ...
    universe: Any = ...
    def __init__(self, opaque: OpaqueTableStorageManager, universe: DimensionUniverse) -> None: ...
    @classmethod
    @abstractmethod
    def initialize(cls: Any, db: Database, context: StaticTablesContext, opaque: OpaqueTableStorageManager, datasets: Type[DatasetRecordStorageManager], universe: DimensionUniverse) -> DatastoreRegistryBridgeManager: ...
    @abstractmethod
    def refresh(self) -> None: ...
    @abstractmethod
    def register(self, name: str, *, ephemeral: bool=...) -> DatastoreRegistryBridge: ...
    @abstractmethod
    def findDatastores(self, ref: DatasetRef) -> Iterable[str]: ...
