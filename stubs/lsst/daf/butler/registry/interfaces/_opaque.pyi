import abc
from ...core.ddl import TableSpec
from ._database import Database, StaticTablesContext
from ._versioning import VersionedExtension
from abc import ABC, abstractmethod
from typing import Any, Iterator, Optional

class OpaqueTableStorage(ABC, metaclass=abc.ABCMeta):
    name: Any = ...
    def __init__(self, name: str) -> None: ...
    @abstractmethod
    def insert(self, *data: dict) -> None: ...
    @abstractmethod
    def fetch(self, **where: Any) -> Iterator[dict]: ...
    @abstractmethod
    def delete(self, **where: Any) -> None: ...

class OpaqueTableStorageManager(VersionedExtension, metaclass=abc.ABCMeta):
    @classmethod
    @abstractmethod
    def initialize(cls: Any, db: Database, context: StaticTablesContext) -> OpaqueTableStorageManager: ...
    def __getitem__(self, name: str) -> OpaqueTableStorage: ...
    @abstractmethod
    def get(self, name: str) -> Optional[OpaqueTableStorage]: ...
    @abstractmethod
    def register(self, name: str, spec: TableSpec) -> OpaqueTableStorage: ...
