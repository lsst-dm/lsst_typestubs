from ... import script as script
from ..opt import collection_argument as collection_argument, collection_type_option as collection_type_option, collections_option as collections_option, components_option as components_option, dataset_type_option as dataset_type_option, datasets_option as datasets_option, dimensions_argument as dimensions_argument, directory_argument as directory_argument, element_argument as element_argument, glob_argument as glob_argument, options_file_option as options_file_option, repo_argument as repo_argument, transfer_option as transfer_option, verbose_option as verbose_option, where_option as where_option
from ..utils import ButlerCommand as ButlerCommand, cli_handle_exception as cli_handle_exception, split_commas as split_commas, to_upper as to_upper, typeStrAcceptsMultiple as typeStrAcceptsMultiple, unwrap as unwrap
from typing import Any

willCreateRepoHelp: str
existingRepoHelp: str
whereHelp: Any

def butler_import(*args: Any, **kwargs: Any) -> None: ...
def create(*args: Any, **kwargs: Any) -> None: ...
def config_dump(*args: Any, **kwargs: Any) -> None: ...
def config_validate(*args: Any, **kwargs: Any) -> None: ...
def prune_collection(**kwargs: Any) -> None: ...
def query_collections(*args: Any, **kwargs: Any) -> None: ...
def query_dataset_types(*args: Any, **kwargs: Any) -> None: ...
def remove_dataset_type(*args: Any, **kwargs: Any) -> None: ...
def query_datasets(**kwargs: Any) -> None: ...
def certify_calibrations(*args: Any, **kwargs: Any) -> None: ...
def query_data_ids(**kwargs: Any) -> None: ...
def query_dimension_records(**kwargs: Any) -> None: ...
