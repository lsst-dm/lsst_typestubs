from .genericDatastore import GenericBaseDatastore
from lsst.daf.butler import ButlerURI, Config, DatasetRef, DatasetType, LookupKey, StorageClass, StoredDatastoreItemInfo
from lsst.daf.butler.registry.interfaces import DatasetIdRef, DatastoreRegistryBridge, DatastoreRegistryBridgeManager
from typing import Any, Dict, Iterable, List, Mapping, Optional, Set, Tuple, Union

class StoredMemoryItemInfo(StoredDatastoreItemInfo):
    timestamp: float
    storageClass: StorageClass
    parentID: int
    def __init__(self, timestamp: Any, storageClass: Any, parentID: Any) -> None: ...

class InMemoryDatastore(GenericBaseDatastore):
    defaultConfigFile: str = ...
    isEphemeral: bool = ...
    datasets: Dict[int, Any]
    records: Dict[int, StoredMemoryItemInfo]
    name: Any = ...
    related: Any = ...
    def __init__(self, config: Union[Config, str], bridgeManager: DatastoreRegistryBridgeManager, butlerRoot: Optional[str]=...) -> None: ...
    @classmethod
    def setConfigRoot(cls: Any, root: str, config: Config, full: Config, overwrite: bool=...) -> None: ...
    @property
    def bridge(self) -> DatastoreRegistryBridge: ...
    def addStoredItemInfo(self, refs: Iterable[DatasetRef], infos: Iterable[StoredMemoryItemInfo]) -> None: ...
    def getStoredItemInfo(self, ref: DatasetIdRef) -> StoredMemoryItemInfo: ...
    def getStoredItemsInfo(self, ref: DatasetIdRef) -> List[StoredMemoryItemInfo]: ...
    def removeStoredItemInfo(self, ref: DatasetIdRef) -> None: ...
    def exists(self, ref: DatasetRef) -> bool: ...
    def get(self, ref: DatasetRef, parameters: Optional[Mapping[str, Any]]=...) -> Any: ...
    def put(self, inMemoryDataset: Any, ref: DatasetRef) -> None: ...
    def getURIs(self, ref: DatasetRef, predict: bool=...) -> Tuple[Optional[ButlerURI], Dict[str, ButlerURI]]: ...
    def getURI(self, ref: DatasetRef, predict: bool=...) -> ButlerURI: ...
    def trash(self, ref: DatasetRef, ignore_errors: bool=...) -> None: ...
    def emptyTrash(self, ignore_errors: bool=...) -> None: ...
    def validateConfiguration(self, entities: Iterable[Union[DatasetRef, DatasetType, StorageClass]], logFailures: bool=...) -> None: ...
    def validateKey(self, lookupKey: LookupKey, entity: Union[DatasetRef, DatasetType, StorageClass]) -> None: ...
    def getLookupKeys(self) -> Set[LookupKey]: ...
