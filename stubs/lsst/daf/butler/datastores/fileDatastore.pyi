from .genericDatastore import GenericBaseDatastore
from lsst.daf.butler import ButlerURI, CompositesMap, Config, DatasetRef, DatasetType, Datastore, DatastoreConfig, FileDataset, FileTemplates, Formatter, FormatterFactory, Location, LocationFactory, LookupKey, StorageClass, StoredFileInfo, ddl
from lsst.daf.butler.registry.interfaces import DatasetIdRef, DatastoreRegistryBridge, DatastoreRegistryBridgeManager
from typing import Any, ClassVar, Dict, Iterable, List, Mapping, Optional, Set, Tuple, Union

class _IngestPrepData(Datastore.IngestPrepData):
    datasets: Any = ...
    def __init__(self, datasets: List[FileDataset]) -> None: ...

class DatastoreFileGetInformation:
    location: Location
    formatter: Formatter
    info: StoredFileInfo
    assemblerParams: Dict[str, Any]
    formatterParams: Dict[str, Any]
    component: Optional[str]
    readStorageClass: StorageClass
    def __init__(self, location: Any, formatter: Any, info: Any, assemblerParams: Any, formatterParams: Any, component: Any, readStorageClass: Any) -> None: ...

class FileDatastore(GenericBaseDatastore):
    defaultConfigFile: ClassVar[Optional[str]] = ...
    root: ButlerURI
    locationFactory: LocationFactory
    formatterFactory: FormatterFactory
    templates: FileTemplates
    composites: CompositesMap
    @classmethod
    def setConfigRoot(cls: Any, root: str, config: Config, full: Config, overwrite: bool=...) -> None: ...
    @classmethod
    def makeTableSpec(cls: Any) -> ddl.TableSpec: ...
    name: Any = ...
    useChecksum: Any = ...
    def __init__(self, config: Union[DatastoreConfig, str], bridgeManager: DatastoreRegistryBridgeManager, butlerRoot: str=...) -> None: ...
    @property
    def bridge(self) -> DatastoreRegistryBridge: ...
    def addStoredItemInfo(self, refs: Iterable[DatasetRef], infos: Iterable[StoredFileInfo]) -> None: ...
    def getStoredItemsInfo(self, ref: DatasetIdRef) -> List[StoredFileInfo]: ...
    def removeStoredItemInfo(self, ref: DatasetIdRef) -> None: ...
    def exists(self, ref: DatasetRef) -> bool: ...
    def getURIs(self, ref: DatasetRef, predict: bool=...) -> Tuple[Optional[ButlerURI], Dict[str, ButlerURI]]: ...
    def getURI(self, ref: DatasetRef, predict: bool=...) -> ButlerURI: ...
    def get(self, ref: DatasetRef, parameters: Optional[Mapping[str, Any]]=...) -> Any: ...
    def put(self, inMemoryDataset: Any, ref: DatasetRef) -> None: ...
    def trash(self, ref: DatasetRef, ignore_errors: bool=...) -> None: ...
    def emptyTrash(self, ignore_errors: bool=...) -> None: ...
    def validateConfiguration(self, entities: Iterable[Union[DatasetRef, DatasetType, StorageClass]], logFailures: bool=...) -> None: ...
    def getLookupKeys(self) -> Set[LookupKey]: ...
    def validateKey(self, lookupKey: LookupKey, entity: Union[DatasetRef, DatasetType, StorageClass]) -> None: ...
    def export(self, refs: Iterable[DatasetRef], *, directory: Optional[Union[ButlerURI, str]]=..., transfer: Optional[str]=...) -> Iterable[FileDataset]: ...
    @staticmethod
    def computeChecksum(uri: ButlerURI, algorithm: str=..., block_size: int=...) -> Optional[str]: ...
