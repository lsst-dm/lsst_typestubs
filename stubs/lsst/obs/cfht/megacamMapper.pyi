from lsst.obs.base import CameraMapper
from typing import Any

class MegacamMapper(CameraMapper):
    packageName: str = ...
    MakeRawVisitInfoClass: Any = ...
    defectRegistry: Any = ...
    defectPath: Any = ...
    filterIdMap: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def map_defects(self, dataId: Any, write: bool = ...): ...
    def bypass_defects(self, datasetType: Any, pythonType: Any, butlerLocation: Any, dataId: Any): ...
    def bypass_ccdExposureId(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_ccdExposureId_bits(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_CoaddExposureId_bits(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_CoaddExposureId(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    bypass_deepCoaddId: Any = ...
    bypass_deepCoaddId_bits: Any = ...
    def bypass_deepMergedCoaddId(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    bypass_deepMergedCoaddId_bits: Any = ...
    def std_bias(self, image: Any, dataId: Any): ...
    def std_dark(self, image: Any, dataId: Any): ...
    def std_flat(self, image: Any, dataId: Any): ...
    def std_fringe(self, image: Any, dataId: Any): ...
