import lsst.pex.exceptions as dafPersist
from typing import Any, Optional

class CameraMapper(dafPersist.Mapper):
    packageName: Any = ...
    MakeRawVisitInfoClass: Any = ...
    PupilFactoryClass: Any = ...
    translatorClass: Any = ...
    log: Any = ...
    root: Any = ...
    levels: Any = ...
    defaultLevel: Any = ...
    defaultSubLevels: Any = ...
    rootStorage: Any = ...
    registry: Any = ...
    calibRegistry: Any = ...
    keyDict: Any = ...
    cameraDataLocation: Any = ...
    camera: Any = ...
    filters: Any = ...
    makeRawVisitInfo: Any = ...
    def __init__(self, policy: Any, repositoryDir: Any, root: Optional[Any] = ..., registry: Optional[Any] = ..., calibRoot: Optional[Any] = ..., calibRegistry: Optional[Any] = ..., provided: Optional[Any] = ..., parentRegistry: Optional[Any] = ..., repositoryCfg: Optional[Any] = ...) -> None: ...
    def backup(self, datasetType: Any, dataId: Any): ...
    def keys(self): ...
    def getKeys(self, datasetType: Any, level: Any): ...
    def getDefaultLevel(self): ...
    def getDefaultSubLevel(self, level: Any): ...
    @classmethod
    def getCameraName(cls): ...
    @classmethod
    def getPackageName(cls): ...
    @classmethod
    def getGen3Instrument(cls): ...
    @classmethod
    def getPackageDir(cls): ...
    def map_camera(self, dataId: Any, write: bool = ...): ...
    def bypass_camera(self, datasetType: Any, pythonType: Any, butlerLocation: Any, dataId: Any): ...
    def map_expIdInfo(self, dataId: Any, write: bool = ...): ...
    def bypass_expIdInfo(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def std_bfKernel(self, item: Any, dataId: Any): ...
    def std_raw(self, item: Any, dataId: Any): ...
    def map_skypolicy(self, dataId: Any): ...
    def std_skypolicy(self, item: Any, dataId: Any): ...
    @staticmethod
    def getShortCcdName(ccdName: Any): ...
    def getRegistry(self): ...
    def getImageCompressionSettings(self, datasetType: Any, dataId: Any): ...

def exposureFromImage(image: Any, dataId: Optional[Any] = ..., mapper: Optional[Any] = ..., logger: Optional[Any] = ..., setVisitInfo: bool = ...): ...
