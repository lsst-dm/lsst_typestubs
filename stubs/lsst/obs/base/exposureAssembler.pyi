from lsst.afw.image import Filter as Filter, makeExposure as makeExposure, makeMaskedImage as makeMaskedImage, stripFilterKeywords as stripFilterKeywords
from lsst.daf.butler import StorageClassDelegate as StorageClassDelegate
from typing import Any, Optional

class ExposureAssembler(StorageClassDelegate):
    EXPOSURE_COMPONENTS: Any = ...
    EXPOSURE_INFO_COMPONENTS: Any = ...
    EXPOSURE_READ_COMPONENTS: Any = ...
    COMPONENT_MAP: Any = ...
    def getComponent(self, composite: Any, componentName: Any): ...
    def getValidComponents(self, composite: Any): ...
    def disassemble(self, composite: Any): ...
    def assemble(self, components: Any): ...
    def handleParameters(self, inMemoryDataset: Any, parameters: Optional[Any] = ...): ...
    @classmethod
    def selectResponsibleComponent(cls: Any, readComponent: str, fromComponents: Any) -> str: ...
