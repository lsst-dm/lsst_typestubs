from ._fitsRawFormatterBase import FitsRawFormatterBase
from ._instrument import Instrument
from astro_metadata_translator import ObservationInfo
from dataclasses import InitVar
from lsst.daf.butler import Butler, DataCoordinate, DatasetRef, DimensionRecord, DimensionUniverse
from lsst.pex.config import Config
from lsst.pipe.base import Task
from multiprocessing import Pool
from typing import Any, Iterable, Iterator, List, Optional, Type

class RawFileDatasetInfo:
    dataId: DataCoordinate
    obsInfo: ObservationInfo
    def __init__(self, dataId: Any, obsInfo: Any) -> None: ...

class RawFileData:
    datasets: List[RawFileDatasetInfo]
    filename: str
    FormatterClass: Type[FitsRawFormatterBase]
    instrumentClass: Optional[Type[Instrument]]
    def __init__(self, datasets: Any, filename: Any, FormatterClass: Any, instrumentClass: Any) -> None: ...

class RawExposureData:
    dataId: DataCoordinate
    files: List[RawFileData]
    universe: InitVar[DimensionUniverse]
    record: Optional[DimensionRecord] = ...
    def __post_init__(self, universe: DimensionUniverse) -> Any: ...
    def __init__(self, dataId: Any, files: Any, universe: Any, record: Any) -> None: ...

def makeTransferChoiceField(doc: str = ..., default: str = ...): ...

class RawIngestConfig(Config):
    transfer: Any = ...

class RawIngestTask(Task):
    ConfigClass: Any = ...
    def getDatasetType(self): ...
    butler: Any = ...
    universe: Any = ...
    datasetType: Any = ...
    def __init__(self, config: Optional[RawIngestConfig]=..., butler: Butler, **kwargs: Any) -> None: ...
    def extractMetadata(self, filename: str) -> RawFileData: ...
    def groupByExposure(self, files: Iterable[RawFileData]) -> List[RawExposureData]: ...
    def expandDataIds(self, data: RawExposureData) -> RawExposureData: ...
    def prep(self, files: Any, *, pool: Optional[Pool]=..., processes: int=...) -> Iterator[RawExposureData]: ...
    def ingestExposureDatasets(self, exposure: RawExposureData, *, run: Optional[str]=...) -> List[DatasetRef]: ...
    def run(self, files: Any, *, pool: Optional[Pool]=..., processes: int=..., run: Optional[str]=...) -> Any: ...
