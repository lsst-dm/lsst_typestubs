import abc
from typing import Any, Optional

class IngestTestBase(metaclass=abc.ABCMeta):
    ingestDir: str = ...
    dataIds: Any = ...
    file: str = ...
    rawIngestTask: str = ...
    curatedCalibrationDatasetTypes: Any = ...
    defineVisitsTask: Any = ...
    visits: Any = ...
    @property
    @abc.abstractmethod
    def instrumentClassName(self) -> Any: ...
    @property
    def instrumentClass(self): ...
    @property
    def instrumentName(self): ...
    @classmethod
    def setUpClass(cls) -> None: ...
    outputRun: Any = ...
    def setUp(self) -> None: ...
    @classmethod
    def tearDownClass(cls) -> None: ...
    def verifyIngest(self, files: Optional[Any] = ..., cli: bool = ..., fullCheck: bool = ...) -> None: ...
    def checkRepo(self, files: Optional[Any] = ...) -> None: ...
    def testLink(self) -> None: ...
    def testSymLink(self) -> None: ...
    def testDirect(self) -> None: ...
    def testCopy(self) -> None: ...
    def testHardLink(self) -> None: ...
    def testInPlace(self) -> None: ...
    def testFailOnConflict(self) -> None: ...
    def testWriteCuratedCalibrations(self) -> None: ...
    def testDefineVisits(self) -> None: ...
