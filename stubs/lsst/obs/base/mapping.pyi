from typing import Any, Optional

class Mapping:
    datasetType: Any = ...
    registry: Any = ...
    rootStorage: Any = ...
    keyDict: Any = ...
    python: Any = ...
    persistable: Any = ...
    storage: Any = ...
    level: Any = ...
    tables: Any = ...
    range: Any = ...
    columns: Any = ...
    obsTimeName: Any = ...
    recipe: Any = ...
    def __init__(self, datasetType: Any, policy: Any, registry: Any, rootStorage: Any, provided: Optional[Any] = ...) -> None: ...
    @property
    def template(self): ...
    def keys(self): ...
    def map(self, mapper: Any, dataId: Any, write: bool = ...): ...
    def lookup(self, properties: Any, dataId: Any): ...
    def have(self, properties: Any, dataId: Any): ...
    def need(self, properties: Any, dataId: Any): ...

class ImageMapping(Mapping):
    columns: Any = ...
    def __init__(self, datasetType: Any, policy: Any, registry: Any, root: Any, **kwargs: Any) -> None: ...

class ExposureMapping(Mapping):
    columns: Any = ...
    def __init__(self, datasetType: Any, policy: Any, registry: Any, root: Any, **kwargs: Any) -> None: ...
    def standardize(self, mapper: Any, item: Any, dataId: Any): ...

class CalibrationMapping(Mapping):
    reference: Any = ...
    refCols: Any = ...
    refRegistry: Any = ...
    dataRoot: Any = ...
    range: Any = ...
    columns: Any = ...
    setFilter: Any = ...
    metadataKeys: Any = ...
    def __init__(self, datasetType: Any, policy: Any, registry: Any, calibRegistry: Any, calibRoot: Any, dataRoot: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def map(self, mapper: Any, dataId: Any, write: bool = ...): ...
    def lookup(self, properties: Any, dataId: Any): ...
    def standardize(self, mapper: Any, item: Any, dataId: Any): ...

class DatasetMapping(Mapping):
    storage: Any = ...
    def __init__(self, datasetType: Any, policy: Any, registry: Any, root: Any, **kwargs: Any) -> None: ...
