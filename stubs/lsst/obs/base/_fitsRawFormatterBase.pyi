from .formatters.fitsExposure import FitsExposureFormatter
from abc import ABCMeta, abstractmethod
from typing import Any, Optional

class FitsRawFormatterBase(FitsExposureFormatter, metaclass=ABCMeta):
    wcsFlipX: bool = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @classmethod
    def fromMetadata(cls, metadata: Any, obsInfo: Optional[Any] = ..., storageClass: Optional[Any] = ..., location: Optional[Any] = ...): ...
    @property
    @abstractmethod
    def translatorClass(self) -> Any: ...
    @property
    @abstractmethod
    def filterDefinitions(self) -> Any: ...
    def readImage(self): ...
    def readMask(self) -> None: ...
    def readVariance(self) -> None: ...
    def isOnSky(self): ...
    def stripMetadata(self) -> None: ...
    def makeVisitInfo(self): ...
    @abstractmethod
    def getDetector(self, id: Any) -> Any: ...
    def makeWcs(self, visitInfo: Any, detector: Any): ...
    @classmethod
    def makeRawSkyWcsFromBoresight(cls, boresight: Any, orientation: Any, detector: Any): ...
    def makeFilter(self): ...
    def readComponent(self, component: Any, parameters: Optional[Any] = ...): ...
    def readFull(self, parameters: Optional[Any] = ...): ...
    def readRawHeaderWcs(self, parameters: Optional[Any] = ...): ...
    def write(self, inMemoryDataset: Any) -> None: ...
    @property
    def observationInfo(self): ...
