from ._instrument import Instrument
from abc import ABCMeta, abstractmethod
from lsst.daf.butler import Butler, DataId, DimensionRecord
from lsst.pex.config import Config
from lsst.pipe.base import Task
from lsst.sphgeom import Region, UnitVector3d
from multiprocessing import Pool
from typing import Any, Dict, Iterable, List, Optional, Tuple

class VisitDefinitionData:
    instrument: str
    id: int
    name: str
    exposures: List[DimensionRecord] = ...
    def __init__(self, instrument: Any, id: Any, name: Any, exposures: Any) -> None: ...

class _VisitRecords:
    visit: DimensionRecord
    visit_definition: List[DimensionRecord]
    visit_detector_region: List[DimensionRecord]
    def __init__(self, visit: Any, visit_definition: Any, visit_detector_region: Any) -> None: ...

class GroupExposuresConfig(Config): ...

class GroupExposuresTask(Task, metaclass=ABCMeta):
    def __init__(self, config: GroupExposuresConfig, **kwargs: Any) -> None: ...
    ConfigClass: Any = ...
    registry: Any = ...
    @abstractmethod
    def group(self, exposures: List[DimensionRecord]) -> Iterable[VisitDefinitionData]: ...
    @abstractmethod
    def getVisitSystem(self) -> Tuple[int, str]: ...

class ComputeVisitRegionsConfig(Config):
    padding: Any = ...

class ComputeVisitRegionsTask(Task, metaclass=ABCMeta):
    butler: Any = ...
    instrumentMap: Any = ...
    def __init__(self, config: ComputeVisitRegionsConfig, butler: Butler, **kwargs: Any) -> None: ...
    ConfigClass: Any = ...
    registry: Any = ...
    def getInstrument(self, instrumentName: Any) -> Instrument: ...
    @abstractmethod
    def compute(self, visit: VisitDefinitionData, *, collections: Any=...) -> Tuple[Region, Dict[int, Region]]: ...

class DefineVisitsConfig(Config):
    groupExposures: Any = ...
    computeVisitRegions: Any = ...
    ignoreNonScienceExposures: Any = ...

class DefineVisitsTask(Task):
    butler: Any = ...
    universe: Any = ...
    def __init__(self, config: Optional[DefineVisitsConfig]=..., butler: Butler, **kwargs: Any) -> None: ...
    ConfigClass: Any = ...
    def run(self, dataIds: Iterable[DataId], *, pool: Optional[Pool]=..., processes: int=..., collections: Optional[str]=...) -> Any: ...

class _GroupExposuresOneToOneConfig(GroupExposuresConfig):
    visitSystemId: Any = ...
    visitSystemName: Any = ...

class _GroupExposuresOneToOneTask(GroupExposuresTask, metaclass=ABCMeta):
    ConfigClass: Any = ...
    def group(self, exposures: List[DimensionRecord]) -> Iterable[VisitDefinitionData]: ...
    def getVisitSystem(self) -> Tuple[int, str]: ...

class _GroupExposuresByGroupMetadataConfig(GroupExposuresConfig):
    visitSystemId: Any = ...
    visitSystemName: Any = ...

class _GroupExposuresByGroupMetadataTask(GroupExposuresTask, metaclass=ABCMeta):
    ConfigClass: Any = ...
    def group(self, exposures: List[DimensionRecord]) -> Iterable[VisitDefinitionData]: ...
    def getVisitSystem(self) -> Tuple[int, str]: ...

class _ComputeVisitRegionsFromSingleRawWcsConfig(ComputeVisitRegionsConfig):
    mergeExposures: Any = ...
    detectorId: Any = ...
    requireVersionedCamera: Any = ...

class _ComputeVisitRegionsFromSingleRawWcsTask(ComputeVisitRegionsTask):
    ConfigClass: Any = ...
    def computeExposureBounds(self, exposure: DimensionRecord, *, collections: Any=...) -> Dict[int, List[UnitVector3d]]: ...
    def compute(self, visit: VisitDefinitionData, *, collections: Any=...) -> Tuple[Region, Dict[int, Region]]: ...
