from ..mapping import Mapping as CameraMapperMapping
from .repoConverter import RepoConverter
from .repoWalker import RepoWalker
from .repoWalker.scanner import PathElementHandler
from lsst.daf.butler import DatasetRef, FileDataset, FormatterParameter, StorageClass
from lsst.skymap import BaseSkyMap
from typing import Any, Dict, Iterator, List, Optional, Tuple

class FoundSkyMap:
    name: str
    instance: BaseSkyMap
    coaddName: str
    ref: DatasetRef
    filename: str
    def __init__(self, name: Any, instance: Any, coaddName: Any, ref: Any, filename: Any) -> None: ...

class StandardRepoConverter(RepoConverter):
    butler2: Any = ...
    mapper: Any = ...
    def __init__(self, **kwds: Any) -> None: ...
    def isDatasetTypeSpecial(self, datasetTypeName: str) -> bool: ...
    def prep(self) -> None: ...
    def iterMappings(self) -> Iterator[Tuple[str, CameraMapperMapping]]: ...
    def findMatchingSkyMap(self, datasetTypeName: str) -> Tuple[Optional[BaseSkyMap], Optional[str]]: ...
    def makeRepoWalkerTarget(self, datasetTypeName: str, template: str, keys: Dict[str, type], storageClass: StorageClass, formatter: FormatterParameter=..., targetHandler: Optional[PathElementHandler]=...) -> RepoWalker.Target: ...
    def iterDatasets(self) -> Iterator[FileDataset]: ...
    def getRun(self, datasetTypeName: str, calibDate: Optional[str]=...) -> str: ...
    def getCollectionChain(self) -> List[str]: ...
