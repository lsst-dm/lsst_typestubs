import abc
from abc import ABC, abstractmethod
from lsst.daf.butler import DataCoordinate, DatasetType, FileDataset
from lsst.log import Log
from typing import Any, Callable, Iterator, List, Mapping, Optional, Tuple

class PathElementHandler(ABC, metaclass=abc.ABCMeta):
    lastDataId2: Any = ...
    def __init__(self) -> None: ...
    @abstractmethod
    def isForFiles(self) -> bool: ...
    @abstractmethod
    def __call__(self, path: str, name: str, datasets: Mapping[DatasetType, Mapping[Optional[str], List[FileDataset]]], predicate: Callable[[DataCoordinate], bool]) -> bool: ...
    @property
    @abstractmethod
    def rank(self) -> int: ...
    def translate(self, dataId2: dict, *, partial: bool=...) -> Tuple[Optional[DataCoordinate], Optional[str]]: ...
    def __lt__(self, other: PathElementHandler) -> Any: ...
    log: Log

class DirectoryScanner:
    log: Any = ...
    def __init__(self, log: Optional[Log]=...) -> None: ...
    def add(self, handler: PathElementHandler) -> Any: ...
    def __iter__(self) -> Iterator[PathElementHandler]: ...
    def scan(self, path: str, datasets: Mapping[DatasetType, Mapping[Optional[str], List[FileDataset]]], predicate: Callable[[DataCoordinate], bool]) -> Any: ...
