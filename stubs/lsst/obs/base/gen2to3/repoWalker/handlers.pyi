import abc
import re
from ..translators import Translator
from .parser import PathElementParser
from .scanner import PathElementHandler
from abc import abstractmethod
from lsst.daf.butler import DataCoordinate, DatasetType, FileDataset, FormatterParameter
from typing import Any, Callable, List, Mapping, Optional, Tuple

class IgnoreHandler(PathElementHandler):
    def __init__(self, pattern: re.Pattern, isForFiles: bool) -> None: ...
    def isForFiles(self) -> bool: ...
    @property
    def rank(self) -> int: ...
    def __call__(self, path: str, name: str, datasets: Mapping[DatasetType, Mapping[Optional[str], List[FileDataset]]], predicate: Callable[[DataCoordinate], bool]) -> bool: ...

class ParsedPathElementHandler(PathElementHandler, metaclass=abc.ABCMeta):
    def __init__(self, parser: PathElementParser) -> None: ...
    def __call__(self, path: str, name: str, datasets: Mapping[DatasetType, Mapping[Optional[str], List[FileDataset]]], predicate: Callable[[DataCoordinate], bool]) -> bool: ...
    @property
    def rank(self) -> int: ...
    @abstractmethod
    def handle(self, path: str, nextDataId2: dict, datasets: Mapping[DatasetType, Mapping[Optional[str], List[FileDataset]]], predicate: Callable[[DataCoordinate], bool]) -> Any: ...

class SkipHandler(ParsedPathElementHandler):
    def __init__(self, parser: PathElementParser, isForFiles: bool, message: Optional[str]) -> None: ...
    def isForFiles(self) -> bool: ...
    def handle(self, path: str, nextDataId2: dict, datasets: Mapping[DatasetType, Mapping[Optional[str], List[FileDataset]]], predicate: Callable[[DataCoordinate], bool]) -> Any: ...

class SubdirectoryHandler(ParsedPathElementHandler):
    scanner: Any = ...
    def __init__(self, parser: PathElementParser) -> None: ...
    def isForFiles(self) -> bool: ...
    def handle(self, path: str, nextDataId2: Any, datasets: Mapping[DatasetType, Mapping[Optional[str], List[FileDataset]]], predicate: Callable[[DataCoordinate], bool]) -> Any: ...
    def translate(self, dataId2: dict, *, partial: bool=...) -> Tuple[Optional[DataCoordinate], Optional[str]]: ...

class TargetFileHandler(ParsedPathElementHandler):
    def __init__(self, parser: PathElementParser, translator: Translator, datasetType: DatasetType, formatter: FormatterParameter=...) -> None: ...
    def isForFiles(self) -> bool: ...
    def handle(self, path: str, nextDataId2: Any, datasets: Mapping[DatasetType, Mapping[Optional[str], List[FileDataset]]], predicate: Callable[[DataCoordinate], bool]) -> Any: ...
    def translate(self, dataId2: dict, *, partial: bool=...) -> Tuple[Optional[DataCoordinate], Optional[str]]: ...

class MultiExtensionFileHandler(TargetFileHandler):
    def handle(self, path: str, nextDataId2: Any, datasets: Mapping[DatasetType, Mapping[Optional[str], List[FileDataset]]], predicate: Callable[[DataCoordinate], bool]) -> Any: ...
    def translate(self, dataId2: dict, *, partial: bool=...) -> Tuple[Optional[DataCoordinate], Optional[str]]: ...
