from abc import ABCMeta, abstractmethod
from lsst.log import Log
from lsst.skymap import BaseSkyMap
from typing import Any, Dict, FrozenSet, Iterable, List, Optional, Tuple

class KeyHandler(metaclass=ABCMeta):
    dimension: Any = ...
    def __init__(self, dimension: str) -> None: ...
    def translate(self, gen2id: dict, gen3id: dict, skyMap: Optional[BaseSkyMap], skyMapName: Optional[str], datasetTypeName: str) -> Any: ...
    @abstractmethod
    def extract(self, gen2id: dict, skyMap: Optional[BaseSkyMap], skyMapName: Optional[str], datasetTypeName: str) -> Any: ...

class ConstantKeyHandler(KeyHandler):
    value: Any = ...
    def __init__(self, dimension: str, value: Any) -> None: ...
    def extract(self, gen2id: dict, skyMap: Optional[BaseSkyMap], skyMapName: Optional[str], datasetTypeName: str) -> Any: ...

class CopyKeyHandler(KeyHandler):
    gen2key: Any = ...
    dtype: Any = ...
    def __init__(self, dimension: str, gen2key: Optional[str]=..., dtype: Optional[type]=...) -> None: ...
    def extract(self, gen2id: dict, skyMap: Optional[BaseSkyMap], skyMapName: Optional[str], datasetTypeName: str) -> Any: ...

class PatchKeyHandler(KeyHandler):
    def __init__(self) -> None: ...
    def extract(self, gen2id: dict, skyMap: Optional[BaseSkyMap], skyMapName: Optional[str], datasetTypeName: str) -> Any: ...

class SkyMapKeyHandler(KeyHandler):
    def __init__(self) -> None: ...
    def extract(self, gen2id: dict, skyMap: Optional[BaseSkyMap], skyMapName: Optional[str], datasetTypeName: str) -> Any: ...

class PhysicalFilterToBandKeyHandler(KeyHandler):
    def __init__(self, filterDefinitions: Any) -> None: ...
    def extract(self, gen2id: Any, *args: Any, **kwargs: Any): ...

class BandToPhysicalFilterKeyHandler(KeyHandler):
    def __init__(self, filterDefinitions: Any) -> None: ...
    def extract(self, gen2id: Any, *args: Any, **kwargs: Any): ...

class TranslatorFactory:
    log: Any = ...
    def __init__(self, log: Optional[Log]=...) -> None: ...
    def addRule(self, handler: KeyHandler, instrument: Optional[str]=..., datasetTypeName: Optional[str]=..., gen2keys: Iterable[str]=..., consume: bool=...) -> Any: ...
    def addGenericInstrumentRules(self, instrumentName: str, calibFilterType: str=..., detectorKey: str=..., exposureKey: str=...) -> Any: ...
    def makeMatching(self, datasetTypeName: str, gen2keys: Dict[str, type], instrument: Optional[str]=..., skyMap: Optional[BaseSkyMap]=..., skyMapName: Optional[str]=...) -> Any: ...

class Translator:
    handlers: Any = ...
    skyMap: Any = ...
    skyMapName: Any = ...
    datasetTypeName: Any = ...
    log: Any = ...
    def __init__(self, handlers: List[KeyHandler], skyMap: Optional[BaseSkyMap], skyMapName: Optional[str], datasetTypeName: str, log: Log) -> None: ...
    def __call__(self, gen2id: Dict[str, Any], *, partial: bool=...) -> Tuple[dict, Optional[str]]: ...
    @property
    def dimensionNames(self) -> FrozenSet[str]: ...
