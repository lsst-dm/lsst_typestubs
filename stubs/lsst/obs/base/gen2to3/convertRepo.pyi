from .._instrument import Instrument
from .repoConverter import ConversionSubset
from lsst.daf.butler import Butler as Butler3, SkyPixDimension
from lsst.pex.config import Config
from lsst.pipe.base import Task
from lsst.skymap import BaseSkyMap
from multiprocessing import Pool
from typing import Any, Iterable, List, Optional, Tuple

class ConfiguredSkyMap:
    name: str
    sha1: bytes
    instance: BaseSkyMap
    used: bool = ...
    def __init__(self, name: Any, sha1: Any, instance: Any, used: Any) -> None: ...

class Rerun:
    path: str
    runName: Optional[str]
    chainName: Optional[str]
    parents: List[str]
    def guessCollectionNames(self, instrument: Instrument, root: str) -> None: ...
    def __init__(self, path: Any, runName: Any, chainName: Any, parents: Any) -> None: ...

class CalibRepo:
    path: Optional[str]
    curated: bool = ...
    labels: Tuple[str, ...] = ...
    default: bool = ...
    def __post_init__(self) -> None: ...
    def __init__(self, path: Any, curated: Any, labels: Any, default: Any) -> None: ...

class ConvertRepoSkyMapConfig(Config):
    skyMap: Any = ...

class ConvertRepoConfig(Config):
    raws: Any = ...
    defineVisits: Any = ...
    skyMaps: Any = ...
    rootSkyMapName: Any = ...
    runs: Any = ...
    runsForced: Any = ...
    storageClasses: Any = ...
    formatterClasses: Any = ...
    targetHandlerClasses: Any = ...
    doRegisterInstrument: Any = ...
    refCats: Any = ...
    fileIgnorePatterns: Any = ...
    rawDatasetType: Any = ...
    datasetIncludePatterns: Any = ...
    datasetIgnorePatterns: Any = ...
    ccdKey: Any = ...
    relatedOnly: Any = ...
    doMakeUmbrellaCollection: Any = ...
    extraUmbrellaChildren: Any = ...
    @property
    def transfer(self): ...
    @transfer.setter
    def transfer(self, value: Any) -> None: ...
    def setDefaults(self) -> None: ...

class ConvertRepoTask(Task):
    ConfigClass: Any = ...
    butler3: Any = ...
    registry: Any = ...
    universe: Any = ...
    raws: Any = ...
    defineVisits: Any = ...
    instrument: Any = ...
    translatorFactory: Any = ...
    def __init__(self, config: Any=..., butler3: Butler3, instrument: Instrument, **kwargs: Any) -> None: ...
    def isDatasetTypeIncluded(self, datasetTypeName: str) -> Any: ...
    def useSkyMap(self, skyMap: BaseSkyMap, skyMapName: str) -> str: ...
    def registerUsedSkyMaps(self, subset: Optional[ConversionSubset]) -> Any: ...
    def useSkyPix(self, dimension: SkyPixDimension) -> Any: ...
    def registerUsedSkyPix(self, subset: Optional[ConversionSubset]) -> Any: ...
    def run(self, root: str, *, calibs: Optional[List[CalibRepo]]=..., reruns: Optional[List[Rerun]]=..., visits: Optional[Iterable[int]]=..., pool: Optional[Pool]=..., processes: int=...) -> Any: ...
