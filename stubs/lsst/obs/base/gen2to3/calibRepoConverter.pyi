from ..cameraMapper import CameraMapper
from ..mapping import Mapping as CameraMapperMapping
from .repoConverter import RepoConverter
from .repoWalker import RepoWalker
from .repoWalker.scanner import PathElementHandler
from lsst.daf.butler import FormatterParameter, StorageClass
from typing import Any, Dict, Iterator, Optional, Sequence, Tuple

class CalibRepoConverter(RepoConverter):
    mapper: Any = ...
    collection: Any = ...
    def __init__(self, mapper: CameraMapper, *, labels: Sequence[str]=..., **kwargs: Any) -> None: ...
    def isDatasetTypeSpecial(self, datasetTypeName: str) -> bool: ...
    def iterMappings(self) -> Iterator[Tuple[str, CameraMapperMapping]]: ...
    def makeRepoWalkerTarget(self, datasetTypeName: str, template: str, keys: Dict[str, type], storageClass: StorageClass, formatter: FormatterParameter=..., targetHandler: Optional[PathElementHandler]=...) -> RepoWalker.Target: ...
    def getRun(self, datasetTypeName: str, calibDate: Optional[str]=...) -> str: ...
