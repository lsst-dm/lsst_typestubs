from .standardRepoConverter import StandardRepoConverter
from lsst.daf.butler import FileDataset
from lsst.skymap import BaseSkyMap
from typing import Any, Iterator, List, Optional, Tuple

class RootRepoConverter(StandardRepoConverter):
    def __init__(self, **kwds: Any) -> None: ...
    def isDatasetTypeSpecial(self, datasetTypeName: str) -> bool: ...
    def getSpecialDirectories(self) -> List[str]: ...
    def findMatchingSkyMap(self, datasetTypeName: str) -> Tuple[Optional[BaseSkyMap], Optional[str]]: ...
    def runRawIngest(self, pool: Optional[Any] = ...) -> None: ...
    def runDefineVisits(self, pool: Optional[Any] = ...) -> None: ...
    def prep(self) -> None: ...
    def iterDatasets(self) -> Iterator[FileDataset]: ...
    def getRun(self, datasetTypeName: str, calibDate: Optional[str]=...) -> str: ...
