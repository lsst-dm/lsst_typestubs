import abc
from .._instrument import Instrument
from ..mapping import Mapping as CameraMapperMapping
from .convertRepo import ConvertRepoTask
from .repoWalker import RepoWalker
from .scanner import PathElementHandler
from abc import ABC, abstractmethod
from lsst.daf.butler import DataCoordinate, FileDataset, FormatterParameter, Registry, SkyPixDimension, StorageClass
from typing import Any, Dict, Iterator, List, Optional, Set, Tuple

class ConversionSubset:
    instrument: Any = ...
    visits: Any = ...
    regions: Any = ...
    tracts: Any = ...
    skypix: Any = ...
    def __init__(self, instrument: str, visits: Set[int]) -> None: ...
    def addSkyMap(self, registry: Registry, name: str) -> Any: ...
    def addSkyPix(self, registry: Registry, dimension: SkyPixDimension) -> Any: ...
    def isRelated(self, dataId: DataCoordinate) -> bool: ...

class RepoConverter(ABC, metaclass=abc.ABCMeta):
    task: Any = ...
    root: Any = ...
    instrument: Any = ...
    subset: Any = ...
    def __init__(self, task: ConvertRepoTask, root: str, instrument: Instrument, run: Optional[str], *, subset: Optional[ConversionSubset]=...): ...
    @abstractmethod
    def isDatasetTypeSpecial(self, datasetTypeName: str) -> bool: ...
    @abstractmethod
    def iterMappings(self) -> Iterator[Tuple[str, CameraMapperMapping]]: ...
    @abstractmethod
    def makeRepoWalkerTarget(self, datasetTypeName: str, template: str, keys: Dict[str, type], storageClass: StorageClass, formatter: FormatterParameter=..., targetHandler: Optional[PathElementHandler]=...) -> RepoWalker.Target: ...
    def getSpecialDirectories(self) -> List[str]: ...
    def prep(self) -> None: ...
    def iterDatasets(self) -> Iterator[FileDataset]: ...
    def findDatasets(self) -> None: ...
    def expandDataIds(self): ...
    def ingest(self) -> None: ...
    def finish(self) -> None: ...
    def getRun(self, datasetTypeName: str, calibDate: Optional[str]=...) -> str: ...
