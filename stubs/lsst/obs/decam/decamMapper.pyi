from lsst.obs.base import CameraMapper
from typing import Any, Optional

class DecamMapper(CameraMapper):
    packageName: str = ...
    MakeRawVisitInfoClass: Any = ...
    detectorNames: Any = ...
    def __init__(self, inputPolicy: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def bypass_ccdExposureId(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_ccdExposureId_bits(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_deepCoaddId(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_deepCoaddId_bits(self, *args: Any, **kwargs: Any): ...
    def bypass_deepMergedCoaddId(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_deepMergedCoaddId_bits(self, *args: Any, **kwargs: Any): ...
    def bypass_dcrCoaddId(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_dcrCoaddId_bits(self, *args: Any, **kwargs: Any): ...
    def bypass_dcrMergedCoaddId(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_dcrMergedCoaddId_bits(self, *args: Any, **kwargs: Any): ...
    def translate_dqmask(self, dqmask: Any): ...
    def translate_wtmap(self, wtmap: Any): ...
    def bypass_instcal(self, datasetType: Any, pythonType: Any, butlerLocation: Any, dataId: Any): ...
    def std_raw(self, item: Any, dataId: Any): ...
    def std_dark(self, item: Any, dataId: Any): ...
    def std_bias(self, item: Any, dataId: Any): ...
    def std_flat(self, item: Any, dataId: Any): ...
    def std_illumcor(self, item: Any, dataId: Any): ...
    def std_cpBias(self, item: Any, dataId: Any): ...
    def std_cpFlat(self, item: Any, dataId: Any): ...
    def std_fringe(self, item: Any, dataId: Any): ...
    def std_cpIllumcor(self, item: Any, dataId: Any): ...
    @classmethod
    def getLinearizerDir(cls): ...
    def map_linearizer(self, dataId: Any, write: bool = ...): ...
    @classmethod
    def getCrosstalkDir(cls): ...
