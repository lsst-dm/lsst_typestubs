import lsst.afw.display as pexConfig
from lsst.ip.isr.crosstalk import CrosstalkTask as CrosstalkTask
from typing import Any, Optional

class CrosstalkCoeffsConfig(pexConfig.Config):
    values: Any = ...
    shape: Any = ...
    def getCoeffs(self): ...

class SubaruCrosstalkConfig(CrosstalkTask.ConfigClass):
    minPixelToMask: Any = ...
    crosstalkMaskPlane: Any = ...
    coeffs: Any = ...

class SubaruCrosstalkTask(CrosstalkTask):
    ConfigClass: Any = ...
    def run(self, exp: Any, **kwargs: Any) -> None: ...

nAmp: int

def getXPos(width: Any, hwidth: Any, x: Any): ...
def getAmplitudeRatios(mi: Any, threshold: int = ..., bkgd: Optional[Any] = ..., rats: Optional[Any] = ...): ...
def calculateCoeffs(rats: Any, nsigma: Any, plot: bool = ..., fig: Optional[Any] = ..., title: Optional[Any] = ...): ...
def subtractXTalk(mi: Any, coeffs: Any, minPixelToMask: int = ..., crosstalkStr: str = ...) -> None: ...
def printCoeffs(coeffs: Any, coeffsErr: Optional[Any] = ..., LaTeX: bool = ..., ppm: bool = ...) -> None: ...

xTalkAmplitudes: Any

def addTrail(mi: Any, val: Any, x0: Any, y0: Any, pix: Any, addCrosstalk: bool = ...): ...
def addSaturated(mi: Any, addCrosstalk: bool = ...) -> None: ...
def makeImage(width: int = ..., height: int = ...): ...
def readImage(butler: Any, **kwargs: Any): ...
def makeList(x: Any): ...
def estimateCoeffs(butler: Any, visitList: Any, ccdList: Any, threshold: int = ..., nSample: int = ..., plot: bool = ..., fig: Optional[Any] = ..., title: Optional[Any] = ...): ...
def main(butler: Any, visit: int = ..., ccd: Optional[Any] = ..., threshold: int = ..., nSample: int = ..., showCoeffs: bool = ..., fixXTalk: bool = ..., plot: bool = ..., title: Optional[Any] = ...): ...

mpFigures: Any

def makeSubplots(figure: Any, nx: int = ..., ny: int = ...) -> None: ...
def getMpFigure(fig: Optional[Any] = ..., clear: bool = ...): ...
def fixCcd(butler: Any, visit: Any, ccd: Any, coeffs: Any, display: bool = ...) -> None: ...
