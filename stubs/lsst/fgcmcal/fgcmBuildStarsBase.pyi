import abc
import lsst.geom as pexConfig
import lsst.geom as pipeBase
from typing import Any, Optional

class FgcmBuildStarsConfigBase(pexConfig.Config):
    instFluxField: Any = ...
    minPerBand: Any = ...
    matchRadius: Any = ...
    isolationRadius: Any = ...
    densityCutNside: Any = ...
    densityCutMaxPerPixel: Any = ...
    matchNside: Any = ...
    coarseNside: Any = ...
    filterMap: Any = ...
    requiredBands: Any = ...
    primaryBands: Any = ...
    visitDataRefName: Any = ...
    ccdDataRefName: Any = ...
    doApplyWcsJacobian: Any = ...
    psfCandidateName: Any = ...
    doSubtractLocalBackground: Any = ...
    localBackgroundFluxField: Any = ...
    sourceSelector: Any = ...
    apertureInnerInstFluxField: Any = ...
    apertureOuterInstFluxField: Any = ...
    doReferenceMatches: Any = ...
    fgcmLoadReferenceCatalog: Any = ...
    nVisitsPerCheckpoint: Any = ...
    def setDefaults(self) -> None: ...

class FgcmBuildStarsRunner(pipeBase.ButlerInitializedTaskRunner):
    @staticmethod
    def getTargetList(parsedCmd: Any): ...
    def __call__(self, args: Any): ...
    def run(self, parsedCmd: Any): ...

class FgcmBuildStarsBaseTask(pipeBase.CmdLineTask, abc.ABC, metaclass=abc.ABCMeta):
    def __init__(self, butler: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def runDataRef(self, butler: Any, dataRefs: Any) -> None: ...
    @abc.abstractmethod
    def findAndGroupDataRefs(self, butler: Any, dataRefs: Any) -> Any: ...
    @abc.abstractmethod
    def fgcmMakeAllStarObservations(self, groupedDataRefs: Any, visitCat: Any, calibFluxApertureRadius: Optional[Any] = ..., visitCatDataRef: Optional[Any] = ..., starObsDataRef: Optional[Any] = ..., inStarObsCat: Optional[Any] = ...) -> Any: ...
    def fgcmMakeVisitCatalog(self, camera: Any, groupedDataRefs: Any, visitCatDataRef: Optional[Any] = ..., inVisitCat: Optional[Any] = ...): ...
    def fgcmMatchStars(self, butler: Any, visitCat: Any, obsCat: Any): ...
