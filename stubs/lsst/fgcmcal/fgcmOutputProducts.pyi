import lsst.afw.table as pexConfig
import lsst.afw.table as pipeBase
from typing import Any, Optional

class FgcmOutputProductsConfig(pexConfig.Config):
    cycleNumber: Any = ...
    doReferenceCalibration: Any = ...
    doRefcatOutput: Any = ...
    doAtmosphereOutput: Any = ...
    doZeropointOutput: Any = ...
    doComposeWcsJacobian: Any = ...
    doApplyMeanChromaticCorrection: Any = ...
    refObjLoader: Any = ...
    photoCal: Any = ...
    referencePixelizationNside: Any = ...
    referencePixelizationMinStars: Any = ...
    referenceMinMatch: Any = ...
    referencePixelizationNPixels: Any = ...
    datasetConfig: Any = ...
    def setDefaults(self) -> None: ...

class FgcmOutputProductsRunner(pipeBase.ButlerInitializedTaskRunner):
    @staticmethod
    def getTargetList(parsedCmd: Any): ...
    def __call__(self, butler: Any): ...
    def run(self, parsedCmd: Any): ...

class FgcmOutputProductsTask(pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    RunnerClass: Any = ...
    indexer: Any = ...
    def __init__(self, butler: Optional[Any] = ..., **kwargs: Any) -> None: ...
    visitDataRefName: Any = ...
    ccdDataRefName: Any = ...
    filterMap: Any = ...
    configBands: Any = ...
    bands: Any = ...
    def runDataRef(self, butler: Any): ...
    def generateTractOutputProducts(self, butler: Any, tract: Any, visitCat: Any, zptCat: Any, atmCat: Any, stdCat: Any, fgcmBuildStarsConfig: Any, fgcmFitCycleConfig: Any): ...
