from typing import Any, Optional

def continueClass(cls): ...
def inClass(cls, name: Optional[Any] = ...): ...

class TemplateMeta(type):
    def __new__(cls, name: Any, bases: Any, attrs: Any): ...
    def __call__(cls, *args: Any, **kwds: Any): ...
    def __subclasscheck__(cls, subclass: Any): ...
    def __instancecheck__(cls, instance: Any): ...
    def __subclasses__(cls): ...
    def register(cls, key: Any, subclass: Any) -> None: ...
    def alias(cls, key: Any, subclass: Any) -> None: ...
    def __getitem__(cls, key: Any): ...
    def __iter__(cls) -> Any: ...
    def __len__(cls): ...
    def __contains__(cls, key: Any): ...
    def keys(cls): ...
    def values(cls): ...
    def items(cls): ...
    def get(cls, key: Any, default: Optional[Any] = ...): ...
