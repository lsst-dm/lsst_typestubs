import unittest
from typing import Any, Optional

def init() -> None: ...

class MemoryTestCase(unittest.TestCase):
    @classmethod
    def tearDownClass(cls) -> None: ...
    def testFileDescriptorLeaks(self) -> None: ...

class ExecutablesTestCase(unittest.TestCase):
    TESTS_DISCOVERED: int = ...
    @classmethod
    def setUpClass(cls) -> None: ...
    def testSanity(self) -> None: ...
    def assertExecutable(self, executable: Any, root_dir: Optional[Any] = ..., args: Optional[Any] = ..., msg: Optional[Any] = ...) -> None: ...
    @classmethod
    def create_executable_tests(cls, ref_file: Any, executables: Optional[Any] = ...) -> None: ...

def getTempFilePath(ext: Any, expectOutput: bool = ...) -> None: ...

class TestCase(unittest.TestCase): ...

def debugger(*exceptions: Any): ...
def assertFloatsAlmostEqual(testCase: Any, lhs: Any, rhs: Any, rtol: Any = ..., atol: Any = ..., relTo: Optional[Any] = ..., printFailures: bool = ..., plotOnFailure: bool = ..., plotFileName: Optional[Any] = ..., invert: bool = ..., msg: Optional[Any] = ...) -> None: ...
def assertFloatsNotEqual(testCase: Any, lhs: Any, rhs: Any, **kwds: Any): ...
def assertFloatsEqual(testCase: Any, lhs: Any, rhs: Any, **kwargs: Any): ...
def classParameters(**settings: Any): ...
def methodParameters(**settings: Any): ...
