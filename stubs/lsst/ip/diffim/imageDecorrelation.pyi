import lsst.pipe.base as pexConfig
import lsst.pipe.base as pipeBase
from .imageMapReduce import ImageMapReduceConfig, ImageMapper
from typing import Any, Optional

class DecorrelateALKernelConfig(pexConfig.Config):
    ignoreMaskPlanes: Any = ...

class DecorrelateALKernelTask(pipeBase.Task):
    ConfigClass: Any = ...
    statsControl: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def computeVarianceMean(self, exposure: Any): ...
    def run(self, exposure: Any, templateExposure: Any, subtractedExposure: Any, psfMatchingKernel: Any, preConvKernel: Optional[Any] = ..., xcen: Optional[Any] = ..., ycen: Optional[Any] = ..., svar: Optional[Any] = ..., tvar: Optional[Any] = ...): ...
    freqSpaceShape: Any = ...
    def computeCommonShape(self, *shapes: Any) -> None: ...
    @staticmethod
    def padCenterOriginArray(A: Any, newShape: tuple, useInverse: Any=...) -> Any: ...
    def computeCorrection(self, kappa: Any, svar: Any, tvar: Any, preConvArr: Optional[Any] = ...): ...
    def computeCorrectedDiffimPsf(self, corrft: Any, psfOld: Any): ...
    def computeCorrectedImage(self, corrft: Any, imgOld: Any): ...

class DecorrelateALKernelMapper(DecorrelateALKernelTask, ImageMapper):
    ConfigClass: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def run(self, subExposure: Any, expandedSubExposure: Any, fullBBox: Any, template: Any, science: Any, alTaskResult: Optional[Any] = ..., psfMatchingKernel: Optional[Any] = ..., preConvKernel: Optional[Any] = ..., **kwargs: Any): ...

class DecorrelateALKernelMapReduceConfig(ImageMapReduceConfig):
    mapper: Any = ...

class DecorrelateALKernelSpatialConfig(pexConfig.Config):
    decorrelateConfig: Any = ...
    decorrelateMapReduceConfig: Any = ...
    ignoreMaskPlanes: Any = ...
    def setDefaults(self) -> None: ...

class DecorrelateALKernelSpatialTask(pipeBase.Task):
    ConfigClass: Any = ...
    statsControl: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def computeVarianceMean(self, exposure: Any): ...
    def run(self, scienceExposure: Any, templateExposure: Any, subtractedExposure: Any, psfMatchingKernel: Any, spatiallyVarying: bool = ..., preConvKernel: Optional[Any] = ...): ...
