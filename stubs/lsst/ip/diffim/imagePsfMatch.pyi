import lsst.afw.display as pexConfig
from .psfMatch import PsfMatchTask
from typing import Any, Optional

class ImagePsfMatchConfig(pexConfig.Config):
    kernel: Any = ...
    selectDetection: Any = ...
    selectMeasurement: Any = ...
    def setDefaults(self) -> None: ...

class ImagePsfMatchTask(PsfMatchTask):
    ConfigClass: Any = ...
    kConfig: Any = ...
    background: Any = ...
    selectSchema: Any = ...
    selectAlgMetadata: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def getFwhmPix(self, psf: Any): ...
    def matchExposures(self, templateExposure: Any, scienceExposure: Any, templateFwhmPix: Optional[Any] = ..., scienceFwhmPix: Optional[Any] = ..., candidateList: Optional[Any] = ..., doWarping: bool = ..., convolveTemplate: bool = ...): ...
    def matchMaskedImages(self, templateMaskedImage: Any, scienceMaskedImage: Any, candidateList: Any, templateFwhmPix: Optional[Any] = ..., scienceFwhmPix: Optional[Any] = ...): ...
    def subtractExposures(self, templateExposure: Any, scienceExposure: Any, templateFwhmPix: Optional[Any] = ..., scienceFwhmPix: Optional[Any] = ..., candidateList: Optional[Any] = ..., doWarping: bool = ..., convolveTemplate: bool = ...): ...
    def subtractMaskedImages(self, templateMaskedImage: Any, scienceMaskedImage: Any, candidateList: Any, templateFwhmPix: Optional[Any] = ..., scienceFwhmPix: Optional[Any] = ...): ...
    def getSelectSources(self, exposure: Any, sigma: Optional[Any] = ..., doSmooth: bool = ..., idFactory: Optional[Any] = ...): ...
    def makeCandidateList(self, templateExposure: Any, scienceExposure: Any, kernelSize: Any, candidateList: Optional[Any] = ...): ...

subtractAlgorithmRegistry: Any
