import abc
import lsst.pipe.base as pexConfig
import lsst.pipe.base as pipeBase
from typing import Any

class ImageMapperConfig(pexConfig.Config): ...

class ImageMapper(pipeBase.Task, metaclass=abc.ABCMeta):
    ConfigClass: Any = ...
    @abc.abstractmethod
    def run(self, subExposure: Any, expandedSubExposure: Any, fullBBox: Any, **kwargs: Any) -> Any: ...

class ImageReducerConfig(pexConfig.Config):
    reduceOperation: Any = ...
    badMaskPlanes: Any = ...

class ImageReducer(pipeBase.Task):
    ConfigClass: Any = ...
    def run(self, mapperResults: Any, exposure: Any, **kwargs: Any): ...

class ImageMapReduceConfig(pexConfig.Config):
    mapper: Any = ...
    reducer: Any = ...
    cellCentroidsX: Any = ...
    cellCentroidsY: Any = ...
    cellSizeX: Any = ...
    cellSizeY: Any = ...
    gridStepX: Any = ...
    gridStepY: Any = ...
    borderSizeX: Any = ...
    borderSizeY: Any = ...
    adjustGridOption: Any = ...
    scaleByFwhm: Any = ...
    returnSubImages: Any = ...
    ignoreMaskPlanes: Any = ...

class ImageMapReduceTask(pipeBase.Task):
    ConfigClass: Any = ...
    boxes0: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def run(self, exposure: Any, **kwargs: Any): ...
    def plotBoxes(self, fullBBox: Any, skip: int = ...) -> None: ...
