from lsst.meas.base import SingleFrameMeasurementConfig, SingleFrameMeasurementTask, SingleFramePlugin, SingleFramePluginConfig
from typing import Any, Optional

class ClassificationDipoleConfig(SingleFramePluginConfig):
    minSn: Any = ...
    maxFluxRatio: Any = ...

class ClassificationDipolePlugin(SingleFramePlugin):
    ConfigClass: Any = ...
    @classmethod
    def getExecutionOrder(cls): ...
    dipoleAnalysis: Any = ...
    keyProbability: Any = ...
    keyFlag: Any = ...
    def __init__(self, config: Any, name: Any, schema: Any, metadata: Any) -> None: ...
    def measure(self, measRecord: Any, exposure: Any) -> None: ...
    def fail(self, measRecord: Any, error: Optional[Any] = ...) -> None: ...

class DipoleMeasurementConfig(SingleFrameMeasurementConfig):
    plugins: Any = ...
    doReplaceWithNoise: bool = ...
    def setDefaults(self) -> None: ...

class DipoleMeasurementTask(SingleFrameMeasurementTask):
    ConfigClass: Any = ...

class SourceFlagChecker:
    badFlags: Any = ...
    keys: Any = ...
    def __init__(self, sources: Any, badFlags: Optional[Any] = ...) -> None: ...
    def __call__(self, source: Any): ...

class DipoleAnalysis:
    def __init__(self) -> None: ...
    def __call__(self, source: Any): ...
    def getSn(self, source: Any): ...
    def getCentroid(self, source: Any): ...
    def getOrientation(self, source: Any): ...
    def displayDipoles(self, exposure: Any, sources: Any) -> None: ...

class DipoleDeblender:
    psfChisqCut1: Any = ...
    log: Any = ...
    sigma2fwhm: Any = ...
    def __init__(self) -> None: ...
    def __call__(self, source: Any, exposure: Any): ...
