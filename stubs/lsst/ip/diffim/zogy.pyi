import lsst.pex.config as pexConfig
import lsst.pex.config as pipeBase
from .imagePsfMatch import ImagePsfMatchConfig, ImagePsfMatchTask
from typing import Any, Optional

class ZogyConfig(pexConfig.Config):
    templateFluxScaling: Any = ...
    scienceFluxScaling: Any = ...
    scaleByCalibration: Any = ...
    correctBackground: Any = ...
    ignoreMaskPlanes: Any = ...
    maxPsfCentroidDist: Any = ...

class ZogyTask(pipeBase.Task):
    ConfigClass: Any = ...
    @staticmethod
    def padCenterOriginArray(A: Any, newShape: Any, useInverse: bool = ..., dtype: Optional[Any] = ...): ...
    freqSpaceShape: Any = ...
    def computeCommonShape(self, *shapes: Any) -> None: ...
    def padAndFftImage(self, imgArr: Any): ...
    def inverseFftAndCropImage(self, imgArr: Any, origSize: Any, filtInf: Optional[Any] = ..., filtNaN: Optional[Any] = ..., dtype: Optional[Any] = ...): ...
    @staticmethod
    def computePsfAtCenter(exposure: Any): ...
    @staticmethod
    def subtractImageMean(image: Any, mask: Any, statsControl: Any) -> None: ...
    statsControl: Any = ...
    F1: float = ...
    F2: float = ...
    psfShape1: Any = ...
    psfShape2: Any = ...
    imgShape: Any = ...
    fullExp1: Any = ...
    fullExp2: Any = ...
    fftFullIm1: Any = ...
    fftVarPl1: Any = ...
    fftFullIm2: Any = ...
    fftVarPl2: Any = ...
    def prepareFullExposure(self, exposure1: Any, exposure2: Any, correctBackground: bool = ...) -> None: ...
    subExpPsf1: Any = ...
    subExpPsf2: Any = ...
    subExpVar1: Any = ...
    subExpVar2: Any = ...
    psfFft1: Any = ...
    psfFft2: Any = ...
    subExposure1: Any = ...
    subExposure2: Any = ...
    def prepareSubExposure(self, bbox1: Optional[Any] = ..., bbox2: Optional[Any] = ..., psf1: Optional[Any] = ..., psf2: Optional[Any] = ..., sig1: Optional[Any] = ..., sig2: Optional[Any] = ...) -> None: ...
    @staticmethod
    def pixelSpaceSquare(D: Any): ...
    @staticmethod
    def getCentroid(A: Any): ...
    def checkCentroids(self, psfArr1: Any, psfArr2: Any) -> None: ...
    def calculateFourierDiffim(self, psf1: Any, im1: Any, varPlane1: Any, F1: Any, varMean1: Any, psf2: Any, im2: Any, varPlane2: Any, F2: Any, varMean2: Any, calculateScore: bool = ...): ...
    @staticmethod
    def calculateMaskPlane(mask1: Any, mask2: Any, effPsf1: Optional[Any] = ..., effPsf2: Optional[Any] = ...): ...
    @staticmethod
    def makeKernelPsfFromArray(A: Any): ...
    def makeDiffimSubExposure(self, ftDiff: Any): ...
    def run(self, exposure1: Any, exposure2: Any, calculateScore: bool = ...): ...

class ZogyImagePsfMatchConfig(ImagePsfMatchConfig):
    zogyConfig: Any = ...

class ZogyImagePsfMatchTask(ImagePsfMatchTask):
    ConfigClass: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def run(self, scienceExposure: Any, templateExposure: Any, doWarping: bool = ..., spatiallyVarying: bool = ...): ...
    def subtractExposures(self, templateExposure: Any, scienceExposure: Any, doWarping: bool = ..., spatiallyVarying: bool = ..., inImageSpace: bool = ..., doPreConvolve: bool = ...) -> None: ...
    def subtractMaskedImages(self, templateExposure: Any, scienceExposure: Any, doWarping: bool = ..., spatiallyVarying: bool = ..., inImageSpace: bool = ..., doPreConvolve: bool = ...) -> None: ...
