import lsst.pex.config as measBase
from typing import Any, Optional

class DipoleFitPluginConfig(measBase.SingleFramePluginConfig):
    fitAllDiaSources: Any = ...
    maxSeparation: Any = ...
    relWeight: Any = ...
    tolerance: Any = ...
    fitBackground: Any = ...
    fitSeparateNegParams: Any = ...
    minSn: Any = ...
    maxFluxRatio: Any = ...
    maxChi2DoF: Any = ...

class DipoleFitTaskConfig(measBase.SingleFrameMeasurementConfig):
    doReplaceWithNoise: bool = ...
    def setDefaults(self) -> None: ...

class DipoleFitTask(measBase.SingleFrameMeasurementTask):
    ConfigClass: Any = ...
    dipoleFitter: Any = ...
    def __init__(self, schema: Any, algMetadata: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def run(self, sources: Any, exposure: Any, posExp: Optional[Any] = ..., negExp: Optional[Any] = ..., **kwargs: Any) -> None: ...

class DipoleModel:
    debug: Any = ...
    log: Any = ...
    def __init__(self) -> None: ...
    def makeBackgroundModel(self, in_x: Any, pars: Optional[Any] = ...): ...
    def fitFootprintBackground(self, source: Any, posImage: Any, order: int = ...): ...
    def makeStarModel(self, bbox: Any, psf: Any, xcen: Any, ycen: Any, flux: Any): ...
    def makeModel(self, x: Any, flux: Any, xcenPos: Any, ycenPos: Any, xcenNeg: Any, ycenNeg: Any, fluxNeg: Optional[Any] = ..., b: Optional[Any] = ..., x1: Optional[Any] = ..., y1: Optional[Any] = ..., xy: Optional[Any] = ..., x2: Optional[Any] = ..., y2: Optional[Any] = ..., bNeg: Optional[Any] = ..., x1Neg: Optional[Any] = ..., y1Neg: Optional[Any] = ..., xyNeg: Optional[Any] = ..., x2Neg: Optional[Any] = ..., y2Neg: Optional[Any] = ..., **kwargs: Any): ...

class DipoleFitAlgorithm:
    diffim: Any = ...
    posImage: Any = ...
    negImage: Any = ...
    psfSigma: Any = ...
    log: Any = ...
    debug: Any = ...
    def __init__(self, diffim: Any, posImage: Optional[Any] = ..., negImage: Optional[Any] = ...) -> None: ...
    def fitDipoleImpl(self, source: Any, tol: float = ..., rel_weight: float = ..., fitBackground: int = ..., bgGradientOrder: int = ..., maxSepInSigma: float = ..., separateNegParams: bool = ..., verbose: bool = ...): ...
    def fitDipole(self, source: Any, tol: float = ..., rel_weight: float = ..., fitBackground: int = ..., maxSepInSigma: float = ..., separateNegParams: bool = ..., bgGradientOrder: int = ..., verbose: bool = ..., display: bool = ...): ...
    def displayFitResults(self, footprint: Any, result: Any): ...

class DipoleFitPlugin(measBase.SingleFramePlugin):
    ConfigClass: Any = ...
    DipoleFitAlgorithmClass: Any = ...
    FAILURE_EDGE: int = ...
    FAILURE_FIT: int = ...
    FAILURE_NOT_DIPOLE: int = ...
    @classmethod
    def getExecutionOrder(cls): ...
    log: Any = ...
    def __init__(self, config: Any, name: Any, schema: Any, metadata: Any) -> None: ...
    def measure(self, measRecord: Any, exposure: Any, posExp: Optional[Any] = ..., negExp: Optional[Any] = ...): ...
    def doClassify(self, measRecord: Any, chi2val: Any) -> None: ...
    def fail(self, measRecord: Any, error: Optional[Any] = ...) -> None: ...
