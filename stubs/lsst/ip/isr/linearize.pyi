import abc
from .calibType import IsrCalib
from typing import Any, Optional

class Linearizer(IsrCalib):
    hasLinearity: bool = ...
    override: bool = ...
    ampNames: Any = ...
    linearityCoeffs: Any = ...
    linearityType: Any = ...
    linearityBBox: Any = ...
    fitParams: Any = ...
    fitParamsErr: Any = ...
    fitChiSq: Any = ...
    tableData: Any = ...
    def __init__(self, table: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def updateMetadata(self, setDate: bool = ..., **kwargs: Any) -> None: ...
    def fromDetector(self, detector: Any): ...
    @classmethod
    def fromDict(cls, dictionary: Any): ...
    def toDict(self): ...
    @classmethod
    def fromTable(cls, tableList: Any): ...
    def toTable(self): ...
    def getLinearityTypeByName(self, linearityTypeName: Any): ...
    def validate(self, detector: Optional[Any] = ..., amplifier: Optional[Any] = ...) -> None: ...
    def applyLinearity(self, image: Any, detector: Optional[Any] = ..., log: Optional[Any] = ...): ...

class LinearizeBase(metaclass=abc.ABCMeta):
    LinearityType: Any = ...
    @abc.abstractmethod
    def __call__(self, image: Any, **kwargs: Any) -> Any: ...

class LinearizeLookupTable(LinearizeBase):
    LinearityType: str = ...
    def __call__(self, image: Any, **kwargs: Any): ...

class LinearizePolynomial(LinearizeBase):
    LinearityType: str = ...
    def __call__(self, image: Any, **kwargs: Any): ...

class LinearizeSquared(LinearizeBase):
    LinearityType: str = ...
    def __call__(self, image: Any, **kwargs: Any): ...

class LinearizeSpline(LinearizeBase):
    LinearityType: str = ...
    def __call__(self, image: Any, **kwargs: Any): ...

class LinearizeProportional(LinearizeBase):
    LinearityType: str = ...
    def __call__(self, image: Any, **kwargs: Any): ...

class LinearizeNone(LinearizeBase):
    LinearityType: str = ...
    def __call__(self, image: Any, **kwargs: Any): ...
