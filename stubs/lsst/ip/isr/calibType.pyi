import abc
from typing import Any, Optional

class IsrCalib(abc.ABC):
    log: Any = ...
    def __init__(self, camera: Optional[Any] = ..., detector: Optional[Any] = ..., log: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    @property
    def requiredAttributes(self): ...
    @requiredAttributes.setter
    def requiredAttributes(self, value: Any) -> None: ...
    def getMetadata(self): ...
    def setMetadata(self, metadata: Any) -> None: ...
    def updateMetadata(self, camera: Optional[Any] = ..., detector: Optional[Any] = ..., filterName: Optional[Any] = ..., setCalibId: bool = ..., setCalibInfo: bool = ..., setDate: bool = ..., **kwargs: Any) -> None: ...
    def calibInfoFromDict(self, dictionary: Any): ...
    @classmethod
    def readText(cls, filename: Any, **kwargs: Any): ...
    def writeText(self, filename: Any, format: str = ...): ...
    @classmethod
    def readFits(cls, filename: Any, **kwargs: Any): ...
    def writeFits(self, filename: Any): ...
    def fromDetector(self, detector: Any) -> None: ...
    @classmethod
    def fromDict(cls, dictionary: Any, **kwargs: Any) -> None: ...
    def toDict(self) -> None: ...
    @classmethod
    def fromTable(cls, tableList: Any, **kwargs: Any) -> None: ...
    def toTable(self) -> None: ...
    def validate(self, other: Optional[Any] = ...): ...
    def apply(self, target: Any) -> None: ...

class IsrProvenance(IsrCalib):
    calibType: Any = ...
    dimensions: Any = ...
    dataIdList: Any = ...
    def __init__(self, calibType: str = ..., **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def updateMetadata(self, setDate: bool = ..., **kwargs: Any) -> None: ...
    def fromDataIds(self, dataIdList: Any) -> None: ...
    @classmethod
    def fromTable(cls, tableList: Any): ...
    @classmethod
    def fromDict(cls, dictionary: Any): ...
    def toDict(self): ...
    def toTable(self): ...
