from .calibType import IsrCalib
from typing import Any, Optional

class Defects(IsrCalib):
    def __init__(self, defectList: Optional[Any] = ..., metadata: Optional[Any] = ..., *, normalize_on_init: bool = ..., **kwargs: Any) -> None: ...
    def __len__(self): ...
    def __getitem__(self, index: Any): ...
    def __setitem__(self, index: Any, value: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __delitem__(self, index: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def bulk_update(self) -> None: ...
    def append(self, value: Any) -> None: ...
    def insert(self, index: Any, value: Any) -> None: ...
    def copy(self): ...
    def transpose(self): ...
    def maskPixels(self, maskedImage: Any, maskName: str = ...) -> None: ...
    def toFitsRegionTable(self): ...
    @classmethod
    def fromDict(cls, dictionary: Any): ...
    def toDict(self): ...
    def toTable(self): ...
    @classmethod
    def fromTable(cls, tableList: Any, normalize_on_init: bool = ...): ...
    @classmethod
    def readLsstDefectsFile(cls, filename: Any, normalize_on_init: bool = ...): ...
    @classmethod
    def fromFootprintList(cls, fpList: Any): ...
    @classmethod
    def fromMask(cls, maskedImage: Any, maskName: Any): ...
