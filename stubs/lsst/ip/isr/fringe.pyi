from lsst.pex.config import Config as Config, ConfigField as ConfigField, Field as Field, ListField as ListField
from lsst.pipe.base import Struct as Struct, Task as Task, timeMethod as timeMethod
from typing import Any, Optional

def getFrame(): ...

class FringeStatisticsConfig(Config):
    badMaskPlanes: Any = ...
    stat: Any = ...
    clip: Any = ...
    iterations: Any = ...
    rngSeedOffset: Any = ...

class FringeConfig(Config):
    filters: Any = ...
    useFilterAliases: Any = ...
    num: Any = ...
    small: Any = ...
    large: Any = ...
    iterations: Any = ...
    clip: Any = ...
    stats: Any = ...
    pedestal: Any = ...

class FringeTask(Task):
    ConfigClass: Any = ...
    def readFringes(self, dataRef: Any, assembler: Optional[Any] = ...): ...
    def loadFringes(self, fringeExp: Any, expId: int = ..., assembler: Optional[Any] = ...): ...
    def run(self, exposure: Any, fringes: Any, seed: Optional[Any] = ...): ...
    def runDataRef(self, exposure: Any, dataRef: Any, assembler: Optional[Any] = ...): ...
    def checkFilter(self, exposure: Any): ...
    def removePedestal(self, fringe: Any) -> None: ...
    def generatePositions(self, exposure: Any, rng: Any): ...
    def measureExposure(self, exposure: Any, positions: Any, title: str = ...): ...
    def solve(self, science: Any, fringes: Any): ...
    def subtract(self, science: Any, fringes: Any, solution: Any) -> None: ...

def measure(mi: Any, x: Any, y: Any, size: Any, statistic: Any, stats: Any): ...
def stdev(vector: Any): ...
def select(vector: Any, clip: Any): ...
