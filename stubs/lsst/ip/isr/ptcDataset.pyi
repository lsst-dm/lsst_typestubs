from lsst.ip.isr import IsrCalib
from typing import Any, Optional

class PhotonTransferCurveDataset(IsrCalib):
    ptcFitType: Any = ...
    ampNames: Any = ...
    badAmps: Any = ...
    inputExpIdPairs: Any = ...
    expIdMask: Any = ...
    rawExpTimes: Any = ...
    rawMeans: Any = ...
    rawVars: Any = ...
    photoCharge: Any = ...
    gain: Any = ...
    gainErr: Any = ...
    noise: Any = ...
    noiseErr: Any = ...
    ptcFitPars: Any = ...
    ptcFitParsError: Any = ...
    ptcFitChiSq: Any = ...
    covariances: Any = ...
    covariancesModel: Any = ...
    covariancesSqrtWeights: Any = ...
    aMatrix: Any = ...
    bMatrix: Any = ...
    covariancesNoB: Any = ...
    covariancesModelNoB: Any = ...
    covariancesSqrtWeightsNoB: Any = ...
    aMatrixNoB: Any = ...
    finalVars: Any = ...
    finalModelVars: Any = ...
    finalMeans: Any = ...
    def __init__(self, ampNames: Any = ..., ptcFitType: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def updateMetadata(self, setDate: bool = ..., **kwargs: Any) -> None: ...
    @classmethod
    def fromDict(cls, dictionary: Any): ...
    def toDict(self): ...
    @classmethod
    def fromTable(cls, tableList: Any): ...
    def toTable(self): ...
    def getExpIdsUsed(self, ampName: Any): ...
    def getGoodAmps(self): ...
