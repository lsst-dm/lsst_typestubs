import lsst.pipe.base.connectionTypes as pexConfig
import lsst.pipe.base.connectionTypes as pipeBase
from typing import Any, Optional

class IsrTaskConnections(pipeBase.PipelineTaskConnections):
    ccdExposure: Any = ...
    camera: Any = ...
    crosstalk: Any = ...
    crosstalkSources: Any = ...
    bias: Any = ...
    dark: Any = ...
    flat: Any = ...
    fringes: Any = ...
    strayLightData: Any = ...
    bfKernel: Any = ...
    newBFKernel: Any = ...
    defects: Any = ...
    opticsTransmission: Any = ...
    filterTransmission: Any = ...
    sensorTransmission: Any = ...
    atmosphereTransmission: Any = ...
    illumMaskedImage: Any = ...
    outputExposure: Any = ...
    preInterpExposure: Any = ...
    outputOssThumbnail: Any = ...
    outputFlattenedThumbnail: Any = ...
    def __init__(self, *, config: Optional[Any] = ...) -> None: ...

class IsrTaskConfig(pipeBase.PipelineTaskConfig):
    datasetType: Any = ...
    fallbackFilterName: Any = ...
    useFallbackDate: Any = ...
    expectWcs: Any = ...
    fwhm: Any = ...
    qa: Any = ...
    doConvertIntToFloat: Any = ...
    doSaturation: Any = ...
    saturatedMaskName: Any = ...
    saturation: Any = ...
    growSaturationFootprintSize: Any = ...
    doSuspect: Any = ...
    suspectMaskName: Any = ...
    numEdgeSuspect: Any = ...
    edgeMaskLevel: Any = ...
    doSetBadRegions: Any = ...
    badStatistic: Any = ...
    doOverscan: Any = ...
    overscan: Any = ...
    overscanFitType: Any = ...
    overscanOrder: Any = ...
    overscanNumSigmaClip: Any = ...
    overscanIsInt: Any = ...
    overscanNumLeadingColumnsToSkip: Any = ...
    overscanNumTrailingColumnsToSkip: Any = ...
    overscanMaxDev: Any = ...
    overscanBiasJump: Any = ...
    overscanBiasJumpKeyword: Any = ...
    overscanBiasJumpDevices: Any = ...
    overscanBiasJumpLocation: Any = ...
    doAssembleCcd: Any = ...
    assembleCcd: Any = ...
    doAssembleIsrExposures: Any = ...
    doTrimToMatchCalib: Any = ...
    doBias: Any = ...
    biasDataProductName: Any = ...
    doBiasBeforeOverscan: Any = ...
    doVariance: Any = ...
    gain: Any = ...
    readNoise: Any = ...
    doEmpiricalReadNoise: Any = ...
    doLinearize: Any = ...
    doCrosstalk: Any = ...
    doCrosstalkBeforeAssemble: Any = ...
    crosstalk: Any = ...
    doDefect: Any = ...
    doNanMasking: Any = ...
    doWidenSaturationTrails: Any = ...
    doBrighterFatter: Any = ...
    brighterFatterLevel: Any = ...
    brighterFatterMaxIter: Any = ...
    brighterFatterThreshold: Any = ...
    brighterFatterApplyGain: Any = ...
    brighterFatterMaskGrowSize: Any = ...
    doDark: Any = ...
    darkDataProductName: Any = ...
    doStrayLight: Any = ...
    strayLight: Any = ...
    doFlat: Any = ...
    flatDataProductName: Any = ...
    flatScalingType: Any = ...
    flatUserScale: Any = ...
    doTweakFlat: Any = ...
    doApplyGains: Any = ...
    normalizeGains: Any = ...
    doFringe: Any = ...
    fringe: Any = ...
    fringeAfterFlat: Any = ...
    doMeasureBackground: Any = ...
    doCameraSpecificMasking: Any = ...
    masking: Any = ...
    doInterpolate: Any = ...
    doSaturationInterpolation: Any = ...
    doNanInterpolation: Any = ...
    doNanInterpAfterFlat: Any = ...
    maskListToInterpolate: Any = ...
    doSaveInterpPixels: Any = ...
    fluxMag0T1: Any = ...
    defaultFluxMag0T1: Any = ...
    doVignette: Any = ...
    vignette: Any = ...
    doAttachTransmissionCurve: Any = ...
    doUseOpticsTransmission: Any = ...
    doUseFilterTransmission: Any = ...
    doUseSensorTransmission: Any = ...
    doUseAtmosphereTransmission: Any = ...
    doIlluminationCorrection: Any = ...
    illuminationCorrectionDataProductName: Any = ...
    illumScale: Any = ...
    illumFilters: Any = ...
    doWrite: Any = ...
    def validate(self) -> None: ...

class IsrTask(pipeBase.PipelineTask, pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def runQuantum(self, butlerQC: Any, inputRefs: Any, outputRefs: Any) -> None: ...
    def readIsrData(self, dataRef: Any, rawExposure: Any): ...
    vignettePolygon: Any = ...
    def run(self, ccdExposure: Any, camera: Optional[Any] = ..., bias: Optional[Any] = ..., linearizer: Optional[Any] = ..., crosstalk: Optional[Any] = ..., crosstalkSources: Optional[Any] = ..., dark: Optional[Any] = ..., flat: Optional[Any] = ..., bfKernel: Optional[Any] = ..., bfGains: Optional[Any] = ..., defects: Optional[Any] = ..., fringes: Any = ..., opticsTransmission: Optional[Any] = ..., filterTransmission: Optional[Any] = ..., sensorTransmission: Optional[Any] = ..., atmosphereTransmission: Optional[Any] = ..., detectorNum: Optional[Any] = ..., strayLightData: Optional[Any] = ..., illumMaskedImage: Optional[Any] = ..., isGen3: bool = ...): ...
    def runDataRef(self, sensorRef: Any): ...
    def getIsrExposure(self, dataRef: Any, datasetType: Any, dateObs: Optional[Any] = ..., immediate: bool = ...): ...
    def ensureExposure(self, inputExp: Any, camera: Any, detectorNum: Any): ...
    def convertIntToFloat(self, exposure: Any): ...
    def maskAmplifier(self, ccdExposure: Any, amp: Any, defects: Any): ...
    def overscanCorrection(self, ccdExposure: Any, amp: Any): ...
    def updateVariance(self, ampExposure: Any, amp: Any, overscanImage: Optional[Any] = ...) -> None: ...
    def darkCorrection(self, exposure: Any, darkExposure: Any, invert: bool = ...) -> None: ...
    def doLinearize(self, detector: Any): ...
    def flatCorrection(self, exposure: Any, flatExposure: Any, invert: bool = ...) -> None: ...
    def saturationDetection(self, exposure: Any, amp: Any) -> None: ...
    def saturationInterpolation(self, exposure: Any) -> None: ...
    def suspectDetection(self, exposure: Any, amp: Any) -> None: ...
    def maskDefect(self, exposure: Any, defectBaseList: Any) -> None: ...
    def maskEdges(self, exposure: Any, numEdgePixels: int = ..., maskPlane: str = ..., level: str = ...) -> None: ...
    def maskAndInterpolateDefects(self, exposure: Any, defectBaseList: Any) -> None: ...
    def maskNan(self, exposure: Any) -> None: ...
    def maskAndInterpolateNan(self, exposure: Any) -> None: ...
    def measureBackground(self, exposure: Any, IsrQaConfig: Optional[Any] = ...) -> None: ...
    def roughZeroPoint(self, exposure: Any) -> None: ...
    def setValidPolygonIntersect(self, ccdExposure: Any, fpPolygon: Any) -> None: ...
    def flatContext(self, exp: Any, flat: Any, dark: Optional[Any] = ...) -> None: ...
    def debugView(self, exposure: Any, stepname: Any) -> None: ...

class FakeAmp:
    def __init__(self, exposure: Any, config: Any) -> None: ...
    def getBBox(self): ...
    def getRawBBox(self): ...
    def getRawHorizontalOverscanBBox(self): ...
    def getGain(self): ...
    def getReadNoise(self): ...
    def getSaturation(self): ...
    def getSuspectLevel(self): ...

class RunIsrConfig(pexConfig.Config):
    isr: Any = ...

class RunIsrTask(pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def runDataRef(self, dataRef: Any): ...
