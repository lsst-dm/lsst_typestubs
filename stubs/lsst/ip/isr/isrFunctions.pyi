from .defects import Defects as Defects
from .overscan import OverscanCorrectionTask as OverscanCorrectionTask, OverscanCorrectionTaskConfig as OverscanCorrectionTaskConfig
from lsst.meas.algorithms.detection import SourceDetectionTask as SourceDetectionTask
from typing import Any, Optional

def createPsf(fwhm: Any): ...
def transposeMaskedImage(maskedImage: Any): ...
def interpolateDefectList(maskedImage: Any, defectList: Any, fwhm: Any, fallbackValue: Optional[Any] = ...): ...
def makeThresholdMask(maskedImage: Any, threshold: Any, growFootprints: int = ..., maskName: str = ...): ...
def growMasks(mask: Any, radius: int = ..., maskNameList: Any = ..., maskValue: str = ...) -> None: ...
def interpolateFromMask(maskedImage: Any, fwhm: Any, growSaturatedFootprints: int = ..., maskNameList: Any = ..., fallbackValue: Optional[Any] = ...): ...
def saturationCorrection(maskedImage: Any, saturation: Any, fwhm: Any, growFootprints: int = ..., interpolate: bool = ..., maskName: str = ..., fallbackValue: Optional[Any] = ...): ...
def trimToMatchCalibBBox(rawMaskedImage: Any, calibMaskedImage: Any): ...
def biasCorrection(maskedImage: Any, biasMaskedImage: Any, trimToFit: bool = ...) -> None: ...
def darkCorrection(maskedImage: Any, darkMaskedImage: Any, expScale: Any, darkScale: Any, invert: bool = ..., trimToFit: bool = ...) -> None: ...
def updateVariance(maskedImage: Any, gain: Any, readNoise: Any) -> None: ...
def flatCorrection(maskedImage: Any, flatMaskedImage: Any, scalingType: Any, userScale: float = ..., invert: bool = ..., trimToFit: bool = ...) -> None: ...
def illuminationCorrection(maskedImage: Any, illumMaskedImage: Any, illumScale: Any, trimToFit: bool = ...) -> None: ...
def overscanCorrection(ampMaskedImage: Any, overscanImage: Any, fitType: str = ..., order: int = ..., collapseRej: float = ..., statControl: Optional[Any] = ..., overscanIsInt: bool = ...): ...
def brighterFatterCorrection(exposure: Any, kernel: Any, maxIter: Any, threshold: Any, applyGain: Any, gains: Optional[Any] = ...): ...
def gainContext(exp: Any, image: Any, apply: Any, gains: Optional[Any] = ...) -> None: ...
def attachTransmissionCurve(exposure: Any, opticsTransmission: Optional[Any] = ..., filterTransmission: Optional[Any] = ..., sensorTransmission: Optional[Any] = ..., atmosphereTransmission: Optional[Any] = ...): ...
def applyGains(exposure: Any, normalizeGains: bool = ...) -> None: ...
def widenSaturationTrails(mask: Any) -> None: ...
def setBadRegions(exposure: Any, badStatistic: str = ...): ...
