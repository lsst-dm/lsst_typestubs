from lsst.ctrl.pool.parallel import BatchPoolTask as BatchPoolTask
from lsst.ctrl.pool.pool import Pool as Pool, abortOnError as abortOnError
from lsst.meas.base.forcedPhotCoadd import ForcedPhotCoaddTask as ForcedPhotCoaddTask
from lsst.meas.base.references import MultiBandReferencesTask as MultiBandReferencesTask
from lsst.pex.config import Config as Config, ConfigurableField as ConfigurableField, Field as Field
from lsst.pipe.base import ArgumentParser as ArgumentParser, TaskRunner as TaskRunner
from lsst.pipe.drivers.utils import TractDataIdContainer as TractDataIdContainer, getDataRef as getDataRef
from lsst.pipe.tasks.multiBand import DeblendCoaddSourcesTask as DeblendCoaddSourcesTask, DetectCoaddSourcesTask as DetectCoaddSourcesTask, MeasureMergedCoaddSourcesTask as MeasureMergedCoaddSourcesTask, MergeDetectionsTask as MergeDetectionsTask, MergeMeasurementsTask as MergeMeasurementsTask
from typing import Any, Optional

class MultiBandDriverConfig(Config):
    coaddName: Any = ...
    doDetection: Any = ...
    detectCoaddSources: Any = ...
    mergeCoaddDetections: Any = ...
    deblendCoaddSources: Any = ...
    measureCoaddSources: Any = ...
    mergeCoaddMeasurements: Any = ...
    forcedPhotCoadd: Any = ...
    reprocessing: Any = ...
    hasFakes: Any = ...
    def setDefaults(self) -> None: ...
    def validate(self) -> None: ...

class MultiBandDriverTaskRunner(TaskRunner):
    reuse: Any = ...
    def __init__(self, TaskClass: Any, parsedCmd: Any, doReturnResults: bool = ...) -> None: ...
    def makeTask(self, parsedCmd: Optional[Any] = ..., args: Optional[Any] = ...): ...

def unpickle(factory: Any, args: Any, kwargs: Any): ...

class MultiBandDriverTask(BatchPoolTask):
    ConfigClass: Any = ...
    RunnerClass: Any = ...
    butler: Any = ...
    reuse: Any = ...
    measurementInput: Any = ...
    deblenderOutput: Any = ...
    coaddType: Any = ...
    def __init__(self, butler: Optional[Any] = ..., schema: Optional[Any] = ..., refObjLoader: Optional[Any] = ..., reuse: Any = ..., **kwargs: Any) -> None: ...
    def __reduce__(self): ...
    @classmethod
    def batchWallTime(cls, time: Any, parsedCmd: Any, numCpus: Any): ...
    def runDataRef(self, patchRefList: Any) -> None: ...
    def runDetection(self, cache: Any, patchRef: Any) -> None: ...
    def runMergeDetections(self, cache: Any, dataIdList: Any) -> None: ...
    def runDeblendMerged(self, cache: Any, dataIdList: Any): ...
    def runMeasurements(self, cache: Any, dataId: Any) -> None: ...
    def runMergeMeasurements(self, cache: Any, dataIdList: Any) -> None: ...
    def runForcedPhot(self, cache: Any, dataId: Any) -> None: ...
    def writeMetadata(self, dataRef: Any) -> None: ...
