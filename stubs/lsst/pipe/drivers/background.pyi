from lsst.pex.config import ChoiceField as ChoiceField, Config as Config, ConfigField as ConfigField, ConfigurableField as ConfigurableField, Field as Field, ListField as ListField, RangeField as RangeField
from lsst.pipe.base import Task as Task
from typing import Any, Optional

def robustMean(array: Any, rej: float = ...): ...

class BackgroundConfig(Config):
    statistic: Any = ...
    xBinSize: Any = ...
    yBinSize: Any = ...
    algorithm: Any = ...
    mask: Any = ...

class SkyStatsConfig(Config):
    statistic: Any = ...
    clip: Any = ...
    nIter: Any = ...
    mask: Any = ...

class SkyMeasurementConfig(Config):
    skyIter: Any = ...
    skyRej: Any = ...
    background: Any = ...
    xNumSamples: Any = ...
    yNumSamples: Any = ...
    stats: Any = ...

class SkyMeasurementTask(Task):
    ConfigClass: Any = ...
    def getSkyData(self, butler: Any, calibId: Any): ...
    @staticmethod
    def exposureToBackground(bgExp: Any): ...
    def backgroundToExposure(self, statsImage: Any, bbox: Any): ...
    def measureBackground(self, image: Any): ...
    def averageBackgrounds(self, bgList: Any): ...
    def measureScale(self, image: Any, skyBackground: Any): ...
    def solveScales(self, scales: Any): ...
    def subtractSkyFrame(self, image: Any, skyBackground: Any, scale: Any, bgList: Optional[Any] = ...) -> None: ...

def interpolate1D(method: Any, xSample: Any, ySample: Any, xInterp: Any): ...
def interpolateBadPixels(array: Any, isBad: Any, interpolationStyle: Any) -> None: ...

class FocalPlaneBackgroundConfig(Config):
    xSize: Any = ...
    ySize: Any = ...
    pixelSize: Any = ...
    minFrac: Any = ...
    mask: Any = ...
    interpolation: Any = ...
    doSmooth: Any = ...
    smoothScale: Any = ...
    binning: Any = ...

class FocalPlaneBackground:
    @classmethod
    def fromCamera(cls, config: Any, camera: Any): ...
    config: Any = ...
    dims: Any = ...
    transform: Any = ...
    def __init__(self, config: Any, dims: Any, transform: Any, values: Optional[Any] = ..., numbers: Optional[Any] = ...) -> None: ...
    def __reduce__(self): ...
    def clone(self): ...
    def addCcd(self, exposure: Any) -> None: ...
    def toCcdBackground(self, detector: Any, bbox: Any): ...
    def merge(self, other: Any): ...
    def __iadd__(self, other: Any): ...
    def getStatsImage(self): ...

class MaskObjectsConfig(Config):
    nIter: Any = ...
    subtractBackground: Any = ...
    detection: Any = ...
    detectSigma: Any = ...
    doInterpolate: Any = ...
    interpolate: Any = ...
    def setDefaults(self) -> None: ...
    def validate(self) -> None: ...

class MaskObjectsTask(Task):
    ConfigClass: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def run(self, exposure: Any, maskPlanes: Optional[Any] = ...) -> None: ...
    def findObjects(self, exposure: Any) -> None: ...
    def removeObjects(self, exposure: Any, maskPlanes: Optional[Any] = ...) -> None: ...

def smoothArray(array: Any, bad: Any, sigma: Any): ...
