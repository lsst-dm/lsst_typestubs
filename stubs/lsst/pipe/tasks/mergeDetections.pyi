from .multiBandUtils import CullPeaksConfig as CullPeaksConfig, MergeSourcesRunner as MergeSourcesRunner, getInputSchema as getInputSchema, getShortFilterName as getShortFilterName, makeMergeArgumentParser as makeMergeArgumentParser, readCatalog as readCatalog
from lsst.meas.algorithms import SkyObjectsTask as SkyObjectsTask
from lsst.pex.config import Config as Config, ConfigField as ConfigField, ConfigurableField as ConfigurableField, Field as Field, ListField as ListField
from lsst.pipe.base import CmdLineTask as CmdLineTask, PipelineTask as PipelineTask, PipelineTaskConfig as PipelineTaskConfig, PipelineTaskConnections as PipelineTaskConnections, Struct as Struct
from lsst.pipe.tasks.coaddBase import getSkyInfo as getSkyInfo
from lsst.skymap import BaseSkyMap as BaseSkyMap
from typing import Any, Optional

class MergeDetectionsConnections(PipelineTaskConnections):
    schema: Any = ...
    outputSchema: Any = ...
    outputPeakSchema: Any = ...
    catalogs: Any = ...
    skyMap: Any = ...
    outputCatalog: Any = ...

class MergeDetectionsConfig(PipelineTaskConfig):
    minNewPeak: Any = ...
    maxSamePeak: Any = ...
    cullPeaks: Any = ...
    skyFilterName: Any = ...
    skyObjects: Any = ...
    priorityList: Any = ...
    coaddName: Any = ...
    def setDefaults(self) -> None: ...
    def validate(self) -> None: ...

class MergeDetectionsTask(PipelineTask, CmdLineTask):
    ConfigClass: Any = ...
    RunnerClass: Any = ...
    inputDataset: str = ...
    outputDataset: str = ...
    makeIdFactory: Any = ...
    def getInputSchema(self, butler: Optional[Any] = ..., schema: Optional[Any] = ...): ...
    schema: Any = ...
    merged: Any = ...
    outputSchema: Any = ...
    outputPeakSchema: Any = ...
    def __init__(self, butler: Optional[Any] = ..., schema: Optional[Any] = ..., initInputs: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def runDataRef(self, patchRefList: Any) -> None: ...
    def runQuantum(self, butlerQC: Any, inputRefs: Any, outputRefs: Any) -> None: ...
    def run(self, catalogs: Any, skyInfo: Any, idFactory: Any, skySeed: Any): ...
    def cullPeaks(self, catalog: Any) -> None: ...
    def getSchemaCatalogs(self): ...
    def getSkySourceFootprints(self, mergedList: Any, skyInfo: Any, seed: Any): ...
    def write(self, patchRef: Any, catalog: Any) -> None: ...
    def writeMetadata(self, dataRefList: Any) -> None: ...
