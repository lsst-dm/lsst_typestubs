import lsst.kht as pexConfig
import lsst.kht as pipeBase
from typing import Any, Optional

def setDetectionMask(maskedImage: Any, forceSlowBin: bool = ..., binning: Optional[Any] = ..., detectedPlane: str = ..., badMaskPlanes: Any = ..., detectionThreshold: int = ...) -> None: ...

class Line:
    rho: float
    theta: float
    sigma: float = ...
    def __init__(self, rho: Any, theta: Any, sigma: Any) -> None: ...

class LineCollection:
    def __init__(self, rhos: Any, thetas: Any, sigmas: Optional[Any] = ...) -> None: ...
    def __len__(self): ...
    def __getitem__(self, index: Any): ...
    def __iter__(self) -> Any: ...
    @property
    def rhos(self): ...
    @property
    def thetas(self): ...
    def append(self, newLine: Any) -> None: ...

class LineProfile:
    data: Any = ...
    weights: Any = ...
    mask: Any = ...
    def __init__(self, data: Any, weights: Any, line: Optional[Any] = ...) -> None: ...
    lineMask: Any = ...
    lineMaskSize: Any = ...
    def setLineMask(self, line: Any) -> None: ...
    def makeProfile(self, line: Any, fitFlux: bool = ...): ...
    def fit(self, dChi2Tol: float = ..., maxIter: int = ...): ...

class MaskStreaksConfig(pexConfig.Config):
    minimumKernelHeight: Any = ...
    absMinimumKernelHeight: Any = ...
    clusterMinimumSize: Any = ...
    clusterMinimumDeviation: Any = ...
    delta: Any = ...
    nSigma: Any = ...
    rhoBinSize: Any = ...
    thetaBinSize: Any = ...
    invSigma: Any = ...
    footprintThreshold: Any = ...
    dChi2Tolerance: Any = ...
    detectedMaskPlane: Any = ...
    streaksMaskPlane: Any = ...

class MaskStreaksTask(pipeBase.Task):
    ConfigClass: Any = ...
    edges: Any = ...
    lines: Any = ...
    def find(self, maskedImage: Any): ...
    def run(self, maskedImage: Any): ...
