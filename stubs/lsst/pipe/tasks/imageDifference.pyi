import lsst.afw.display as pipeBase
from typing import Any, Optional

class ImageDifferenceTaskConnections(pipeBase.PipelineTaskConnections):
    exposure: Any = ...
    skyMap: Any = ...
    coaddExposures: Any = ...
    dcrCoadds: Any = ...
    outputSchema: Any = ...
    subtractedExposure: Any = ...
    warpedExposure: Any = ...
    diaSources: Any = ...
    def __init__(self, *, config: Optional[Any] = ...) -> None: ...

class ImageDifferenceConfig(pipeBase.PipelineTaskConfig):
    doAddCalexpBackground: Any = ...
    doUseRegister: Any = ...
    doDebugRegister: Any = ...
    doSelectSources: Any = ...
    doSelectDcrCatalog: Any = ...
    doSelectVariableCatalog: Any = ...
    doSubtract: Any = ...
    doPreConvolve: Any = ...
    doScaleTemplateVariance: Any = ...
    doScaleDiffimVariance: Any = ...
    useGaussianForPreConvolution: Any = ...
    doDetection: Any = ...
    doDecorrelation: Any = ...
    doMerge: Any = ...
    doMatchSources: Any = ...
    doMeasurement: Any = ...
    doDipoleFitting: Any = ...
    doForcedMeasurement: Any = ...
    doWriteSubtractedExp: Any = ...
    doWriteWarpedExp: Any = ...
    doWriteMatchedExp: Any = ...
    doWriteSources: Any = ...
    doAddMetrics: Any = ...
    coaddName: Any = ...
    convolveTemplate: Any = ...
    refObjLoader: Any = ...
    astrometer: Any = ...
    sourceSelector: Any = ...
    subtract: Any = ...
    decorrelate: Any = ...
    doSpatiallyVarying: Any = ...
    detection: Any = ...
    measurement: Any = ...
    forcedMeasurement: Any = ...
    getTemplate: Any = ...
    scaleVariance: Any = ...
    controlStepSize: Any = ...
    controlRandomSeed: Any = ...
    register: Any = ...
    kernelSourcesFromRef: Any = ...
    templateSipOrder: Any = ...
    growFootprint: Any = ...
    diaSourceMatchRadius: Any = ...
    def setDefaults(self) -> None: ...
    def validate(self) -> None: ...

class ImageDifferenceTaskRunner(pipeBase.ButlerInitializedTaskRunner):
    @staticmethod
    def getTargetList(parsedCmd: Any, **kwargs: Any): ...

class ImageDifferenceTask(pipeBase.CmdLineTask, pipeBase.PipelineTask):
    ConfigClass: Any = ...
    RunnerClass: Any = ...
    schema: Any = ...
    algMetadata: Any = ...
    outputSchema: Any = ...
    def __init__(self, butler: Optional[Any] = ..., **kwargs: Any) -> None: ...
    @staticmethod
    def makeIdFactory(expId: Any, expBits: Any): ...
    def runQuantum(self, butlerQC: pipeBase.ButlerQuantumContext, inputRefs: pipeBase.InputQuantizedConnection, outputRefs: pipeBase.OutputQuantizedConnection) -> Any: ...
    def runDataRef(self, sensorRef: Any, templateIdList: Optional[Any] = ...): ...
    def run(self, exposure: Optional[Any] = ..., selectSources: Optional[Any] = ..., templateExposure: Optional[Any] = ..., templateSources: Optional[Any] = ..., idFactory: Optional[Any] = ..., calexpBackgroundExposure: Optional[Any] = ..., subtractedExposure: Optional[Any] = ...): ...
    def fitAstrometry(self, templateSources: Any, templateExposure: Any, selectSources: Any): ...
    def runDebug(self, exposure: Any, subtractRes: Any, selectSources: Any, kernelSources: Any, diaSources: Any) -> None: ...
    def getSchemaCatalogs(self): ...

class Winter2013ImageDifferenceConfig(ImageDifferenceConfig):
    winter2013WcsShift: Any = ...
    winter2013WcsRms: Any = ...
    def setDefaults(self) -> None: ...

class Winter2013ImageDifferenceTask(ImageDifferenceTask):
    ConfigClass: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def fitAstrometry(self, templateSources: Any, templateExposure: Any, selectSources: Any): ...
