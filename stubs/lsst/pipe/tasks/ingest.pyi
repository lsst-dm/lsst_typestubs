from lsst.afw.fits import DEFAULT_HDU as DEFAULT_HDU, readMetadata as readMetadata
from lsst.pex.config import Config as Config, ConfigurableField as ConfigurableField, DictField as DictField, Field as Field, ListField as ListField
from lsst.pipe.base import InputOnlyArgumentParser as InputOnlyArgumentParser, Task as Task
from typing import Any, Optional

class IngestArgumentParser(InputOnlyArgumentParser):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class ParseConfig(Config):
    translation: Any = ...
    translators: Any = ...
    defaults: Any = ...
    hdu: Any = ...
    extnames: Any = ...

class ParseTask(Task):
    ConfigClass: Any = ...
    translator_class: Any = ...
    def getInfo(self, filename: Any): ...
    @staticmethod
    def getExtensionName(md: Any): ...
    def getInfoFromMetadata(self, md: Any, info: Optional[Any] = ...): ...
    def translate_date(self, md: Any): ...
    def translate_filter(self, md: Any): ...
    def getDestination(self, butler: Any, info: Any, filename: Any): ...

class RegisterConfig(Config):
    table: Any = ...
    columns: Any = ...
    unique: Any = ...
    visit: Any = ...
    ignore: Any = ...
    permissions: Any = ...

class RegistryContext:
    conn: Any = ...
    def __init__(self, registryName: Any, createTableFunc: Any, forceCreateTables: Any, permissions: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, excType: Any, excValue: Any, traceback: Any): ...

def fakeContext() -> None: ...

class RegisterTask(Task):
    ConfigClass: Any = ...
    placeHolder: str = ...
    typemap: Any = ...
    def openRegistry(self, directory: Any, create: bool = ..., dryrun: bool = ..., name: str = ...): ...
    def createTable(self, conn: Any, table: Optional[Any] = ..., forceCreateTables: bool = ...) -> None: ...
    def check(self, conn: Any, info: Any, table: Optional[Any] = ...): ...
    def addRow(self, conn: Any, info: Any, dryrun: bool = ..., create: bool = ..., table: Optional[Any] = ...) -> None: ...

class IngestConfig(Config):
    parse: Any = ...
    register: Any = ...
    allowError: Any = ...
    clobber: Any = ...

class IngestError(RuntimeError):
    pathname: Any = ...
    position: Any = ...
    def __init__(self, message: Any, pathname: Any, position: Any) -> None: ...

class IngestTask(Task):
    ConfigClass: Any = ...
    ArgumentParser: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @classmethod
    def parseAndRun(cls) -> None: ...
    @classmethod
    def prepareTask(cls, root: Optional[Any] = ..., dryrun: bool = ..., mode: str = ..., create: bool = ..., ignoreIngested: bool = ...): ...
    def ingest(self, infile: Any, outfile: Any, mode: str = ..., dryrun: bool = ...): ...
    def isBadFile(self, filename: Any, badFileList: Any): ...
    def isBadId(self, info: Any, badIdList: Any): ...
    def expandFiles(self, fileNameList: Any): ...
    def runFile(self, infile: Any, registry: Any, args: Any, pos: Any): ...
    def run(self, args: Any) -> None: ...
    def ingestFiles(self, fileList: Any) -> None: ...

def assertCanCopy(fromPath: Any, toPath: Any) -> None: ...
