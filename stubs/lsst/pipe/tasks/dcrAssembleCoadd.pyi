import lsst.utils as pipeBase
from .assembleCoadd import CompareWarpAssembleCoaddConfig, CompareWarpAssembleCoaddTask
from typing import Any, Optional

class DcrAssembleCoaddConnections(pipeBase.PipelineTaskConnections):
    inputWarps: Any = ...
    skyMap: Any = ...
    brightObjectMask: Any = ...
    templateExposure: Any = ...
    dcrCoadds: Any = ...
    dcrNImages: Any = ...
    def __init__(self, *, config: Optional[Any] = ...) -> None: ...

class DcrAssembleCoaddConfig(CompareWarpAssembleCoaddConfig):
    dcrNumSubfilters: Any = ...
    maxNumIter: Any = ...
    minNumIter: Any = ...
    convergenceThreshold: Any = ...
    useConvergence: Any = ...
    baseGain: Any = ...
    useProgressiveGain: Any = ...
    doAirmassWeight: Any = ...
    modelWeightsWidth: Any = ...
    useModelWeights: Any = ...
    splitSubfilters: Any = ...
    splitThreshold: Any = ...
    regularizeModelIterations: Any = ...
    regularizeModelFrequency: Any = ...
    convergenceMaskPlanes: Any = ...
    regularizationWidth: Any = ...
    imageInterpOrder: Any = ...
    accelerateModel: Any = ...
    doCalculatePsf: Any = ...
    detectPsfSources: Any = ...
    measurePsfSources: Any = ...
    measurePsf: Any = ...
    effectiveWavelength: Any = ...
    bandwidth: Any = ...
    doNImage: bool = ...
    def setDefaults(self) -> None: ...

class DcrAssembleCoaddTask(CompareWarpAssembleCoaddTask):
    ConfigClass: Any = ...
    schema: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def runQuantum(self, butlerQC: Any, inputRefs: Any, outputRefs: Any): ...
    def runDataRef(self, dataRef: Any, selectDataList: Optional[Any] = ..., warpRefList: Optional[Any] = ...): ...
    def makeSupplementaryDataGen3(self, butlerQC: Any, inputRefs: Any, outputRefs: Any): ...
    def measureCoaddPsf(self, coaddExposure: Any) -> None: ...
    bufferSize: Any = ...
    def prepareDcrInputs(self, templateCoadd: Any, warpRefList: Any, weightList: Any): ...
    def run(self, skyInfo: Any, warpRefList: Any, imageScalerList: Any, weightList: Any, supplementaryData: Optional[Any] = ...): ...
    def calculateNImage(self, dcrModels: Any, bbox: Any, warpRefList: Any, spanSetMaskList: Any, statsCtrl: Any): ...
    def dcrAssembleSubregion(self, dcrModels: Any, subExposures: Any, bbox: Any, dcrBBox: Any, warpRefList: Any, statsCtrl: Any, convergenceMetric: Any, gain: Any, modelWeights: Any, refImage: Any, dcrWeights: Any) -> None: ...
    def dcrResiduals(self, residual: Any, visitInfo: Any, wcs: Any, effectiveWavelength: Any, bandwidth: Any) -> None: ...
    def newModelFromResidual(self, dcrModels: Any, residualGeneratorList: Any, dcrBBox: Any, statsCtrl: Any, gain: Any, modelWeights: Any, refImage: Any, dcrWeights: Any): ...
    def calculateConvergence(self, dcrModels: Any, subExposures: Any, bbox: Any, warpRefList: Any, weightList: Any, statsCtrl: Any): ...
    def calculateSingleConvergence(self, dcrModels: Any, exposure: Any, significanceImage: Any, statsCtrl: Any): ...
    def stackCoadd(self, dcrCoadds: Any): ...
    def fillCoadd(self, dcrModels: Any, skyInfo: Any, warpRefList: Any, weightList: Any, calibration: Optional[Any] = ..., coaddInputs: Optional[Any] = ..., mask: Optional[Any] = ..., variance: Optional[Any] = ...): ...
    def calculateGain(self, convergenceList: Any, gainList: Any): ...
    def calculateModelWeights(self, dcrModels: Any, dcrBBox: Any): ...
    def applyModelWeights(self, modelImages: Any, refImage: Any, modelWeights: Any) -> None: ...
    def loadSubExposures(self, bbox: Any, statsCtrl: Any, warpRefList: Any, imageScalerList: Any, spanSetMaskList: Any): ...
    def selectCoaddPsf(self, templateCoadd: Any, warpRefList: Any): ...
