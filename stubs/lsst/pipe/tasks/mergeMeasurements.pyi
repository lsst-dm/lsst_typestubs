import lsst.pipe.base.connectionTypes as pipeBase
from .multiBandUtils import MergeSourcesRunner as MergeSourcesRunner, getInputSchema as getInputSchema, getShortFilterName as getShortFilterName, makeMergeArgumentParser as makeMergeArgumentParser, readCatalog as readCatalog
from lsst.pipe.base import PipelineTaskConfig as PipelineTaskConfig, PipelineTaskConnections as PipelineTaskConnections
from typing import Any, Optional

class MergeMeasurementsConnections(PipelineTaskConnections):
    inputSchema: Any = ...
    outputSchema: Any = ...
    catalogs: Any = ...
    mergedCatalog: Any = ...

class MergeMeasurementsConfig(PipelineTaskConfig):
    pseudoFilterList: Any = ...
    snName: Any = ...
    minSN: Any = ...
    minSNDiff: Any = ...
    flags: Any = ...
    priorityList: Any = ...
    coaddName: Any = ...
    def validate(self) -> None: ...

class MergeMeasurementsTask(pipeBase.PipelineTask, pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    RunnerClass: Any = ...
    inputDataset: str = ...
    outputDataset: str = ...
    getSchemaCatalogs: Any = ...
    def getInputSchema(self, butler: Optional[Any] = ..., schema: Optional[Any] = ...): ...
    def runQuantum(self, butlerQC: Any, inputRefs: Any, outputRefs: Any) -> None: ...
    schemaMapper: Any = ...
    instFluxKey: Any = ...
    instFluxErrKey: Any = ...
    fluxFlagKey: Any = ...
    flagKeys: Any = ...
    schema: Any = ...
    pseudoFilterKeys: Any = ...
    badFlags: Any = ...
    outputSchema: Any = ...
    def __init__(self, butler: Optional[Any] = ..., schema: Optional[Any] = ..., initInputs: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def runDataRef(self, patchRefList: Any) -> None: ...
    def run(self, catalogs: Any): ...
    def write(self, patchRef: Any, catalog: Any) -> None: ...
    def writeMetadata(self, dataRefList: Any) -> None: ...
