from lsst.afw.fits import readMetadata as readMetadata
from lsst.pex.config import Config as Config, ConfigurableField as ConfigurableField, Field as Field, ListField as ListField
from lsst.pipe.base import InputOnlyArgumentParser as InputOnlyArgumentParser
from lsst.pipe.tasks.ingest import IngestTask as IngestTask, ParseTask as ParseTask, RegisterConfig as RegisterConfig, RegisterTask as RegisterTask
from typing import Any, Optional

class CalibsParseTask(ParseTask):
    def getCalibType(self, filename: Any): ...
    def getDestination(self, butler: Any, info: Any, filename: Any): ...

class CalibsRegisterConfig(RegisterConfig):
    tables: Any = ...
    calibDate: Any = ...
    validStart: Any = ...
    validEnd: Any = ...
    detector: Any = ...
    validityUntilSuperseded: Any = ...
    incrementValidEnd: Any = ...

class CalibsRegisterTask(RegisterTask):
    ConfigClass: Any = ...
    def openRegistry(self, directory: Any, create: bool = ..., dryrun: bool = ..., name: str = ...): ...
    def createTable(self, conn: Any, forceCreateTables: bool = ...) -> None: ...
    def addRow(self, conn: Any, info: Any, *args: Any, **kwargs: Any) -> None: ...
    def updateValidityRanges(self, conn: Any, validity: Any, tables: Optional[Any] = ...) -> None: ...
    def fixSubsetValidity(self, conn: Any, table: Any, detectorData: Any, validity: Any) -> None: ...

class IngestCalibsArgumentParser(InputOnlyArgumentParser):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class IngestCalibsConfig(Config):
    parse: Any = ...
    register: Any = ...
    allowError: Any = ...
    clobber: Any = ...

class IngestCalibsTask(IngestTask):
    ConfigClass: Any = ...
    ArgumentParser: Any = ...
    def run(self, args: Any) -> None: ...
