import lsst.utils as pipeBase
from .coaddBase import CoaddBaseTask
from typing import Any, Optional

class MissingExposureError(Exception): ...

class MakeCoaddTempExpConfig(CoaddBaseTask.ConfigClass):
    warpAndPsfMatch: Any = ...
    doWrite: Any = ...
    bgSubtracted: Any = ...
    coaddPsf: Any = ...
    makeDirect: Any = ...
    makePsfMatched: Any = ...
    doWriteEmptyWarps: Any = ...
    hasFakes: Any = ...
    doApplySkyCorr: Any = ...
    def validate(self) -> None: ...
    def setDefaults(self) -> None: ...

class MakeCoaddTempExpTask(CoaddBaseTask):
    ConfigClass: Any = ...
    reuse: Any = ...
    calexpType: str = ...
    def __init__(self, reuse: bool = ..., **kwargs: Any) -> None: ...
    def runDataRef(self, patchRef: Any, selectDataList: Any = ...): ...
    def run(self, calExpList: Any, ccdIdList: Any, skyInfo: Any, visitId: int = ..., dataIdList: Optional[Any] = ...): ...
    def getCalibratedExposure(self, dataRef: Any, bgSubtracted: Any): ...
    def getWarpTypeList(self): ...
    def applySkyCorr(self, dataRef: Any, calexp: Any) -> None: ...

class MakeWarpConnections(pipeBase.PipelineTaskConnections):
    calExpList: Any = ...
    backgroundList: Any = ...
    skyCorrList: Any = ...
    skyMap: Any = ...
    direct: Any = ...
    psfMatched: Any = ...
    def __init__(self, *, config: Optional[Any] = ...) -> None: ...

class MakeWarpConfig(pipeBase.PipelineTaskConfig, MakeCoaddTempExpConfig):
    def validate(self) -> None: ...

class MakeWarpTask(MakeCoaddTempExpTask, pipeBase.PipelineTask):
    ConfigClass: Any = ...
    def runQuantum(self, butlerQC: Any, inputRefs: Any, outputRefs: Any) -> None: ...
    def prepareCalibratedExposures(self, calExpList: Any, backgroundList: Optional[Any] = ..., skyCorrList: Optional[Any] = ...) -> None: ...
