import lsst.daf.base as pipeBase
from typing import Any, Optional

class CalibrateConnections(pipeBase.PipelineTaskConnections):
    icSourceSchema: Any = ...
    outputSchema: Any = ...
    exposure: Any = ...
    background: Any = ...
    icSourceCat: Any = ...
    astromRefCat: Any = ...
    photoRefCat: Any = ...
    outputExposure: Any = ...
    outputCat: Any = ...
    outputBackground: Any = ...
    matches: Any = ...
    matchesDenormalized: Any = ...
    def __init__(self, *, config: Optional[Any] = ...) -> None: ...

class CalibrateConfig(pipeBase.PipelineTaskConfig):
    doWrite: Any = ...
    doWriteHeavyFootprintsInSources: Any = ...
    doWriteMatches: Any = ...
    doWriteMatchesDenormalized: Any = ...
    doAstrometry: Any = ...
    astromRefObjLoader: Any = ...
    photoRefObjLoader: Any = ...
    astrometry: Any = ...
    requireAstrometry: Any = ...
    doPhotoCal: Any = ...
    requirePhotoCal: Any = ...
    photoCal: Any = ...
    icSourceFieldsToCopy: Any = ...
    matchRadiusPix: Any = ...
    checkUnitsParseStrict: Any = ...
    detection: Any = ...
    doDeblend: Any = ...
    deblend: Any = ...
    doSkySources: Any = ...
    skySources: Any = ...
    measurement: Any = ...
    setPrimaryFlags: Any = ...
    doApCorr: Any = ...
    applyApCorr: Any = ...
    catalogCalculation: Any = ...
    doInsertFakes: Any = ...
    insertFakes: Any = ...
    doWriteExposure: Any = ...
    def setDefaults(self) -> None: ...
    def validate(self) -> None: ...

class CalibrateTask(pipeBase.PipelineTask, pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    RunnerClass: Any = ...
    schemaMapper: Any = ...
    calibSourceKey: Any = ...
    schema: Any = ...
    algMetadata: Any = ...
    skySourceKey: Any = ...
    pixelMargin: Any = ...
    outputSchema: Any = ...
    def __init__(self, butler: Optional[Any] = ..., astromRefObjLoader: Optional[Any] = ..., photoRefObjLoader: Optional[Any] = ..., icSourceSchema: Optional[Any] = ..., initInputs: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def runDataRef(self, dataRef: Any, exposure: Optional[Any] = ..., background: Optional[Any] = ..., icSourceCat: Optional[Any] = ..., doUnpersist: bool = ...): ...
    def runQuantum(self, butlerQC: Any, inputRefs: Any, outputRefs: Any) -> None: ...
    def run(self, exposure: Any, exposureIdInfo: Optional[Any] = ..., background: Optional[Any] = ..., icSourceCat: Optional[Any] = ...): ...
    def writeOutputs(self, dataRef: Any, exposure: Any, background: Any, sourceCat: Any, astromMatches: Any, matchMeta: Any) -> None: ...
    def getSchemaCatalogs(self): ...
    def setMetadata(self, exposure: Any, photoRes: Optional[Any] = ...) -> None: ...
    def copyIcSourceFields(self, icSourceCat: Any, sourceCat: Any) -> None: ...
