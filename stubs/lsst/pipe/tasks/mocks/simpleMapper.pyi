import lsst.afw.image
from typing import Any, Optional

class PersistenceType:
    python: Any = ...
    cpp: str = ...
    storage: Any = ...
    ext: str = ...
    suffixes: Any = ...
    @classmethod
    def makeButlerLocation(cls, path: Any, dataId: Any, mapper: Any, suffix: Optional[Any] = ..., storage: Optional[Any] = ...): ...
    def canStandardize(self, datasetType: Any): ...

class BypassPersistenceType(PersistenceType):
    python: str = ...
    @classmethod
    def makeButlerLocation(cls, path: Any, dataId: Any, mapper: Any, suffix: Optional[Any] = ..., storage: Optional[Any] = ...): ...

class ExposurePersistenceType(PersistenceType):
    python: str = ...
    cpp: str = ...
    storage: str = ...
    ext: str = ...
    suffixes: Any = ...
    @classmethod
    def makeButlerLocation(cls, path: Any, dataId: Any, mapper: Any, suffix: Optional[Any] = ..., storage: Optional[Any] = ...): ...

class SkyMapPersistenceType(PersistenceType):
    python: str = ...
    storage: str = ...
    ext: str = ...

class CatalogPersistenceType(PersistenceType):
    python: str = ...
    cpp: str = ...
    storage: str = ...
    ext: str = ...

class SimpleCatalogPersistenceType(CatalogPersistenceType):
    python: str = ...
    cpp: str = ...

class SourceCatalogPersistenceType(SimpleCatalogPersistenceType):
    python: str = ...
    cpp: str = ...

class ExposureCatalogPersistenceType(CatalogPersistenceType):
    python: str = ...
    cpp: str = ...

class PeakCatalogPersistenceType(CatalogPersistenceType):
    python: str = ...
    cpp: str = ...

class SimpleMapping:
    template: Any = ...
    keys: Any = ...
    persistence: Any = ...
    def __init__(self, persistence: Any, template: Optional[Any] = ..., keys: Optional[Any] = ...) -> None: ...
    def map(self, dataset: Any, root: Any, dataId: Any, mapper: Any, suffix: Optional[Any] = ..., storage: Optional[Any] = ...): ...

class RawMapping(SimpleMapping):
    template: str = ...
    keys: Any = ...
    def query(self, dataset: Any, index: Any, level: Any, format: Any, dataId: Any): ...

class SkyMapping(SimpleMapping):
    template: str = ...
    keys: Any = ...

class TempExpMapping(SimpleMapping):
    template: str = ...
    keys: Any = ...

class ForcedSrcMapping(RawMapping):
    template: str = ...
    keys: Any = ...

class MapperMeta(type):
    def __init__(cls, name: Any, bases: Any, dict_: Any) -> None: ...

class SimpleMapper(lsst.daf.persistence.Mapper, metaclass=MapperMeta):
    mappings: Any = ...
    levels: Any = ...
    storage: Any = ...
    root: Any = ...
    camera: Any = ...
    def __init__(self, root: Any, **kwargs: Any) -> None: ...
    def getDefaultLevel(self): ...
    def getKeys(self, datasetType: Any, level: Any): ...
    index: Any = ...
    def update(self) -> None: ...
    def keys(self): ...
    def bypass_camera(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def map_camera(self, dataId: Any, write: bool = ...): ...
    def std_calexp(self, item: Any, dataId: Any): ...
    @staticmethod
    def splitCcdExposureId(ccdExposureId: Any): ...
    def bypass_ccdExposureId(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_ccdExposureId_bits(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_deepCoaddId(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_deepCoaddId_bits(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_deepMergedCoaddId(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...
    def bypass_deepMergedCoaddId_bits(self, datasetType: Any, pythonType: Any, location: Any, dataId: Any): ...

def makeSimpleCamera(nX: Any, nY: Any, sizeX: Any, sizeY: Any, gapX: Any, gapY: Any, pixelSize: float = ..., plateScale: float = ..., radialDistortion: float = ...): ...
def makeDataRepo(root: Any): ...
