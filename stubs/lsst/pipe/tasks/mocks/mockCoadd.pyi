import lsst.pipe.base
from .mockObject import MockObjectTask as MockObjectTask
from .mockObservation import MockObservationTask as MockObservationTask
from .mockSelect import MockSelectImagesTask as MockSelectImagesTask
from lsst.pipe.tasks.assembleCoadd import AssembleCoaddTask as AssembleCoaddTask, CompareWarpAssembleCoaddTask as CompareWarpAssembleCoaddTask, SafeClipAssembleCoaddTask as SafeClipAssembleCoaddTask
from lsst.pipe.tasks.makeCoaddTempExp import MakeCoaddTempExpTask as MakeCoaddTempExpTask
from lsst.pipe.tasks.makeSkyMap import MakeSkyMapTask as MakeSkyMapTask
from typing import Any, Optional

class MockCoaddConfig(lsst.pex.config.Config):
    makeSkyMap: Any = ...
    mockObject: Any = ...
    mockObservation: Any = ...
    coaddName: Any = ...
    nObservations: Any = ...
    edgeBuffer: Any = ...
    def setupSkyMapPatches(self, nPatches: int = ..., patchSize: int = ..., pixelScale: Any = ...) -> None: ...
    def setDefaults(self) -> None: ...

class MockCoaddTask(lsst.pipe.base.CmdLineTask):
    ConfigClass: Any = ...
    schema: Any = ...
    objectIdKey: Any = ...
    exposureIdKey: Any = ...
    centroidInBBoxKey: Any = ...
    partialOverlapKey: Any = ...
    def __init__(self, **kwds: Any) -> None: ...
    def buildSkyMap(self, butler: Any): ...
    def buildTruthCatalog(self, butler: Optional[Any] = ..., skyMap: Optional[Any] = ..., tract: int = ...): ...
    def buildObservationCatalog(self, butler: Optional[Any] = ..., skyMap: Optional[Any] = ..., tract: int = ..., camera: Optional[Any] = ...): ...
    def buildInputImages(self, butler: Any, obsCatalog: Optional[Any] = ..., truthCatalog: Optional[Any] = ..., tract: int = ...): ...
    def buildAllInputs(self, butler: Any) -> None: ...
    def makeCoaddTask(self, cls: Any, assemblePsfMatched: bool = ...): ...
    def iterPatchRefs(self, butler: Any, tractInfo: Any) -> None: ...
    def buildCoadd(self, butler: Any, skyMap: Optional[Any] = ..., tract: int = ...) -> None: ...
    def buildMockCoadd(self, butler: Any, truthCatalog: Optional[Any] = ..., skyMap: Optional[Any] = ..., tract: int = ...) -> None: ...

def run(root: Any) -> None: ...
