import lsst.afw.table as pexConfig
import lsst.afw.table as pipeBase
from .functors import Column as Column, CompositeFunctor as CompositeFunctor, DecColumn as DecColumn, RAColumn as RAColumn
from .multiBandUtils import MergeSourcesRunner as MergeSourcesRunner, makeMergeArgumentParser as makeMergeArgumentParser
from .parquetTable import ParquetTable as ParquetTable
from lsst.coadd.utils.coaddDataIdContainer import CoaddDataIdContainer as CoaddDataIdContainer
from lsst.meas.base import SingleFrameMeasurementTask as SingleFrameMeasurementTask
from lsst.pipe.base import ArgumentParser as ArgumentParser, CmdLineTask as CmdLineTask, DataIdContainer as DataIdContainer, connectionTypes as connectionTypes
from typing import Any, Optional

def flattenFilters(df: Any, filterDict: Any, noDupCols: Any = ..., camelCase: bool = ...): ...

class WriteObjectTableConfig(pexConfig.Config):
    priorityList: Any = ...
    engine: Any = ...
    coaddName: Any = ...
    def validate(self) -> None: ...

class WriteObjectTableTask(CmdLineTask):
    ConfigClass: Any = ...
    RunnerClass: Any = ...
    inputDatasets: Any = ...
    outputDataset: str = ...
    def __init__(self, butler: Optional[Any] = ..., schema: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def runDataRef(self, patchRefList: Any) -> None: ...
    def readCatalog(self, patchRef: Any): ...
    def run(self, catalogs: Any, tract: Any, patch: Any): ...
    def write(self, patchRef: Any, catalog: Any) -> None: ...
    def writeMetadata(self, dataRefList: Any) -> None: ...

class WriteSourceTableConfig(pexConfig.Config):
    doApplyExternalPhotoCalib: Any = ...
    doApplyExternalSkyWcs: Any = ...

class WriteSourceTableTask(CmdLineTask):
    ConfigClass: Any = ...
    def runDataRef(self, dataRef: Any) -> None: ...
    def run(self, catalog: Any, ccdVisitId: Optional[Any] = ...): ...
    def addCalibColumns(self, catalog: Any, dataRef: Any): ...
    def writeMetadata(self, dataRef: Any) -> None: ...

class PostprocessAnalysis:
    parq: Any = ...
    functors: Any = ...
    filt: Any = ...
    flags: Any = ...
    refFlags: Any = ...
    def __init__(self, parq: Any, functors: Any, filt: Optional[Any] = ..., flags: Optional[Any] = ..., refFlags: Optional[Any] = ...) -> None: ...
    @property
    def defaultFuncs(self): ...
    @property
    def func(self): ...
    @property
    def noDupCols(self): ...
    @property
    def df(self): ...
    def compute(self, dropna: bool = ..., pool: Optional[Any] = ...): ...

class TransformCatalogBaseConfig(pexConfig.Config):
    functorFile: Any = ...

class TransformCatalogBaseTask(CmdLineTask):
    @property
    def outputDataset(self) -> None: ...
    @property
    def inputDataset(self) -> None: ...
    @property
    def ConfigClass(self) -> None: ...
    def runDataRef(self, dataRef: Any): ...
    def run(self, parq: Any, funcs: Optional[Any] = ..., dataId: Optional[Any] = ...): ...
    def getFunctors(self): ...
    def getAnalysis(self, parq: Any, funcs: Optional[Any] = ..., filt: Optional[Any] = ...): ...
    def transform(self, filt: Any, parq: Any, funcs: Any, dataId: Any): ...
    def write(self, df: Any, parqRef: Any) -> None: ...
    def writeMetadata(self, dataRef: Any) -> None: ...

class TransformObjectCatalogConfig(TransformCatalogBaseConfig):
    coaddName: Any = ...
    filterMap: Any = ...
    camelCase: Any = ...
    multilevelOutput: Any = ...

class TransformObjectCatalogTask(TransformCatalogBaseTask):
    ConfigClass: Any = ...
    inputDataset: str = ...
    outputDataset: str = ...
    def run(self, parq: Any, funcs: Optional[Any] = ..., dataId: Optional[Any] = ...): ...

class TractObjectDataIdContainer(CoaddDataIdContainer):
    refList: Any = ...
    def makeDataRefList(self, namespace: Any): ...

class ConsolidateObjectTableConfig(pexConfig.Config):
    coaddName: Any = ...

class ConsolidateObjectTableTask(CmdLineTask):
    ConfigClass: Any = ...
    inputDataset: str = ...
    outputDataset: str = ...
    def runDataRef(self, patchRefList: Any) -> None: ...
    def writeMetadata(self, dataRef: Any) -> None: ...

class TransformSourceTableConfig(TransformCatalogBaseConfig): ...

class TransformSourceTableTask(TransformCatalogBaseTask):
    ConfigClass: Any = ...
    inputDataset: str = ...
    outputDataset: str = ...
    def writeMetadata(self, dataRef: Any) -> None: ...

class ConsolidateVisitSummaryConnections(pipeBase.PipelineTaskConnections):
    calexp: Any = ...
    visitSummary: Any = ...

class ConsolidateVisitSummaryConfig(pipeBase.PipelineTaskConfig): ...

class ConsolidateVisitSummaryTask(pipeBase.PipelineTask, pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    def writeMetadata(self, dataRef: Any) -> None: ...
    def writeConfig(self, butler: Any, clobber: bool = ..., doBackup: bool = ...) -> None: ...
    def runDataRef(self, dataRefList: Any) -> None: ...
    def runQuantum(self, butlerQC: Any, inputRefs: Any, outputRefs: Any) -> None: ...

class VisitDataIdContainer(DataIdContainer):
    refList: Any = ...
    def makeDataRefList(self, namespace: Any): ...

class ConsolidateSourceTableConfig(pexConfig.Config): ...

class ConsolidateSourceTableTask(CmdLineTask):
    ConfigClass: Any = ...
    inputDataset: str = ...
    outputDataset: str = ...
    def runDataRef(self, dataRefList: Any) -> None: ...
    def writeMetadata(self, dataRef: Any) -> None: ...
    def writeConfig(self, butler: Any, clobber: bool = ..., doBackup: bool = ...) -> None: ...
