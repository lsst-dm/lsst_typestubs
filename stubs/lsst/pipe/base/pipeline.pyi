from . import pipelineIR
from .pipelineTask import PipelineTask
from lsst.daf.butler import DatasetType, NamedValueSet, Registry
from lsst.obs.base.instrument import Instrument
from typing import Any, Generator, Mapping, Optional, Set, Union

class LabelSpecifier:
    labels: Optional[Set[str]] = ...
    begin: Optional[str] = ...
    end: Optional[str] = ...
    def __post_init__(self) -> None: ...
    def __init__(self, labels: Any, begin: Any, end: Any) -> None: ...

class TaskDef:
    taskName: Any = ...
    config: Any = ...
    taskClass: Any = ...
    label: Any = ...
    connections: Any = ...
    def __init__(self, taskName: Any, config: Any, taskClass: Optional[Any] = ..., label: str = ...) -> None: ...
    @property
    def configDatasetName(self): ...
    @property
    def metadataDatasetName(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> Any: ...

class Pipeline:
    def __init__(self, description: str) -> None: ...
    @classmethod
    def fromFile(cls: Any, filename: str) -> Pipeline: ...
    def subsetFromLabels(self, labelSpecifier: LabelSpecifier) -> Pipeline: ...
    @classmethod
    def fromString(cls: Any, pipeline_string: str) -> Pipeline: ...
    @classmethod
    def fromIR(cls: Any, deserialized_pipeline: pipelineIR.PipelineIR) -> Pipeline: ...
    @classmethod
    def fromPipeline(cls: Any, pipeline: pipelineIR.PipelineIR) -> Pipeline: ...
    def addInstrument(self, instrument: Union[Instrument, str]) -> Any: ...
    def getInstrument(self): ...
    def addTask(self, task: Union[PipelineTask, str], label: str) -> Any: ...
    def removeTask(self, label: str) -> Any: ...
    def addConfigOverride(self, label: str, key: str, value: object) -> Any: ...
    def addConfigFile(self, label: str, filename: str) -> Any: ...
    def addConfigPython(self, label: str, pythonString: str) -> Any: ...
    def toFile(self, filename: str) -> Any: ...
    def toExpandedPipeline(self) -> Generator[TaskDef]: ...
    def __len__(self): ...
    def __eq__(self, other: Pipeline) -> Any: ...

class TaskDatasetTypes:
    initInputs: NamedValueSet[DatasetType]
    initOutputs: NamedValueSet[DatasetType]
    inputs: NamedValueSet[DatasetType]
    prerequisites: NamedValueSet[DatasetType]
    outputs: NamedValueSet[DatasetType]
    @classmethod
    def fromTaskDef(cls: Any, taskDef: TaskDef, registry: Registry) -> TaskDatasetTypes: ...
    def __init__(self, initInputs: Any, initOutputs: Any, inputs: Any, prerequisites: Any, outputs: Any) -> None: ...

class PipelineDatasetTypes:
    initInputs: NamedValueSet[DatasetType]
    initOutputs: NamedValueSet[DatasetType]
    initIntermediates: NamedValueSet[DatasetType]
    inputs: NamedValueSet[DatasetType]
    prerequisites: NamedValueSet[DatasetType]
    intermediates: NamedValueSet[DatasetType]
    outputs: NamedValueSet[DatasetType]
    byTask: Mapping[str, TaskDatasetTypes]
    @classmethod
    def fromPipeline(cls: Any, pipeline: Any, registry: Registry) -> PipelineDatasetTypes: ...
    def __init__(self, initInputs: Any, initOutputs: Any, initIntermediates: Any, inputs: Any, prerequisites: Any, intermediates: Any, outputs: Any, byTask: Any) -> None: ...
