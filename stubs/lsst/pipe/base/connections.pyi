import typing
from .config import PipelineTaskConfig
from .connectionTypes import BaseConnection
from collections import UserDict
from lsst.daf.butler import DatasetRef, DatasetType, NamedKeyDict, Quantum
from types import SimpleNamespace
from typing import Any, Iterable, Union

class ScalarError(TypeError): ...

class PipelineTaskConnectionDict(UserDict):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __setitem__(self, name: Any, value: Any) -> None: ...

class PipelineTaskConnectionsMetaclass(type):
    def __prepare__(name: Any, bases: Any, **kwargs: Any): ...
    def __new__(cls, name: Any, bases: Any, dct: Any, **kwargs: Any): ...
    def __init__(cls, name: Any, bases: Any, dct: Any, **kwargs: Any) -> None: ...

class QuantizedConnection(SimpleNamespace):
    def __init__(self, **kwargs: Any) -> None: ...
    def __setattr__(self, name: str, value: typing.Union[DatasetRef, typing.List[DatasetRef]]) -> Any: ...
    def __delattr__(self, name: Any) -> None: ...
    def __iter__(self) -> typing.Generator[typing.Tuple[str, typing.Union[DatasetRef, typing.List[DatasetRef]]], None, None]: ...
    def keys(self) -> typing.Generator[str, None, None]: ...

class InputQuantizedConnection(QuantizedConnection): ...
class OutputQuantizedConnection(QuantizedConnection): ...
class DeferredDatasetRef: ...

class PipelineTaskConnections(metaclass=PipelineTaskConnectionsMetaclass):
    inputs: Any = ...
    prerequisiteInputs: Any = ...
    outputs: Any = ...
    initInputs: Any = ...
    initOutputs: Any = ...
    allConnections: Any = ...
    config: Any = ...
    def __init__(self, *, config: PipelineTaskConfig=...) -> None: ...
    def buildDatasetRefs(self, quantum: Quantum) -> typing.Tuple[InputQuantizedConnection, OutputQuantizedConnection]: ...
    def adjustQuantum(self, datasetRefMap: NamedKeyDict[DatasetType, typing.Set[DatasetRef]]) -> NamedKeyDict[DatasetType, typing.Set[DatasetRef]]: ...

def iterConnections(connections: PipelineTaskConnections, connectionType: Union[str, Iterable[str]]) -> typing.Generator[BaseConnection, None, None]: ...
