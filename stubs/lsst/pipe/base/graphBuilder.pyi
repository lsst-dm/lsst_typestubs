from .pipeline import TaskDatasetTypes, TaskDef
from lsst.daf.butler import DataCoordinate, DatasetRef, DatasetType, DimensionGraph, DimensionUniverse, NamedKeyDict, Quantum
from lsst.daf.butler.registry.queries.exprParser import TreeVisitor
from typing import Any, Dict, Iterable, Iterator, Set

class _DatasetDict(NamedKeyDict[DatasetType, Dict[DataCoordinate, DatasetRef]]):
    universe: Any = ...
    def __init__(self, *args: Any, universe: DimensionGraph) -> None: ...
    @classmethod
    def fromDatasetTypes(cls: Any, datasetTypes: Iterable[DatasetType], universe: DimensionUniverse) -> _DatasetDict: ...
    @classmethod
    def fromSubset(cls: Any, datasetTypes: Iterable[DatasetType], first: _DatasetDict, *rest: _DatasetDict) -> _DatasetDict: ...
    @property
    def dimensions(self) -> DimensionGraph: ...
    def unpackSingleRefs(self) -> NamedKeyDict[DatasetType, DatasetRef]: ...
    def unpackMultiRefs(self) -> NamedKeyDict[DatasetType, DatasetRef]: ...
    def extract(self, datasetType: DatasetType, dataIds: Iterable[DataCoordinate]) -> Iterator[DatasetRef]: ...

class _QuantumScaffolding:
    task: Any = ...
    dataId: Any = ...
    inputs: Any = ...
    outputs: Any = ...
    prerequisites: Any = ...
    def __init__(self, task: _TaskScaffolding, dataId: DataCoordinate) -> None: ...
    def makeQuantum(self) -> Quantum: ...

class _TaskScaffolding:
    taskDef: Any = ...
    dimensions: Any = ...
    initInputs: Any = ...
    initOutputs: Any = ...
    inputs: Any = ...
    outputs: Any = ...
    prerequisites: Any = ...
    dataIds: Any = ...
    quanta: Any = ...
    def __init__(self, taskDef: TaskDef, parent: _PipelineScaffolding, datasetTypes: TaskDatasetTypes) -> None: ...
    def makeQuantumSet(self) -> Set[Quantum]: ...

class _PipelineScaffolding:
    tasks: Any = ...
    dimensions: Any = ...
    def __init__(self, pipeline: Any, registry: Any) -> None: ...
    initInputs: _DatasetDict
    initIntermediates: _DatasetDict
    initOutputs: _DatasetDict
    inputs: _DatasetDict
    intermediates: _DatasetDict
    outputs: _DatasetDict
    prerequisites: _DatasetDict
    def connectDataIds(self, registry: Any, collections: Any, userQuery: Any) -> None: ...
    def resolveDatasetRefs(self, registry: Any, collections: Any, run: Any, commonDataIds: Any, *, skipExisting: bool = ...) -> None: ...
    def makeQuantumGraph(self): ...

class _InstrumentFinder(TreeVisitor):
    instruments: Any = ...
    def __init__(self) -> None: ...
    def visitNumericLiteral(self, value: Any, node: Any): ...
    def visitStringLiteral(self, value: Any, node: Any): ...
    def visitTimeLiteral(self, value: Any, node: Any): ...
    def visitRangeLiteral(self, start: Any, stop: Any, stride: Any, node: Any): ...
    def visitIdentifier(self, name: Any, node: Any): ...
    def visitUnaryOp(self, operator: Any, operand: Any, node: Any): ...
    def visitBinaryOp(self, operator: Any, lhs: Any, rhs: Any, node: Any): ...
    def visitIsIn(self, lhs: Any, values: Any, not_in: Any, node: Any): ...
    def visitParens(self, expression: Any, node: Any): ...

class GraphBuilderError(Exception): ...
class OutputExistsError(GraphBuilderError): ...
class PrerequisiteMissingError(GraphBuilderError): ...

class GraphBuilder:
    registry: Any = ...
    dimensions: Any = ...
    skipExisting: Any = ...
    def __init__(self, registry: Any, skipExisting: bool = ...) -> None: ...
    def makeGraph(self, pipeline: Any, collections: Any, run: Any, userQuery: Any): ...
