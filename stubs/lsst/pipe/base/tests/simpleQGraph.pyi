from ... import base as pipeBase
from typing import Any

class SimpleInstrument:
    @staticmethod
    def getName(): ...
    def applyConfigOverrides(self, name: Any, config: Any) -> None: ...

class AddTaskConnections(pipeBase.PipelineTaskConnections):
    input: Any = ...
    output: Any = ...
    output2: Any = ...
    initout: Any = ...

class AddTaskConfig(pipeBase.PipelineTaskConfig):
    addend: Any = ...

class AddTask(pipeBase.PipelineTask):
    ConfigClass: Any = ...
    initout: Any = ...
    taskFactory: Any = ...
    def run(self, input: Any): ...

class AddTaskFactoryMock(pipeBase.TaskFactory):
    countExec: int = ...
    stopAt: Any = ...
    def __init__(self, stopAt: int = ...) -> None: ...
    def loadTaskClass(self, taskName: Any): ...
    def makeTask(self, taskClass: Any, config: Any, overrides: Any, butler: Any): ...
