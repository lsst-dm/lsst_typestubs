from typing import Any, Optional

class ShimButler:
    GENERATION: float = ...
    def __init__(self, butler3: Any) -> None: ...
    def datasetExists(self, datasetType: Any, dataId: Optional[Any] = ..., write: bool = ..., **rest: Any): ...
    def get(self, datasetType: Any, dataId: Optional[Any] = ..., immediate: bool = ..., **rest: Any): ...
    def put(self, obj: Any, datasetType: Any, dataId: Optional[Any] = ..., doBackup: bool = ..., **rest: Any) -> None: ...
    def dataRef(self, datasetType: Any, level: Optional[Any] = ..., dataId: Optional[Any] = ..., **rest: Any): ...

class ShimButlerSubset:
    GENERATION: float = ...
    butler: Any = ...
    datasetType: Any = ...
    def __init__(self, butler: Any, datasetType: Any, dataIds: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...

class ShimDataRef:
    GENERATION: float = ...
    butlerSubset: Any = ...
    dataId: Any = ...
    def __init__(self, butlerSubset: Any, dataId: Any) -> None: ...
    def get(self, datasetType: Optional[Any] = ..., **rest: Any): ...
    def put(self, obj: Any, datasetType: Optional[Any] = ..., doBackup: bool = ..., **rest: Any) -> None: ...
    def datasetExists(self, datasetType: Optional[Any] = ..., write: bool = ..., **rest: Any): ...
    def getButler(self): ...
