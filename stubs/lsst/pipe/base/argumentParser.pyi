import abc
import argparse
from typing import Any, Optional

class DataIdContainer:
    datasetType: Any = ...
    level: Any = ...
    idList: Any = ...
    refList: Any = ...
    def __init__(self, level: Optional[Any] = ...) -> None: ...
    def setDatasetType(self, datasetType: Any) -> None: ...
    def castDataIds(self, butler: Any) -> None: ...
    def makeDataRefList(self, namespace: Any) -> None: ...

class DataIdArgument:
    name: Any = ...
    datasetType: Any = ...
    level: Any = ...
    doMakeDataRefList: Any = ...
    ContainerClass: Any = ...
    argName: Any = ...
    def __init__(self, name: Any, datasetType: Any, level: Any, doMakeDataRefList: bool = ..., ContainerClass: Any = ...) -> None: ...
    @property
    def isDynamicDatasetType(self): ...
    def getDatasetType(self, namespace: Any): ...

class DynamicDatasetType(metaclass=abc.ABCMeta):
    def addArgument(self, parser: Any, idName: Any) -> None: ...
    @abc.abstractmethod
    def getDatasetType(self, namespace: Any) -> Any: ...

class DatasetArgument(DynamicDatasetType):
    name: Any = ...
    help: Any = ...
    default: Any = ...
    def __init__(self, name: Optional[Any] = ..., help: str = ..., default: Optional[Any] = ...) -> None: ...
    def getDatasetType(self, namespace: Any): ...
    def addArgument(self, parser: Any, idName: Any) -> None: ...

class ConfigDatasetType(DynamicDatasetType):
    name: Any = ...
    def __init__(self, name: Any) -> None: ...
    def getDatasetType(self, namespace: Any): ...

class ArgumentParser(argparse.ArgumentParser):
    requireOutput: bool = ...
    def __init__(self, name: Any, usage: str = ..., **kwargs: Any) -> None: ...
    def add_id_argument(self, name: Any, datasetType: Any, help: Any, level: Optional[Any] = ..., doMakeDataRefList: bool = ..., ContainerClass: Any = ...) -> None: ...
    def parse_args(self, config: Any, args: Optional[Any] = ..., log: Optional[Any] = ..., override: Optional[Any] = ...): ...
    def handleCamera(self, namespace: Any) -> None: ...
    def convert_arg_line_to_args(self, arg_line: Any) -> None: ...
    def addReuseOption(self, choices: Any) -> None: ...

class InputOnlyArgumentParser(ArgumentParser):
    requireOutput: bool = ...

class ConfigValueAction(argparse.Action):
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Any) -> None: ...

class ConfigFileAction(argparse.Action):
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Optional[Any] = ...) -> None: ...

class IdValueAction(argparse.Action):
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Any) -> None: ...

class LogLevelAction(argparse.Action):
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Any) -> None: ...

class ReuseAction(argparse.Action):
    def __call__(self, parser: Any, namespace: Any, value: Any, option_string: Any) -> None: ...
