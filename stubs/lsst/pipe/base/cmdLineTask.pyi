from .task import Task
from typing import Any, Optional

class TaskRunner:
    TIMEOUT: Any = ...
    TaskClass: Any = ...
    doReturnResults: Any = ...
    config: Any = ...
    log: Any = ...
    doRaise: Any = ...
    clobberConfig: Any = ...
    doBackup: Any = ...
    numProcesses: Any = ...
    timeout: Any = ...
    def __init__(self, TaskClass: Any, parsedCmd: Any, doReturnResults: bool = ...) -> None: ...
    def prepareForMultiProcessing(self) -> None: ...
    def run(self, parsedCmd: Any): ...
    @staticmethod
    def getTargetList(parsedCmd: Any, **kwargs: Any): ...
    def makeTask(self, parsedCmd: Optional[Any] = ..., args: Optional[Any] = ...): ...
    def precall(self, parsedCmd: Any): ...
    def __call__(self, args: Any): ...
    def runTask(self, task: Any, dataRef: Any, kwargs: Any): ...

class LegacyTaskRunner(TaskRunner):
    def runTask(self, task: Any, dataRef: Any, kwargs: Any): ...

class ButlerInitializedTaskRunner(TaskRunner):
    def makeTask(self, parsedCmd: Optional[Any] = ..., args: Optional[Any] = ...): ...

class CmdLineTask(Task):
    RunnerClass: Any = ...
    canMultiprocess: bool = ...
    @classmethod
    def applyOverrides(cls, config: Any) -> None: ...
    @classmethod
    def parseAndRun(cls, args: Optional[Any] = ..., config: Optional[Any] = ..., log: Optional[Any] = ..., doReturnResults: bool = ...): ...
    def writeConfig(self, butler: Any, clobber: bool = ..., doBackup: bool = ...) -> None: ...
    def writeSchemas(self, butler: Any, clobber: bool = ..., doBackup: bool = ...) -> None: ...
    def writeMetadata(self, dataRef: Any) -> None: ...
    def writePackageVersions(self, butler: Any, clobber: bool = ..., doBackup: bool = ..., dataset: str = ...): ...
