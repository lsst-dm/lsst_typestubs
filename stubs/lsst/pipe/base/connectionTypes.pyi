import typing
from lsst.daf.butler import CollectionSearch, DataCoordinate, DatasetRef, DatasetType, DimensionUniverse, Registry, StorageClass
from typing import Any, Callable, Iterable, Optional

class BaseConnection:
    name: str
    storageClass: str
    doc: str = ...
    multiple: bool = ...
    def __get__(self, inst: Any, klass: Any): ...
    def makeDatasetType(self, universe: DimensionUniverse, parentStorageClass: Optional[StorageClass]=...) -> Any: ...
    def __init__(self, name: Any, storageClass: Any, doc: Any, multiple: Any) -> None: ...

class DimensionedConnection(BaseConnection):
    dimensions: typing.Iterable[str] = ...
    isCalibration: bool = ...
    def __post_init__(self) -> None: ...
    def makeDatasetType(self, universe: DimensionUniverse, parentStorageClass: Optional[StorageClass]=...) -> Any: ...
    def __init__(self, name: Any, storageClass: Any, doc: Any, multiple: Any, dimensions: Any, isCalibration: Any) -> None: ...

class BaseInput(DimensionedConnection):
    deferLoad: bool = ...
    def __init__(self, name: Any, storageClass: Any, doc: Any, multiple: Any, dimensions: Any, isCalibration: Any, deferLoad: Any) -> None: ...

class Input(BaseInput):
    def __init__(self, name: Any, storageClass: Any, doc: Any, multiple: Any, dimensions: Any, isCalibration: Any, deferLoad: Any) -> None: ...

class PrerequisiteInput(BaseInput):
    lookupFunction: Optional[Callable[[DatasetType, Registry, DataCoordinate, CollectionSearch], Iterable[DatasetRef]]] = ...
    def __init__(self, name: Any, storageClass: Any, doc: Any, multiple: Any, dimensions: Any, isCalibration: Any, deferLoad: Any, lookupFunction: Any) -> None: ...

class Output(DimensionedConnection):
    def __init__(self, name: Any, storageClass: Any, doc: Any, multiple: Any, dimensions: Any, isCalibration: Any) -> None: ...

class InitInput(BaseConnection):
    def __init__(self, name: Any, storageClass: Any, doc: Any, multiple: Any) -> None: ...

class InitOutput(BaseConnection):
    def __init__(self, name: Any, storageClass: Any, doc: Any, multiple: Any) -> None: ...
