import collections.abc
from .config import Field
from typing import Any, Optional

class SelectionSet(collections.abc.MutableSet):
    def __init__(self, dict_: Any, value: Any, at: Optional[Any] = ..., label: str = ..., setHistory: bool = ...) -> None: ...
    def add(self, value: Any, at: Optional[Any] = ...) -> None: ...
    def discard(self, value: Any, at: Optional[Any] = ...) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    def __contains__(self, value: Any): ...

class ConfigInstanceDict(collections.abc.Mapping):
    __doc__: Any = ...
    def __init__(self, config: Any, field: Any) -> None: ...
    @property
    def types(self): ...
    def __contains__(self, k: Any): ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    names: Any = ...
    name: Any = ...
    active: Any = ...
    def __getitem__(self, k: Any, at: Optional[Any] = ..., label: str = ...): ...
    def __setitem__(self, k: Any, value: Any, at: Optional[Any] = ..., label: str = ...) -> None: ...
    def __setattr__(self, attr: Any, value: Any, at: Optional[Any] = ..., label: str = ...) -> None: ...
    def freeze(self) -> None: ...

class ConfigChoiceField(Field):
    instanceDictClass: Any = ...
    typemap: Any = ...
    multi: Any = ...
    def __init__(self, doc: Any, typemap: Any, default: Optional[Any] = ..., optional: bool = ..., multi: bool = ..., deprecated: Optional[Any] = ...) -> None: ...
    def __get__(self, instance: Any, owner: Optional[Any] = ...): ...
    def __set__(self, instance: Any, value: Any, at: Optional[Any] = ..., label: str = ...) -> None: ...
    def rename(self, instance: Any) -> None: ...
    def validate(self, instance: Any) -> None: ...
    def toDict(self, instance: Any): ...
    def freeze(self, instance: Any) -> None: ...
    def save(self, outfile: Any, instance: Any) -> None: ...
    def __deepcopy__(self, memo: Any): ...
