from .config import Field
from typing import Any, Optional

class ConfigurableInstance:
    def __init__(self, config: Any, field: Any, at: Optional[Any] = ..., label: str = ...) -> None: ...
    target: Any = ...
    ConfigClass: Any = ...
    value: Any = ...
    def apply(self, *args: Any, **kw: Any): ...
    def retarget(self, target: Any, ConfigClass: Optional[Any] = ..., at: Optional[Any] = ..., label: str = ...) -> None: ...
    def __getattr__(self, name: Any): ...
    def __setattr__(self, name: Any, value: Any, at: Optional[Any] = ..., label: str = ...) -> None: ...
    def __delattr__(self, name: Any, at: Optional[Any] = ..., label: str = ...) -> None: ...

class ConfigurableField(Field):
    def validateTarget(self, target: Any, ConfigClass: Any): ...
    target: Any = ...
    ConfigClass: Any = ...
    def __init__(self, doc: Any, target: Any, ConfigClass: Optional[Any] = ..., default: Optional[Any] = ..., check: Optional[Any] = ..., deprecated: Optional[Any] = ...) -> None: ...
    def __get__(self, instance: Any, owner: Optional[Any] = ..., at: Optional[Any] = ..., label: str = ...): ...
    def __set__(self, instance: Any, value: Any, at: Optional[Any] = ..., label: str = ...) -> None: ...
    def rename(self, instance: Any) -> None: ...
    def save(self, outfile: Any, instance: Any) -> None: ...
    def freeze(self, instance: Any) -> None: ...
    def toDict(self, instance: Any): ...
    def validate(self, instance: Any) -> None: ...
    def __deepcopy__(self, memo: Any): ...
