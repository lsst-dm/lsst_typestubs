import collections.abc
from .configChoiceField import ConfigChoiceField, ConfigInstanceDict
from typing import Any, Optional

class ConfigurableWrapper:
    ConfigClass: Any = ...
    def __init__(self, target: Any, ConfigClass: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...

class Registry(collections.abc.Mapping):
    def __init__(self, configBaseType: Any = ...) -> None: ...
    def register(self, name: Any, target: Any, ConfigClass: Optional[Any] = ...) -> None: ...
    def __getitem__(self, key: Any): ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    def __contains__(self, key: Any): ...
    def makeField(self, doc: Any, default: Optional[Any] = ..., optional: bool = ..., multi: bool = ...): ...

class RegistryAdaptor(collections.abc.Mapping):
    registry: Any = ...
    def __init__(self, registry: Any) -> None: ...
    def __getitem__(self, k: Any): ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def __contains__(self, k: Any): ...

class RegistryInstanceDict(ConfigInstanceDict):
    registry: Any = ...
    def __init__(self, config: Any, field: Any) -> None: ...
    target: Any = ...
    targets: Any = ...
    def apply(self, *args: Any, **kw: Any): ...
    def __setattr__(self, attr: Any, value: Any) -> None: ...

class RegistryField(ConfigChoiceField):
    instanceDictClass: Any = ...
    registry: Any = ...
    def __init__(self, doc: Any, registry: Any, default: Optional[Any] = ..., optional: bool = ..., multi: bool = ...) -> None: ...
    def __deepcopy__(self, memo: Any): ...

def makeRegistry(doc: Any, configBaseType: Any = ...): ...
def registerConfigurable(name: Any, registry: Any, ConfigClass: Optional[Any] = ...): ...
def registerConfig(name: Any, registry: Any, target: Any): ...
