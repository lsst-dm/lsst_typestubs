import collections.abc
from .config import Field
from typing import Any, Optional

class List(collections.abc.MutableSequence):
    __doc__: Any = ...
    def __init__(self, config: Any, field: Any, value: Any, at: Any, label: Any, setHistory: bool = ...) -> None: ...
    def validateItem(self, i: Any, x: Any) -> None: ...
    def list(self): ...
    history: Any = ...
    def __contains__(self, x: Any): ...
    def __len__(self): ...
    def __setitem__(self, i: Any, x: Any, at: Optional[Any] = ..., label: str = ..., setHistory: bool = ...) -> None: ...
    def __getitem__(self, i: Any): ...
    def __delitem__(self, i: Any, at: Optional[Any] = ..., label: str = ..., setHistory: bool = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def insert(self, i: Any, x: Any, at: Optional[Any] = ..., label: str = ..., setHistory: bool = ...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __setattr__(self, attr: Any, value: Any, at: Optional[Any] = ..., label: str = ...) -> None: ...

class ListField(Field):
    listCheck: Any = ...
    itemCheck: Any = ...
    itemtype: Any = ...
    length: Any = ...
    minLength: Any = ...
    maxLength: Any = ...
    def __init__(self, doc: Any, dtype: Any, default: Optional[Any] = ..., optional: bool = ..., listCheck: Optional[Any] = ..., itemCheck: Optional[Any] = ..., length: Optional[Any] = ..., minLength: Optional[Any] = ..., maxLength: Optional[Any] = ..., deprecated: Optional[Any] = ...) -> None: ...
    def validate(self, instance: Any) -> None: ...
    def __set__(self, instance: Any, value: Any, at: Optional[Any] = ..., label: str = ...) -> None: ...
    def toDict(self, instance: Any): ...
