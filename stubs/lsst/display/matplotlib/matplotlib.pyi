import matplotlib.colors as mpColors
import lsst.geom as virtualDevice
from matplotlib.blocking_input import BlockingInput
from typing import Any, Optional

interactiveBackends: Any
matplotlibCtypes: Any

def mapCtype(ctype: Any): ...

class DisplayImpl(virtualDevice.DisplayImpl):
    def __init__(self, display: Any, verbose: bool = ..., interpretMaskBits: bool = ..., mtvOrigin: Any = ..., fastMaskDisplay: bool = ..., reopenPlot: bool = ..., useSexagesimal: bool = ..., dpi: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def savefig(self, *args: Any, **kwargs: Any) -> None: ...
    def show_colorbar(self, show: bool = ..., where: str = ..., axSize: str = ..., axPad: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def useSexagesimal(self, useSexagesimal: Any) -> None: ...
    def wait(self, prompt: str = ..., allowPdb: bool = ...): ...

class BlockingKeyInput(BlockingInput):
    def __init__(self, fig: Any) -> None: ...
    ev: Any = ...
    def post_event(self) -> None: ...
    def __call__(self, timeout: int = ...): ...

class Normalize(mpColors.Normalize):
    def __call__(self, value: Any, clip: Optional[Any] = ...): ...

class AsinhNormalize(Normalize):
    mapping: Any = ...
    def __init__(self, minimum: int = ..., dataRange: int = ..., Q: int = ...) -> None: ...

class AsinhZScaleNormalize(AsinhNormalize):
    mapping: Any = ...
    def __init__(self, image: Optional[Any] = ..., Q: int = ...) -> None: ...

class ZScaleNormalize(Normalize):
    mapping: Any = ...
    def __init__(self, image: Optional[Any] = ..., nSamples: int = ..., contrast: float = ...) -> None: ...

class LinearNormalize(Normalize):
    mapping: Any = ...
    def __init__(self, minimum: int = ..., maximum: int = ...) -> None: ...
