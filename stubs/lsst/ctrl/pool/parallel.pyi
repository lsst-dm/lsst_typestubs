import argparse
from lsst.pipe.base import CmdLineTask, TaskRunner
from typing import Any, Optional

class Batch:
    outputDir: Any = ...
    numNodes: Any = ...
    numProcsPerNode: Any = ...
    numCores: Any = ...
    queue: Any = ...
    jobName: Any = ...
    walltime: Any = ...
    dryrun: Any = ...
    doExec: Any = ...
    mpiexec: Any = ...
    submit: Any = ...
    options: Any = ...
    verbose: Any = ...
    def __init__(self, outputDir: Optional[Any] = ..., numNodes: int = ..., numProcsPerNode: int = ..., numCores: int = ..., queue: Optional[Any] = ..., jobName: Optional[Any] = ..., walltime: float = ..., dryrun: bool = ..., doExec: bool = ..., mpiexec: str = ..., submit: Optional[Any] = ..., options: Optional[Any] = ..., verbose: bool = ...) -> None: ...
    def shebang(self): ...
    def preamble(self, command: Any, walltime: Optional[Any] = ...) -> None: ...
    def execution(self, command: Any): ...
    def createScript(self, command: Any, walltime: Optional[Any] = ...): ...
    def submitCommand(self, scriptName: Any) -> None: ...
    def run(self, command: Any, walltime: Optional[Any] = ...): ...

class PbsBatch(Batch):
    def preamble(self, walltime: Optional[Any] = ...): ...
    def submitCommand(self, scriptName: Any): ...

class SlurmBatch(Batch):
    @staticmethod
    def formatWalltime(walltime: Any): ...
    def preamble(self, walltime: Optional[Any] = ...): ...
    def submitCommand(self, scriptName: Any): ...

class SmpBatch(Batch):
    numNodes: int = ...
    numCores: Any = ...
    numProcsPerNode: int = ...
    mpiexec: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def preamble(self, walltime: Optional[Any] = ...): ...
    def submitCommand(self, scriptName: Any): ...

BATCH_TYPES: Any

class BatchArgumentParser(argparse.ArgumentParser):
    def __init__(self, parent: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def parse_args(self, config: Optional[Any] = ..., args: Optional[Any] = ..., namespace: Optional[Any] = ..., **kwargs: Any): ...
    def makeBatch(self, args: Any): ...
    def format_help(self): ...
    def format_usage(self): ...

class BatchCmdLineTask(CmdLineTask):
    @classmethod
    def parseAndSubmit(cls, args: Optional[Any] = ..., **kwargs: Any): ...
    @classmethod
    def batchWallTime(cls, time: Any, parsedCmd: Any, numCores: Any): ...
    @classmethod
    def batchCommand(cls, args: Any): ...
    def logOperation(self, operation: Any, catch: bool = ..., trace: bool = ...) -> None: ...

class BatchPoolTask(BatchCmdLineTask):
    @classmethod
    def parseAndRun(cls, *args: Any, **kwargs: Any) -> None: ...

class BatchTaskRunner(TaskRunner):
    numProcesses: int = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def run(self, parsedCmd: Any): ...
    def __call__(self, cache: Any, args: Any): ...

class BatchParallelTask(BatchCmdLineTask):
    RunnerClass: Any = ...
    @classmethod
    def parseAndRun(cls, *args: Any, **kwargs: Any): ...
