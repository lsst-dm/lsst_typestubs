import mpi4py.MPI as mpi
import threading
from lsst.pipe.base import Struct
from typing import Any, Optional

NODE: Any

def getBatchType(): ...
def setBatchType(batchType: Any) -> None: ...
def abortOnError(func: Any): ...

class PickleHolder:
    def __new__(cls, hold: Optional[Any] = ...): ...
    obj: Any = ...
    def __init__(self, hold: Optional[Any] = ...) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, excType: Any, excVal: Any, tb: Any) -> None: ...

class Comm(mpi.Intracomm):
    def __new__(cls, comm: Any = ..., recvSleep: float = ..., barrierSleep: float = ...): ...
    def recv(self, obj: Optional[Any] = ..., source: int = ..., tag: int = ..., status: Optional[Any] = ...): ...
    def send(self, obj: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
    def Barrier(self, tag: int = ...) -> None: ...
    def broadcast(self, value: Any, root: int = ...): ...
    def scatter(self, dataList: Any, root: int = ..., tag: int = ...): ...
    def Free(self) -> None: ...

class NoOp: ...

class Tags:
    def __init__(self, *nameList: Any) -> None: ...
    def __reduce__(self): ...

class Cache(Struct):
    def __init__(self, comm: Any) -> None: ...

class SingletonMeta(type):
    def __init__(cls, name: Any, bases: Any, dict_: Any) -> None: ...
    def __call__(cls, *args: Any, **kwargs: Any): ...

class Debugger(metaclass=SingletonMeta):
    enabled: bool = ...
    out: Any = ...
    def __init__(self) -> None: ...
    def log(self, source: Any, msg: Any, *args: Any) -> None: ...

class ReductionThread(threading.Thread):
    def __init__(self, reducer: Any, initial: Optional[Any] = ..., sleep: float = ...) -> None: ...
    def run(self) -> None: ...
    def add(self, data: Any) -> None: ...
    def join(self): ...

class PoolNode(metaclass=SingletonMeta):
    comm: Any = ...
    rank: Any = ...
    root: Any = ...
    size: Any = ...
    debugger: Any = ...
    node: Any = ...
    def __init__(self, comm: Optional[Any] = ..., root: int = ...) -> None: ...
    def log(self, msg: Any, *args: Any) -> None: ...
    def isMaster(self): ...
    def storeSet(self, context: Any, **kwargs: Any) -> None: ...
    def storeDel(self, context: Any, *nameList: Any) -> None: ...
    def storeClear(self, context: Any) -> None: ...
    def cacheClear(self, context: Any) -> None: ...
    def cacheList(self, context: Any) -> None: ...
    def storeList(self, context: Any) -> None: ...

class PoolMaster(PoolNode):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __del__(self) -> None: ...
    def log(self, msg: Any, *args: Any) -> None: ...
    def command(self, cmd: Any) -> None: ...
    def map(self, context: Any, func: Any, dataList: Any, *args: Any, **kwargs: Any): ...
    def reduce(self, context: Any, reducer: Any, func: Any, dataList: Any, *args: Any, **kwargs: Any): ...
    def mapNoBalance(self, context: Any, func: Any, dataList: Any, *args: Any, **kwargs: Any): ...
    def reduceNoBalance(self, context: Any, reducer: Any, func: Any, dataList: Any, *args: Any, **kwargs: Any): ...
    def mapToPrevious(self, context: Any, func: Any, dataList: Any, *args: Any, **kwargs: Any): ...
    def reduceToPrevious(self, context: Any, reducer: Any, func: Any, dataList: Any, *args: Any, **kwargs: Any): ...
    def storeSet(self, context: Any, **kwargs: Any) -> None: ...
    def storeDel(self, context: Any, *nameList: Any) -> None: ...
    def storeClear(self, context: Any) -> None: ...
    def cacheClear(self, context: Any) -> None: ...
    def cacheList(self, context: Any) -> None: ...
    def storeList(self, context: Any) -> None: ...
    def exit(self) -> None: ...

class PoolSlave(PoolNode):
    def log(self, msg: Any, *args: Any) -> None: ...
    def run(self) -> None: ...
    def reduce(self) -> None: ...
    def mapNoBalance(self) -> None: ...
    def mapToPrevious(self) -> None: ...
    def storeSet(self) -> None: ...
    def storeDel(self) -> None: ...
    def storeClear(self) -> None: ...
    def cacheClear(self) -> None: ...
    def cacheList(self) -> None: ...
    def storeList(self) -> None: ...
    def exit(self): ...

class PoolWrapperMeta(type):
    def __call__(cls, context: str = ...): ...

class PoolWrapper(metaclass=PoolWrapperMeta):
    def __init__(self, context: str = ...) -> None: ...
    def __getattr__(self, name: Any): ...

class Pool(PoolWrapper): ...

def startPool(comm: Optional[Any] = ..., root: int = ..., killSlaves: bool = ...): ...
