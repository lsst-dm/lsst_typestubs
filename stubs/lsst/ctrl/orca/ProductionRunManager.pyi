import threading
from .EnvString import EnvString as EnvString
from .ProductionRunConfigurator import ProductionRunConfigurator as ProductionRunConfigurator
from .ServiceHandler import ServiceHandler as ServiceHandler
from .exceptions import ConfigurationError as ConfigurationError, MultiIssueConfigurationError as MultiIssueConfigurationError
from .multithreading import SharedData as SharedData
from http.server import HTTPServer
from lsst.ctrl.orca.NamedClassFactory import NamedClassFactory as NamedClassFactory
from lsst.ctrl.orca.StatusListener import StatusListener as StatusListener
from lsst.ctrl.orca.config.ProductionConfig import ProductionConfig as ProductionConfig
from socketserver import ThreadingMixIn
from typing import Any, Optional

def MakeServiceHandlerClass(productionRunManager: Any, runid: Any): ...

class ProductionRunManager:
    runid: Any = ...
    fullConfigFilePath: str = ...
    config: Any = ...
    repository: Any = ...
    def __init__(self, runid: Any, configFileName: Any, repository: Optional[Any] = ...) -> None: ...
    def getRunId(self): ...
    def configure(self, workflowVerbosity: Optional[Any] = ...) -> None: ...
    def runProduction(self, skipConfigCheck: bool = ..., workflowVerbosity: Optional[Any] = ...): ...
    def isRunning(self): ...
    def isDone(self): ...
    def isRunnable(self): ...
    def createConfigurator(self, runid: Any, configFile: Any): ...
    def checkConfiguration(self, care: int = ..., issueExc: Optional[Any] = ...) -> None: ...
    def stopProduction(self, urgency: Any, timeout: int = ...): ...
    def getWorkflowNames(self): ...
    def getWorkflowManager(self, name: Any): ...
    class ThreadedServer(ThreadingMixIn, HTTPServer):
        def server_bind(self) -> None: ...
        manager: Any = ...
        def setManager(self, manager: Any) -> None: ...
        def serve(self) -> None: ...
    class _ServiceEndpoint(threading.Thread):
        server: Any = ...
        def __init__(self, parent: Any, runid: Any, pollingIntv: float = ..., listenTimeout: int = ...) -> None: ...
        def run(self) -> None: ...
    def getShutdownThread(self): ...
    def joinShutdownThread(self) -> None: ...
