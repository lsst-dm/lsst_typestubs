from .quantumGraphExecutor import QuantumGraphExecutor
from typing import Any, Optional

class _Job:
    qnode: Any = ...
    process: Any = ...
    state: Any = ...
    started: Any = ...
    def __init__(self, qnode: Any) -> None: ...
    def start(self, butler: Any, quantumExecutor: Any, startMethod: Optional[Any] = ...) -> None: ...
    def stop(self) -> None: ...
    def cleanup(self) -> None: ...

class _JobList:
    jobs: Any = ...
    def __init__(self, iterable: Any) -> None: ...
    def pending(self): ...
    def running(self): ...
    def finishedNodes(self): ...
    def failedNodes(self): ...
    def timedOutIds(self): ...
    def cleanup(self) -> None: ...

class MPGraphExecutorError(Exception): ...
class MPTimeoutError(MPGraphExecutorError): ...

class MPGraphExecutor(QuantumGraphExecutor):
    numProc: Any = ...
    timeout: Any = ...
    quantumExecutor: Any = ...
    failFast: Any = ...
    executionGraphFixup: Any = ...
    startMethod: Any = ...
    def __init__(self, numProc: Any, timeout: Any, quantumExecutor: Any, *, startMethod: Optional[Any] = ..., failFast: bool = ..., executionGraphFixup: Optional[Any] = ...) -> None: ...
    def execute(self, graph: Any, butler: Any) -> None: ...
