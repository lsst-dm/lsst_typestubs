from .quantumGraphExecutor import QuantumExecutor
from typing import Any

class SingleQuantumExecutor(QuantumExecutor):
    taskFactory: Any = ...
    skipExisting: Any = ...
    enableLsstDebug: Any = ...
    clobberPartialOutputs: Any = ...
    def __init__(self, taskFactory: Any, skipExisting: bool = ..., clobberPartialOutputs: bool = ..., enableLsstDebug: bool = ...) -> None: ...
    def execute(self, taskDef: Any, quantum: Any, butler: Any) -> None: ...
    def setupLogging(self, taskDef: Any, quantum: Any) -> None: ...
    def checkExistingOutputs(self, quantum: Any, butler: Any, taskDef: Any): ...
    def makeTask(self, taskClass: Any, config: Any, butler: Any): ...
    def updatedQuantumInputs(self, quantum: Any, butler: Any): ...
    def runQuantum(self, task: Any, quantum: Any, taskDef: Any, butler: Any) -> None: ...
    def initGlobals(self, quantum: Any, butler: Any) -> None: ...
