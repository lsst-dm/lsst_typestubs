from abc import ABCMeta
from enum import Enum
from typing import Any, Optional

class WmsStates(Enum):
    UNKNOWN: int = ...
    MISFIT: int = ...
    UNREADY: int = ...
    READY: int = ...
    PENDING: int = ...
    RUNNING: int = ...
    DELETED: int = ...
    HELD: int = ...
    SUCCEEDED: int = ...
    FAILED: int = ...

class WmsJobReport:
    wms_id: str
    name: str
    label: str
    state: WmsStates
    def __init__(self, wms_id: Any, name: Any, label: Any, state: Any) -> None: ...

class WmsRunReport:
    wms_id: str
    path: str
    label: str
    run: str
    project: str
    campaign: str
    payload: str
    operator: str
    run_summary: str
    state: WmsStates
    jobs: list
    total_number_jobs: int
    job_state_counts: dict
    def __init__(self, wms_id: Any, path: Any, label: Any, run: Any, project: Any, campaign: Any, payload: Any, operator: Any, run_summary: Any, state: Any, jobs: Any, total_number_jobs: Any, job_state_counts: Any) -> None: ...

class BaseWmsService:
    config: Any = ...
    def __init__(self, config: Any) -> None: ...
    def prepare(self, config: Any, generic_workflow: Any, out_prefix: Optional[Any] = ...) -> None: ...
    def submit(self, workflow: Any) -> None: ...
    def report(self, wms_workflow_id: Optional[Any] = ..., user: Optional[Any] = ..., hist: int = ..., pass_thru: Optional[Any] = ...) -> None: ...

class BaseWmsWorkflow(metaclass=ABCMeta):
    name: Any = ...
    config: Any = ...
    service_class: Any = ...
    run_id: Any = ...
    submit_path: Any = ...
    def __init__(self, name: Any, config: Any) -> None: ...
    @classmethod
    def from_generic_workflow(cls, config: Any, generic_workflow: Any, out_prefix: Any, service_class: Any) -> None: ...
    def write(self, out_prefix: Any) -> None: ...
