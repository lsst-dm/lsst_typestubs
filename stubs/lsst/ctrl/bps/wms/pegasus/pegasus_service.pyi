from lsst.ctrl.bps.bps_utils import chdir as chdir
from lsst.ctrl.bps.wms.htcondor.htcondor_service import HTCondorService as HTCondorService
from lsst.ctrl.bps.wms.htcondor.lssthtc import htc_write_attribs as htc_write_attribs
from lsst.ctrl.bps.wms_service import BaseWmsService as BaseWmsService, BaseWmsWorkflow as BaseWmsWorkflow
from typing import Any, Optional

class PegasusService(BaseWmsService):
    def prepare(self, config: Any, generic_workflow: Any, out_prefix: Optional[Any] = ...): ...
    def submit(self, workflow: Any) -> None: ...
    def report(self, wms_workflow_id: Optional[Any] = ..., user: Optional[Any] = ..., hist: int = ..., pass_thru: Optional[Any] = ...): ...

class PegasusWorkflow(BaseWmsWorkflow):
    dax: Any = ...
    run_attrs: Any = ...
    replica_catalog: Any = ...
    sites_catalog: Any = ...
    transformation_catalog: Any = ...
    properties_filename: Any = ...
    dax_filename: Any = ...
    def __init__(self, name: Any, config: Any) -> None: ...
    @classmethod
    def from_generic_workflow(cls, config: Any, generic_workflow: Any, out_prefix: Any, service_class: Any): ...
    def create_job(self, generic_workflow: Any, gwf_job: Any, peg_files: Any): ...
    submit_path: Any = ...
    def write(self, out_prefix: Any) -> None: ...
    run_id: Any = ...
    def run_pegasus_plan(self, out_prefix: Any, run_attr: Any) -> None: ...
