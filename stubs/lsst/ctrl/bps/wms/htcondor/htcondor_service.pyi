from .lssthtc import HTCDag as HTCDag, HTCJob as HTCJob, condor_history as condor_history, condor_q as condor_q, htc_escape as htc_escape, htc_jobs_to_wms_report as htc_jobs_to_wms_report, htc_submit_dag as htc_submit_dag, read_dag_node_log as read_dag_node_log, read_node_status as read_node_status
from lsst.ctrl.bps.bps_utils import chdir as chdir
from lsst.ctrl.bps.generic_workflow import GenericWorkflow as GenericWorkflow
from lsst.ctrl.bps.wms_service import BaseWmsService as BaseWmsService, BaseWmsWorkflow as BaseWmsWorkflow
from typing import Any, Optional

class HTCondorService(BaseWmsService):
    def prepare(self, config: Any, generic_workflow: Any, out_prefix: Optional[Any] = ...): ...
    def submit(self, workflow: Any) -> None: ...
    def report(self, wms_workflow_id: Optional[Any] = ..., user: Optional[Any] = ..., hist: int = ..., pass_thru: Optional[Any] = ...): ...

class HTCondorWorkflow(BaseWmsWorkflow):
    dag: Any = ...
    def __init__(self, name: Any, config: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_generic_workflow(cls, config: Any, generic_workflow: Any, out_prefix: Any, service_class: Any): ...
    submit_path: Any = ...
    def write(self, out_prefix: Any) -> None: ...

def translate_job_cmds(generic_workflow_job: Any): ...
def handle_job_inputs(generic_workflow: GenericWorkflow, job_name: str, out_prefix: Any) -> Any: ...
