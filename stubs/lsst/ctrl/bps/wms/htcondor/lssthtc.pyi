import networkx
from collections.abc import MutableMapping
from enum import IntEnum
from typing import Any, Optional

class DagStatus(IntEnum):
    OK: int = ...
    ERROR: int = ...
    FAILED: int = ...
    ABORTED: int = ...
    REMOVED: int = ...
    CYCLE: int = ...
    SUSPENDED: int = ...

class JobStatus(IntEnum):
    UNEXPANDED: int = ...
    IDLE: int = ...
    RUNNING: int = ...
    REMOVED: int = ...
    COMPLETED: int = ...
    HELD: int = ...
    TRANSFERRING_OUTPUT: int = ...
    SUSPENDED: int = ...

class RestrictedDict(MutableMapping):
    valid_keys: Any = ...
    data: Any = ...
    def __init__(self, valid_keys: Any, init_data: Any = ...) -> None: ...
    def __getitem__(self, key: Any): ...
    def __delitem__(self, key: Any) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...

def htc_escape(value: Any): ...
def htc_write_attribs(stream: Any, attrs: Any) -> None: ...
def htc_write_condor_file(filename: Any, job_name: Any, job: Any, job_attrs: Any) -> None: ...
def htc_version(): ...
def htc_submit_dag(htc_dag: Any, submit_options: Optional[Any] = ...) -> None: ...
def htc_submit_dag_old(dag_filename: Any, submit_options: Optional[Any] = ...): ...
def htc_write_job_commands(stream: Any, name: Any, jobs: Any) -> None: ...

class HTCJob:
    name: Any = ...
    label: Any = ...
    cmds: Any = ...
    dagcmds: Any = ...
    attrs: Any = ...
    filename: Any = ...
    subfile: Any = ...
    def __init__(self, name: Any, label: Optional[Any] = ..., initcmds: Any = ..., initdagcmds: Any = ..., initattrs: Optional[Any] = ...) -> None: ...
    def add_job_cmds(self, new_commands: Any) -> None: ...
    def add_dag_cmds(self, new_commands: Any) -> None: ...
    def add_job_attrs(self, new_attrs: Any) -> None: ...
    def write_submit_file(self, submit_path: Any, job_subdir: str = ...) -> None: ...
    def write_dag_commands(self, stream: Any) -> None: ...
    def dump(self, fh: Any) -> None: ...

class HTCDag(networkx.DiGraph):
    def __init__(self, data: Optional[Any] = ..., name: str = ...) -> None: ...
    def add_attribs(self, attribs: Optional[Any] = ...) -> None: ...
    def add_job(self, job: Any, parent_names: Optional[Any] = ..., child_names: Optional[Any] = ...) -> None: ...
    def add_job_relationships(self, parents: Any, children: Any) -> None: ...
    def del_job(self, job_name: Any) -> None: ...
    def write(self, submit_path: Any, job_subdir: str = ...) -> None: ...
    def dump(self, fh: Any) -> None: ...
    def write_dot(self, filename: Any) -> None: ...

def htc_job_status_to_wms_state(job: Any): ...
def htc_jobs_to_wms_report(jobs: Any): ...
def condor_q(constraint: Optional[Any] = ..., schedd: Optional[Any] = ...): ...
def condor_history(constraint: Optional[Any] = ..., schedd: Optional[Any] = ...): ...
def save_node_status(run_report: Any, node_status: Any) -> None: ...
def read_node_status(path: Any): ...
def read_dag_node_log(filename: Any): ...
