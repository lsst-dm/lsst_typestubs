import networkx as nx
from .bps_draw import draw_networkx_dot as draw_networkx_dot
from lsst.daf.butler import DatasetRef as DatasetRef
from lsst.daf.butler.core.utils import iterable as iterable
from lsst.pipe.base import QuantumGraph as QuantumGraph
from typing import Any, Optional

class GenericWorkflowFile:
    name: str
    wms_transfer: bool
    src_uri: None
    dataset_ref: None
    dest_uri: None
    logical_file_name: None
    def __init__(self, name: str, wms_transfer: bool=..., src_uri: Any=..., dataset_ref: Any=..., dest_uri: Any=..., logical_file_name: Any=...) -> None: ...
    def __hash__(self) -> Any: ...

class GenericWorkflowJob:
    name: str
    label: Optional[str]
    cmdline: Optional[str]
    request_memory: Optional[int]
    request_cpus: Optional[int]
    request_disk: Optional[int]
    request_walltime: Optional[str]
    compute_site: Optional[str]
    mail_to: Optional[str]
    when_to_mail: Optional[str]
    number_of_retries: Optional[int]
    retry_unless_exit: Optional[int]
    abort_on_value: Optional[int]
    abort_return_value: Optional[int]
    priority: Optional[str]
    category: Optional[str]
    pre_cmdline: Optional[str]
    post_cmdline: Optional[str]
    profile: Optional[dict]
    attrs: Optional[dict]
    environment: Optional[dict]
    quantum_graph: Optional[QuantumGraph]
    quanta_summary: Optional[str]
    def __init__(self, name: str) -> None: ...
    def __hash__(self) -> Any: ...

class GenericWorkflow(nx.DiGraph):
    run_attrs: Any = ...
    run_id: Any = ...
    def __init__(self, name: Any, incoming_graph_data: Optional[Any] = ..., **attr: Any) -> None: ...
    @property
    def name(self): ...
    def get_files(self, data: bool = ..., transfer_only: bool = ...): ...
    def add_job(self, job: Any, parent_names: Optional[Any] = ..., child_names: Optional[Any] = ...) -> None: ...
    def add_node(self, node_for_adding: Any, **attr: Any) -> None: ...
    def add_job_relationships(self, parents: Any, children: Any) -> None: ...
    def add_edges_from(self, ebunch_to_add: Any, **attr: Any) -> None: ...
    def add_edge(self, u_of_edge: str, v_of_edge: str, **attr: Any) -> Any: ...
    def get_job(self, job_name: str) -> Any: ...
    def del_job(self, job_name: str) -> Any: ...
    def add_job_inputs(self, job_name: str, files: Any) -> Any: ...
    def get_file(self, name: Any): ...
    def get_job_inputs(self, job_name: Any, data: bool = ..., transfer_only: bool = ...): ...
    def add_job_outputs(self, job_name: Any, files: Any) -> None: ...
    def get_job_outputs(self, job_name: Any, data: bool = ..., transfer_only: bool = ...): ...
    def draw(self, stream: Any, format_: str = ...) -> None: ...
    def save(self, stream: Any, format_: str = ...) -> None: ...
    @classmethod
    def load(cls, stream: Any, format_: str = ...): ...
    def validate(self) -> None: ...
