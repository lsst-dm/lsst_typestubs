from typing import Any, Optional

WHITE: str
BLACK: str
RED: str
GREEN: str
BLUE: str
CYAN: str
MAGENTA: str
YELLOW: str
ORANGE: str
IGNORE: str

class Display:
    frame: Any = ...
    name: Any = ...
    def __init__(self, frame: Optional[Any] = ..., backend: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
    def __enter__(self): ...
    def __exit__(self, *args: Any) -> None: ...
    def __del__(self) -> None: ...
    def __getattr__(self, name: Any): ...
    def close(self) -> None: ...
    @property
    def verbose(self): ...
    @verbose.setter
    def verbose(self, value: Any) -> None: ...
    @staticmethod
    def setDefaultBackend(backend: Any) -> None: ...
    @staticmethod
    def getDefaultBackend(): ...
    @staticmethod
    def setDefaultFrame(frame: int = ...) -> None: ...
    @staticmethod
    def getDefaultFrame(): ...
    @staticmethod
    def incrDefaultFrame(): ...
    @staticmethod
    def setDefaultMaskTransparency(maskPlaneTransparency: Any = ...) -> None: ...
    @staticmethod
    def setDefaultMaskPlaneColor(name: Optional[Any] = ..., color: Optional[Any] = ...) -> None: ...
    @staticmethod
    def setDefaultImageColormap(cmap: Any) -> None: ...
    def setImageColormap(self, cmap: Any) -> None: ...
    @staticmethod
    def getDisplay(frame: Optional[Any] = ..., backend: Optional[Any] = ..., create: bool = ..., verbose: bool = ..., *args: Any, **kwargs: Any): ...
    @staticmethod
    def delAllDisplays() -> None: ...
    def maskColorGenerator(self, omitBW: bool = ...) -> None: ...
    def setMaskPlaneColor(self, name: Any, color: Optional[Any] = ...) -> None: ...
    def getMaskPlaneColor(self, name: Optional[Any] = ...): ...
    def setMaskTransparency(self, transparency: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    def getMaskTransparency(self, name: Optional[Any] = ...): ...
    def show(self): ...
    def mtv(self, data: Any, title: str = ..., wcs: Optional[Any] = ...) -> None: ...
    class _Buffering:
        def __init__(self, _impl: Any) -> None: ...
        def __enter__(self) -> None: ...
        def __exit__(self, *args: Any) -> None: ...
    def Buffering(self): ...
    def flush(self) -> None: ...
    def erase(self) -> None: ...
    def dot(self, symb: Any, c: Any, r: Any, size: int = ..., ctype: Optional[Any] = ..., origin: Any = ..., *args: Any, **kwargs: Any) -> None: ...
    def line(self, points: Any, origin: Any = ..., symbs: bool = ..., ctype: Optional[Any] = ..., size: float = ...) -> None: ...
    def scale(self, algorithm: Any, min: Any, max: Optional[Any] = ..., unit: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def zoom(self, zoomfac: Optional[Any] = ..., colc: Optional[Any] = ..., rowc: Optional[Any] = ..., origin: Any = ...) -> None: ...
    def pan(self, colc: Optional[Any] = ..., rowc: Optional[Any] = ..., origin: Any = ...) -> None: ...
    def interact(self) -> None: ...
    def setCallback(self, k: Any, func: Optional[Any] = ..., noRaise: bool = ...): ...
    def getActiveCallbackKeys(self, onlyActive: bool = ...): ...

class Event:
    k: Any = ...
    x: Any = ...
    y: Any = ...
    def __init__(self, k: Any, x: Any = ..., y: Any = ...) -> None: ...

def noop_callback(k: Any, x: Any, y: Any): ...
def h_callback(k: Any, x: Any, y: Any): ...
def setDefaultBackend(backend: Any) -> None: ...
def getDefaultBackend(): ...
def setDefaultFrame(frame: int = ...): ...
def getDefaultFrame(): ...
def incrDefaultFrame(): ...
def setDefaultMaskTransparency(maskPlaneTransparency: Any = ...): ...
def setDefaultMaskPlaneColor(name: Optional[Any] = ..., color: Optional[Any] = ...): ...
def getDisplay(frame: Optional[Any] = ..., backend: Optional[Any] = ..., create: bool = ..., verbose: bool = ..., *args: Any, **kwargs: Any): ...
def delAllDisplays(): ...
