from .interface import BLACK as BLACK, BLUE as BLUE, CYAN as CYAN, GREEN as GREEN, MAGENTA as MAGENTA, RED as RED, WHITE as WHITE, YELLOW as YELLOW, getDefaultBackend as getDefaultBackend, setDefaultBackend as setDefaultBackend
from typing import Any, Optional

getDisplay: Any

class _RaiseException:
    exception: Any = ...
    def __init__(self, exception: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> None: ...

class DisplayImpl:
    __init__: Any = ...

loaded: bool

def Buffering(): ...
def setMaskPlaneColor(name: Any, color: Optional[Any] = ..., frame: Optional[Any] = ...): ...
def getMaskPlaneColor(name: Any, frame: Optional[Any] = ...): ...
def setMaskTransparency(name: Any, frame: Optional[Any] = ...): ...
def getMaskTransparency(name: Any, frame: Optional[Any] = ...): ...
def show(frame: Optional[Any] = ...): ...
def mtv(data: Any, frame: Optional[Any] = ..., title: str = ..., wcs: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
def erase(frame: Optional[Any] = ...): ...
def dot(symb: Any, c: Any, r: Any, frame: Optional[Any] = ..., size: int = ..., ctype: Optional[Any] = ..., origin: Any = ..., *args: Any, **kwargs: Any): ...
def line(points: Any, frame: Optional[Any] = ..., origin: Any = ..., symbs: bool = ..., ctype: Optional[Any] = ..., size: float = ...): ...
def scale(algorithm: Any, min: Any, max: Optional[Any] = ..., frame: Optional[Any] = ...): ...
def pan(colc: Optional[Any] = ..., rowc: Optional[Any] = ..., frame: Optional[Any] = ..., origin: Any = ...) -> None: ...
def zoom(zoomfac: Optional[Any] = ..., colc: Optional[Any] = ..., rowc: Optional[Any] = ..., frame: Optional[Any] = ..., origin: Any = ...) -> None: ...
def interact(frame: Optional[Any] = ...): ...
def setCallback(k: Any, func: Any = ..., noRaise: bool = ..., frame: Optional[Any] = ...): ...
def getActiveCallbackKeys(onlyActive: bool = ..., frame: Optional[Any] = ...): ...
