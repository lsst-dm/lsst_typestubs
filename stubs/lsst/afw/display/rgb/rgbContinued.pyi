from .rgb import getZScale as getZScale, replaceSaturatedPixels as replaceSaturatedPixels
from typing import Any, Optional

def computeIntensity(imageR: Any, imageG: Optional[Any] = ..., imageB: Optional[Any] = ...): ...

class Mapping:
    minimum: Any = ...
    def __init__(self, minimum: Optional[Any] = ..., image: Optional[Any] = ...) -> None: ...
    def makeRgbImage(self, imageR: Optional[Any] = ..., imageG: Optional[Any] = ..., imageB: Optional[Any] = ..., xSize: Optional[Any] = ..., ySize: Optional[Any] = ..., rescaleFactor: Optional[Any] = ...): ...
    def intensity(self, imageR: Any, imageG: Any, imageB: Any): ...
    def mapIntensityToUint8(self, intensity: Any): ...

class LinearMapping(Mapping):
    maximum: Any = ...
    def __init__(self, minimum: Optional[Any] = ..., maximum: Optional[Any] = ..., image: Optional[Any] = ...) -> None: ...
    def mapIntensityToUint8(self, intensity: Any): ...

class ZScaleMapping(LinearMapping):
    def __init__(self, image: Any, nSamples: int = ..., contrast: float = ...) -> None: ...

class AsinhMapping(Mapping):
    def __init__(self, minimum: Any, dataRange: Any, Q: int = ...) -> None: ...
    def mapIntensityToUint8(self, intensity: Any): ...

class AsinhZScaleMapping(AsinhMapping):
    def __init__(self, image: Any, Q: int = ..., pedestal: Optional[Any] = ...) -> None: ...

def makeRGB(imageR: Any, imageG: Optional[Any] = ..., imageB: Optional[Any] = ..., minimum: int = ..., dataRange: int = ..., Q: int = ..., fileName: Optional[Any] = ..., saturatedBorderWidth: int = ..., saturatedPixelValue: Optional[Any] = ..., xSize: Optional[Any] = ..., ySize: Optional[Any] = ..., rescaleFactor: Optional[Any] = ...): ...
def displayRGB(rgb: Any, show: bool = ...): ...
def writeRGB(fileName: Any, rgbImage: Any) -> None: ...
