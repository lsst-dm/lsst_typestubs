import lsst.utils.tests
from typing import Any, Optional

class BoxGrid:
    boxClass: Any = ...
    stopDelta: Any = ...
    pointClass: Any = ...
    def __init__(self, box: Any, numColRow: Any) -> None: ...
    @property
    def numColRow(self): ...
    def __getitem__(self, indXY: Any): ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...

class FrameSetInfo:
    baseInd: Any = ...
    currInd: Any = ...
    isBaseSkyFrame: Any = ...
    isCurrSkyFrame: Any = ...
    def __init__(self, frameSet: Any) -> None: ...

def makeSipIwcToPixel(metadata: Any): ...
def makeSipPixelToIwc(metadata: Any): ...

class PermutedFrameSet:
    frameSet: Any = ...
    isBaseSkyFrame: Any = ...
    isCurrSkyFrame: Any = ...
    isBasePermuted: Any = ...
    isCurrPermuted: Any = ...
    def __init__(self, frameSet: Any, permuteBase: Any, permuteCurr: Any) -> None: ...

class TransformTestBaseClass(lsst.utils.tests.TestCase):
    def getTestDir(self): ...
    longMessage: bool = ...
    endpointPrefixes: Any = ...
    goodNAxes: Any = ...
    badNAxes: Any = ...
    frameIdentDict: Any = ...
    def setUp(self) -> None: ...
    @staticmethod
    def makeRawArrayData(nPoints: Any, nAxes: Any, delta: float = ...): ...
    @staticmethod
    def makeRawPointData(nAxes: Any, delta: float = ...): ...
    @staticmethod
    def makeEndpoint(name: Any, nAxes: Optional[Any] = ...): ...
    @classmethod
    def makeGoodFrame(cls, name: Any, nAxes: Optional[Any] = ...): ...
    @staticmethod
    def makeBadFrames(name: Any): ...
    def makeFrameSet(self, baseFrame: Any, currFrame: Any): ...
    @staticmethod
    def permuteFrameSetIter(frameSet: Any) -> None: ...
    @staticmethod
    def makeJacobian(nIn: Any, nOut: Any, inPoint: Any): ...
    def checkTransformation(self, transform: Any, mapping: Any, msg: str = ...) -> None: ...
    def checkInverseTransformation(self, forward: Any, inverse: Any, msg: str = ...) -> None: ...
    def checkTransformFromMapping(self, fromName: Any, toName: Any) -> None: ...
    def checkTransformFromFrameSet(self, fromName: Any, toName: Any) -> None: ...
    def checkInverted(self, fromName: Any, toName: Any) -> None: ...
    def checkInverseMapping(self, TransformClass: Any, mapping: Any, msg: Any) -> None: ...
    def checkGetJacobian(self, fromName: Any, toName: Any) -> None: ...
    def checkThen(self, fromName: Any, midName: Any, toName: Any) -> None: ...
    def assertTransformsEqual(self, transform1: Any, transform2: Any) -> None: ...
    def checkPersistence(self, transform: Any) -> None: ...
