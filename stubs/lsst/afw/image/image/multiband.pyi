from ...multiband import MultibandBase
from typing import Any, Optional

class MultibandPixel(MultibandBase):
    def __init__(self, filters: Any, singles: Any, position: Any) -> None: ...
    array: Any = ...
    def clone(self, deep: bool = ...): ...
    def __getitem__(self, indices: Any): ...

class MultibandImageBase(MultibandBase):
    def __init__(self, filters: Any, array: Any, singleType: Any, bbox: Optional[Any] = ...) -> None: ...
    array: Any = ...
    def clone(self, deep: bool = ...): ...
    def __setitem__(self, args: Any, value: Any) -> None: ...
    def getBBox(self, origin: Any = ...): ...

class MultibandImage(MultibandImageBase):
    def __init__(self, filters: Any, array: Any, bbox: Optional[Any] = ...) -> None: ...
    @staticmethod
    def fromImages(filters: Any, singles: Any): ...
    @staticmethod
    def fromKwargs(filters: Any, filterKwargs: Any, singleType: Any = ..., **kwargs: Any): ...

class MultibandMask(MultibandImageBase):
    def __init__(self, filters: Any, array: Any, bbox: Optional[Any] = ...) -> None: ...
    @staticmethod
    def fromMasks(filters: Any, singles: Any): ...
    @staticmethod
    def fromKwargs(filters: Any, filterKwargs: Any, singleType: Any = ..., **kwargs: Any): ...
    def getMaskPlane(self, key: Any): ...
    def getPlaneBitMask(self, names: Any): ...
    def getNumPlanesMax(self): ...
    def getNumPlanesUsed(self): ...
    def getMaskPlaneDict(self): ...
    @staticmethod
    def clearMaskPlaneDict() -> None: ...
    @staticmethod
    def addMaskPlane(name: Any): ...
    @staticmethod
    def removeMaskPlane(name: Any) -> None: ...
    def removeAndClearMaskPlane(self, name: Any, removeFromDefault: bool = ...) -> None: ...
    def clearAllMaskPlanes(self) -> None: ...
    def __ior__(self, others: Any): ...
    def __iand__(self, others: Any): ...
    def __ixor__(self, others: Any): ...

class MultibandTripleBase(MultibandBase):
    def __init__(self, filters: Any, image: Any, mask: Any, variance: Any) -> None: ...
    def setXY0(self, xy0: Any) -> None: ...
    def shiftedTo(self, xy0: Any): ...
    def clone(self, deep: bool = ...): ...
    @property
    def image(self): ...
    @property
    def mask(self): ...
    @property
    def variance(self): ...
    def getBBox(self, origin: Any = ...): ...

class MultibandMaskedImage(MultibandTripleBase):
    def __init__(self, filters: Any, image: Optional[Any] = ..., mask: Optional[Any] = ..., variance: Optional[Any] = ...) -> None: ...
    @staticmethod
    def fromImages(filters: Any, singles: Any): ...
    @staticmethod
    def fromArrays(filters: Any, image: Any, mask: Any, variance: Any, bbox: Optional[Any] = ...): ...
    @staticmethod
    def fromKwargs(filters: Any, filterKwargs: Any, singleType: Any = ..., **kwargs: Any): ...
