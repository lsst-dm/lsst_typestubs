from typing import Any, Optional

class DetectorWrapper:
    name: Any = ...
    id: Any = ...
    type: Any = ...
    serial: Any = ...
    bbox: Any = ...
    pixelSize: Any = ...
    ampExtent: Any = ...
    plateScale: Any = ...
    orientation: Any = ...
    radialDistortion: Any = ...
    transMap: Any = ...
    crosstalk: Any = ...
    physicalType: Any = ...
    ampList: Any = ...
    detector: Any = ...
    def __init__(self, name: str = ..., id: int = ..., detType: Any = ..., serial: str = ..., bbox: Optional[Any] = ..., numAmps: int = ..., pixelSize: Any = ..., ampExtent: Any = ..., orientation: Any = ..., plateScale: float = ..., radialDistortion: float = ..., crosstalk: Optional[Any] = ..., modFunc: Optional[Any] = ..., physicalType: str = ..., cameraBuilder: Optional[Any] = ...) -> None: ...

class CameraWrapper:
    plateScale: Any = ...
    radialDistortion: Any = ...
    detectorNameList: Any = ...
    detectorIdList: Any = ...
    ampDataDict: Any = ...
    camera: Any = ...
    def __init__(self, plateScale: float = ..., radialDistortion: float = ..., isLsstLike: bool = ...) -> None: ...
    @property
    def nDetectors(self): ...
    def makeDetectorConfigs(self, detFile: Any): ...
    def makeAmpLists(self, ampFile: Any, isLsstLike: bool = ...): ...
    def makeTestRepositoryItems(self, isLsstLike: bool = ...): ...
