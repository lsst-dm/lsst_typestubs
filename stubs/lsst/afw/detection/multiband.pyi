from lsst.afw.multiband import MultibandBase
from typing import Any, Optional

class MultibandFootprint(MultibandBase):
    def __init__(self, filters: Any, singles: Any) -> None: ...
    @staticmethod
    def fromArrays(filters: Any, image: Any, mask: Optional[Any] = ..., variance: Optional[Any] = ..., footprint: Optional[Any] = ..., xy0: Optional[Any] = ..., thresh: int = ..., peaks: Optional[Any] = ...): ...
    @staticmethod
    def fromImages(filters: Any, image: Any, mask: Optional[Any] = ..., variance: Optional[Any] = ..., footprint: Optional[Any] = ..., thresh: int = ..., peaks: Optional[Any] = ...): ...
    @staticmethod
    def fromMaskedImages(filters: Any, maskedImages: Any, footprint: Optional[Any] = ..., thresh: int = ..., peaks: Optional[Any] = ...): ...
    def getSpans(self): ...
    @property
    def footprint(self): ...
    @property
    def mMaskedImage(self): ...
    @property
    def spans(self): ...
    def getPeaks(self): ...
    @property
    def peaks(self): ...
    def getImage(self, bbox: Optional[Any] = ..., fill: Any = ..., imageType: Any = ...): ...
    def clone(self, deep: bool = ...): ...
