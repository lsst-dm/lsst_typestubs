import lsst.utils.tests
from lsst.afw.typehandling import Storable as Storable
from typing import Any

class GenericMapTestBaseClass(lsst.utils.tests.TestCase):
    class SimpleStorable(Storable):
        def __hash__(self) -> Any: ...
        def __eq__(self, other: Any) -> Any: ...
    class ComplexStorable(SimpleStorable):
        def __init__(self, storage: Any) -> None: ...
        def __hash__(self) -> Any: ...
        def __eq__(self, other: Any) -> Any: ...
    class NotAStorable: ...
    @classmethod
    def getTestData(cls, keyClass: Any): ...
    @staticmethod
    def getValidKeys(mapClass: Any): ...
    longMessage: bool = ...
    def setUp(self) -> None: ...
    def checkInitMapping(self, mapClass: Any, contents: Any, msg: str = ...) -> None: ...
    def checkInitPairs(self, mapClass: Any, contents: Any, msg: str = ...) -> None: ...
    def checkInitKwargs(self, mapClass: Any, contents: Any, msg: str = ...) -> None: ...
    def checkFromKeysDefault(self, mapClass: Any, keys: Any, msg: str = ...) -> None: ...
    def checkFromKeys(self, mapClass: Any, keys: Any, value: Any, msg: str = ...) -> None: ...
    def checkContains(self, genericMap: Any, contents: Any, msg: str = ...) -> None: ...
    def checkContents(self, genericMap: Any, contents: Any, msg: str = ...) -> None: ...
    def checkGet(self, genericMap: Any, contents: Any, msg: str = ...) -> None: ...
    def checkIteration(self, genericMap: Any, contents: Any, msg: str = ...) -> None: ...
    def checkViews(self, genericMap: Any, contents: Any, msg: str = ...) -> None: ...

class MutableGenericMapTestBaseClass(GenericMapTestBaseClass):
    def checkInsertItem(self, mapFactory: Any, contents: Any, msg: str = ...) -> None: ...
    def checkSetdefault(self, mapFactory: Any, contents: Any, msg: str = ...) -> None: ...
    def checkUpdateMapping(self, mapFactory: Any, contents: Any, msg: str = ...) -> None: ...
    def checkUpdatePairs(self, mapFactory: Any, contents: Any, msg: str = ...) -> None: ...
    def checkUpdateKwargs(self, mapFactory: Any, contents: Any, msg: str = ...) -> None: ...
    def checkReplaceItem(self, genericMap: Any, msg: str = ...) -> None: ...
    def checkRemoveItem(self, mapFactory: Any, contents: Any, msg: str = ...) -> None: ...
    def checkPop(self, mapFactory: Any, contents: Any, msg: str = ...) -> None: ...
    def checkPopitem(self, mapFactory: Any, contents: Any, msg: str = ...) -> None: ...
    def checkClear(self, mapFactory: Any, contents: Any, msg: str = ...) -> None: ...
    def checkMutableViews(self, mapFactory: Any, contents: Any, msg: str = ...) -> None: ...
