import collections.abc
from ._schemaMapper import SchemaMapper as SchemaMapper
from ._table import CoordKey as CoordKey, SourceRecord as SourceRecord
from typing import Any, Optional

class MultiMatch:
    radius: Any = ...
    mapper: Any = ...
    coordKey: Any = ...
    idKey: Any = ...
    dataIdKeys: Any = ...
    objectKey: Any = ...
    result: Any = ...
    reference: Any = ...
    ambiguous: Any = ...
    table: Any = ...
    nextObjId: int = ...
    def __init__(self, schema: Any, dataIdFormat: Any, coordField: str = ..., idField: str = ..., radius: Optional[Any] = ..., RecordClass: Any = ...) -> None: ...
    def makeRecord(self, inputRecord: Any, dataId: Any, objId: Any): ...
    def add(self, catalog: Any, dataId: Any) -> None: ...
    def finish(self, removeAmbiguous: bool = ...): ...

class GroupView(collections.abc.Mapping):
    @classmethod
    def build(cls, catalog: Any, groupField: str = ...): ...
    schema: Any = ...
    ids: Any = ...
    groups: Any = ...
    count: Any = ...
    def __init__(self, schema: Any, ids: Any, groups: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    def __getitem__(self, key: Any): ...
    def where(self, predicate: Any): ...
    def aggregate(self, function: Any, field: Optional[Any] = ..., dtype: Any = ...): ...
    def apply(self, function: Any, field: Optional[Any] = ..., dtype: Any = ...): ...
