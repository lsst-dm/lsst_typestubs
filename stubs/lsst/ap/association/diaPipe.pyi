import lsst.pipe.base.connectionTypes as pipeBase
from typing import Any, Optional

class DiaPipelineConnections(pipeBase.PipelineTaskConnections):
    diaSourceSchema: Any = ...
    diaSourceCat: Any = ...
    diffIm: Any = ...
    exposure: Any = ...
    warpedExposure: Any = ...
    apdbMarker: Any = ...
    associatedDiaSources: Any = ...
    def __init__(self, *, config: Optional[Any] = ...) -> None: ...

class DiaPipelineConfig(pipeBase.PipelineTaskConfig):
    coaddName: Any = ...
    apdb: Any = ...
    diaSourceDpddifier: Any = ...
    diaCatalogLoader: Any = ...
    associator: Any = ...
    diaForcedSource: Any = ...
    alertPackager: Any = ...
    doPackageAlerts: Any = ...
    doWriteAssociatedSources: Any = ...
    def setDefaults(self) -> None: ...
    def validate(self) -> None: ...

class DiaPipelineTask(pipeBase.PipelineTask):
    ConfigClass: Any = ...
    RunnerClass: Any = ...
    apdb: Any = ...
    def __init__(self, initInputs: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def runQuantum(self, butlerQC: Any, inputRefs: Any, outputRefs: Any) -> None: ...
    def run(self, diaSourceCat: Any, diffIm: Any, exposure: Any, warpedExposure: Any, ccdExposureIdBits: Any): ...
