from lsst.meas.base import CatalogCalculationConfig, CatalogCalculationPlugin, CatalogCalculationPluginConfig, CatalogCalculationTask
from typing import Any, Optional

class DiaObjectCalculationPluginConfig(CatalogCalculationPluginConfig): ...

class DiaObjectCalculationPlugin(CatalogCalculationPlugin):
    ConfigClass: Any = ...
    registry: Any = ...
    FLUX_MOMENTS_CALCULATED: float = ...
    plugType: str = ...
    inputCols: Any = ...
    outputCols: Any = ...
    def __init__(self, config: Any, name: Any, metadata: Any) -> None: ...
    def calculate(self, diaObject: Any, diaSources: Any, filterDiaFluxes: Optional[Any] = ..., filterName: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def fail(self, diaObject: Any, columns: Any, error: Optional[Any] = ...) -> None: ...

class DiaObjectCalculationConfig(CatalogCalculationConfig):
    plugins: Any = ...

class DiaObjectCalculationTask(CatalogCalculationTask):
    ConfigClass: Any = ...
    plugMetadata: Any = ...
    plugins: Any = ...
    outputCols: Any = ...
    def __init__(self, plugMetadata: Optional[Any] = ..., **kwargs: Any) -> None: ...
    executionDict: Any = ...
    def initializePlugins(self) -> None: ...
    def run(self, diaObjectCat: Any, diaSourceCat: Any, updatedDiaObjectIds: Any, filterName: Any): ...
    def callCompute(self, diaObjectCat: Any, diaSourceCat: Any, updatedDiaObjectIds: Any, filterName: Any): ...
