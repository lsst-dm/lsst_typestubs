from .diaCalculation import DiaObjectCalculationPlugin, DiaObjectCalculationPluginConfig
from typing import Any

class MeanDiaPositionConfig(DiaObjectCalculationPluginConfig): ...

class MeanDiaPosition(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    plugType: str = ...
    outputCols: Any = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, **kwargs: Any): ...

class HTMIndexDiaPositionConfig(DiaObjectCalculationPluginConfig):
    htmLevel: Any = ...

class HTMIndexDiaPosition(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    plugType: str = ...
    inputCols: Any = ...
    outputCols: Any = ...
    pixelator: Any = ...
    def __init__(self, config: Any, name: Any, metadata: Any) -> None: ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaObjectId: Any, **kwargs: Any) -> None: ...

class NumDiaSourcesDiaPluginConfig(DiaObjectCalculationPluginConfig): ...

class NumDiaSourcesDiaPlugin(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, **kwargs: Any) -> None: ...

class SimpleSourceFlagDiaPluginConfig(DiaObjectCalculationPluginConfig): ...

class SimpleSourceFlagDiaPlugin(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, **kwargs: Any) -> None: ...

class WeightedMeanDiaPsFluxConfig(DiaObjectCalculationPluginConfig): ...

class WeightedMeanDiaPsFlux(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, filterDiaSources: Any, filterName: Any, **kwargs: Any): ...

class PercentileDiaPsFluxConfig(DiaObjectCalculationPluginConfig):
    percentiles: Any = ...

class PercentileDiaPsFlux(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    def __init__(self, config: Any, name: Any, metadata: Any, **kwargs: Any) -> None: ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, filterDiaSources: Any, filterName: Any, **kwargs: Any): ...

class SigmaDiaPsFluxConfig(DiaObjectCalculationPluginConfig): ...

class SigmaDiaPsFlux(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, filterDiaSources: Any, filterName: Any, **kwargs: Any) -> None: ...

class Chi2DiaPsFluxConfig(DiaObjectCalculationPluginConfig): ...

class Chi2DiaPsFlux(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    inputCols: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, filterDiaSources: Any, filterName: Any, **kwargs: Any): ...

class MadDiaPsFluxConfig(DiaObjectCalculationPluginConfig): ...

class MadDiaPsFlux(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, filterDiaSources: Any, filterName: Any, **kwargs: Any) -> None: ...

class SkewDiaPsFluxConfig(DiaObjectCalculationPluginConfig): ...

class SkewDiaPsFlux(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, filterDiaSources: Any, filterName: Any, **kwargs: Any) -> None: ...

class MinMaxDiaPsFluxConfig(DiaObjectCalculationPluginConfig): ...

class MinMaxDiaPsFlux(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, filterDiaSources: Any, filterName: Any, **kwargs: Any) -> None: ...

class MaxSlopeDiaPsFluxConfig(DiaObjectCalculationPluginConfig): ...

class MaxSlopeDiaPsFlux(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, filterDiaSources: Any, filterName: Any, **kwargs: Any): ...

class ErrMeanDiaPsFluxConfig(DiaObjectCalculationPluginConfig): ...

class ErrMeanDiaPsFlux(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, filterDiaSources: Any, filterName: Any, **kwargs: Any) -> None: ...

class LinearFitDiaPsFluxConfig(DiaObjectCalculationPluginConfig): ...

class LinearFitDiaPsFlux(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, filterDiaSources: Any, filterName: Any, **kwargs: Any): ...

class StetsonJDiaPsFluxConfig(DiaObjectCalculationPluginConfig): ...

class StetsonJDiaPsFlux(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    inputCols: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, filterDiaSources: Any, filterName: Any, **kwargs: Any): ...

class WeightedMeanDiaTotFluxConfig(DiaObjectCalculationPluginConfig): ...

class WeightedMeanDiaTotFlux(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, filterDiaSources: Any, filterName: Any, **kwargs: Any): ...

class SigmaDiaTotFluxConfig(DiaObjectCalculationPluginConfig): ...

class SigmaDiaTotFlux(DiaObjectCalculationPlugin):
    ConfigClass: Any = ...
    outputCols: Any = ...
    plugType: str = ...
    @classmethod
    def getExecutionOrder(cls): ...
    def calculate(self, diaObjects: Any, diaSources: Any, filterDiaSources: Any, filterName: Any, **kwargs: Any) -> None: ...
