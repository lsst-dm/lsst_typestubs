import abc
from typing import Any

class Workspace(metaclass=abc.ABCMeta):
    def __init__(self, location: Any) -> None: ...
    @staticmethod
    def mkdir(directory: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    @property
    def workDir(self): ...
    @property
    def configDir(self): ...
    @property
    @abc.abstractmethod
    def dbLocation(self) -> Any: ...
    @property
    @abc.abstractmethod
    def alertLocation(self) -> Any: ...
    @property
    @abc.abstractmethod
    def workButler(self) -> Any: ...
    @property
    @abc.abstractmethod
    def analysisButler(self) -> Any: ...

class WorkspaceGen2(Workspace):
    def __init__(self, location: Any) -> None: ...
    @property
    def dataRepo(self): ...
    @property
    def calibRepo(self): ...
    @property
    def templateRepo(self): ...
    @property
    def outputRepo(self): ...
    @property
    def dbLocation(self): ...
    @property
    def alertLocation(self): ...
    @property
    def workButler(self): ...
    @property
    def analysisButler(self): ...

class WorkspaceGen3(Workspace):
    runName: str = ...
    def __init__(self, location: Any) -> None: ...
    @property
    def repo(self): ...
    @property
    def dbLocation(self): ...
    @property
    def alertLocation(self): ...
    @property
    def workButler(self): ...
    @property
    def analysisButler(self): ...
