import lsst.afw.table as pexConfig
import lsst.afw.table as pipeBase
from typing import Any, Optional

class IngestReferenceRunner(pipeBase.TaskRunner):
    def run(self, parsedCmd: Any): ...

class DatasetConfig(pexConfig.Config):
    format_version: Any = ...
    ref_dataset_name: Any = ...
    indexer: Any = ...

class IngestIndexedReferenceConfig(pexConfig.Config):
    dataset_config: Any = ...
    n_processes: Any = ...
    file_reader: Any = ...
    ra_name: Any = ...
    dec_name: Any = ...
    ra_err_name: Any = ...
    dec_err_name: Any = ...
    coord_err_unit: Any = ...
    mag_column_list: Any = ...
    mag_err_column_map: Any = ...
    is_photometric_name: Any = ...
    is_resolved_name: Any = ...
    is_variable_name: Any = ...
    id_name: Any = ...
    pm_ra_name: Any = ...
    pm_dec_name: Any = ...
    pm_ra_err_name: Any = ...
    pm_dec_err_name: Any = ...
    pm_scale: Any = ...
    parallax_name: Any = ...
    parallax_err_name: Any = ...
    parallax_scale: Any = ...
    epoch_name: Any = ...
    epoch_format: Any = ...
    epoch_scale: Any = ...
    extra_col_names: Any = ...
    def setDefaults(self) -> None: ...
    def validate(self) -> None: ...

class IngestIndexedReferenceTask(pipeBase.CmdLineTask):
    canMultiprocess: bool = ...
    ConfigClass: Any = ...
    RunnerClass: Any = ...
    butler: Any = ...
    indexer: Any = ...
    IngestManager: Any = ...
    def __init__(self, *args: Any, butler: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def createIndexedCatalog(self, inputFiles: Any) -> None: ...
    def makeSchema(self, dtype: Any): ...

class IngestGaiaReferenceTask(IngestIndexedReferenceTask):
    IngestManager: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
