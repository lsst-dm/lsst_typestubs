import abc
import lsst.pipe.base as pexConfig
import lsst.pipe.base as pipeBase
from typing import Any, Optional

class BaseSourceSelectorConfig(pexConfig.Config): ...

class BaseSourceSelectorTask(pipeBase.Task, metaclass=abc.ABCMeta):
    ConfigClass: Any = ...
    usesMatches: bool = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def run(self, sourceCat: Any, sourceSelectedField: Optional[Any] = ..., matches: Optional[Any] = ..., exposure: Optional[Any] = ...): ...
    @abc.abstractmethod
    def selectSources(self, sourceCat: Any, matches: Optional[Any] = ..., exposure: Optional[Any] = ...) -> Any: ...

sourceSelectorRegistry: Any

class BaseLimit(pexConfig.Config):
    minimum: Any = ...
    maximum: Any = ...
    def apply(self, values: Any): ...

class ColorLimit(BaseLimit):
    primary: Any = ...
    secondary: Any = ...
    def apply(self, catalog: Any): ...

class FluxLimit(BaseLimit):
    fluxField: Any = ...
    def apply(self, catalog: Any): ...

class MagnitudeLimit(BaseLimit):
    fluxField: Any = ...
    def apply(self, catalog: Any): ...

class SignalToNoiseLimit(BaseLimit):
    fluxField: Any = ...
    errField: Any = ...
    def apply(self, catalog: Any): ...

class MagnitudeErrorLimit(BaseLimit):
    magErrField: Any = ...
    def apply(self, catalog: Any): ...

class RequireFlags(pexConfig.Config):
    good: Any = ...
    bad: Any = ...
    def apply(self, catalog: Any): ...

class RequireUnresolved(BaseLimit):
    name: Any = ...
    maximum: float = ...
    def setDefaults(self) -> None: ...
    def apply(self, catalog: Any): ...

class RequireIsolated(pexConfig.Config):
    parentName: Any = ...
    nChildName: Any = ...
    def apply(self, catalog: Any): ...

class ScienceSourceSelectorConfig(pexConfig.Config):
    doFluxLimit: Any = ...
    doFlags: Any = ...
    doUnresolved: Any = ...
    doSignalToNoise: Any = ...
    doIsolated: Any = ...
    fluxLimit: Any = ...
    flags: Any = ...
    unresolved: Any = ...
    signalToNoise: Any = ...
    isolated: Any = ...
    def setDefaults(self) -> None: ...

class ScienceSourceSelectorTask(BaseSourceSelectorTask):
    ConfigClass: Any = ...
    def selectSources(self, sourceCat: Any, matches: Optional[Any] = ..., exposure: Optional[Any] = ...): ...

class ReferenceSourceSelectorConfig(pexConfig.Config):
    doMagLimit: Any = ...
    doFlags: Any = ...
    doUnresolved: Any = ...
    doSignalToNoise: Any = ...
    doMagError: Any = ...
    magLimit: Any = ...
    flags: Any = ...
    unresolved: Any = ...
    signalToNoise: Any = ...
    magError: Any = ...
    colorLimits: Any = ...

class ReferenceSourceSelectorTask(BaseSourceSelectorTask):
    ConfigClass: Any = ...
    def selectSources(self, sourceCat: Any, matches: Optional[Any] = ..., exposure: Optional[Any] = ...): ...
