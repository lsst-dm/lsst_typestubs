import abc
from abc import ABC, abstractmethod
from typing import Any

class Curve(ABC, metaclass=abc.ABCMeta):
    mode: str = ...
    subclasses: Any = ...
    wavelength: Any = ...
    efficiency: Any = ...
    metadata: Any = ...
    def __init__(self, wavelength: Any, efficiency: Any, metadata: Any) -> None: ...
    @classmethod
    @abstractmethod
    def fromTable(cls, table: Any) -> Any: ...
    @abstractmethod
    def toTable(self) -> Any: ...
    @abstractmethod
    def evaluate(self, detector: Any, position: Any, wavelength: Any, kind: str = ..., bounds_error: bool = ..., fill_value: int = ...) -> Any: ...
    @classmethod
    def __init_subclass__(cls, **kwargs: Any) -> None: ...
    @abstractmethod
    def __eq__(self, other: Any) -> Any: ...
    def compare_metadata(self, other: Any, keys_to_compare: Any = ...): ...
    def interpolate(self, wavelengths: Any, values: Any, wavelength: Any, kind: Any, bounds_error: Any, fill_value: Any): ...
    def getMetadata(self): ...
    @classmethod
    def readText(cls, filename: Any): ...
    @classmethod
    def readFits(cls, filename: Any): ...
    def writeText(self, filename: Any): ...
    def writeFits(self, filename: Any): ...

class DetectorCurve(Curve):
    mode: str = ...
    def __eq__(self, other: Any) -> Any: ...
    @classmethod
    def fromTable(cls, table: Any): ...
    def toTable(self): ...
    def evaluate(self, detector: Any, position: Any, wavelength: Any, kind: str = ..., bounds_error: bool = ..., fill_value: int = ...): ...

class AmpCurve(Curve):
    mode: str = ...
    data: Any = ...
    def __init__(self, amp_name_list: Any, wavelength: Any, efficiency: Any, metadata: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    @classmethod
    def fromTable(cls, table: Any): ...
    def toTable(self): ...
    def evaluate(self, detector: Any, position: Any, wavelength: Any, kind: str = ..., bounds_error: bool = ..., fill_value: int = ...): ...

class ImageCurve(Curve, metaclass=abc.ABCMeta):
    mode: str = ...
    def fromTable(self, table: Any) -> None: ...
    def toTable(self) -> None: ...
    def evaluate(self, detector: Any, position: Any, wavelength: Any, kind: str = ..., bounds_error: bool = ..., fill_value: int = ...) -> None: ...
