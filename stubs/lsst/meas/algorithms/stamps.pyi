import abc
import lsst.afw.fits as afwImage
from collections.abc import Sequence
from lsst.geom import SpherePoint
from typing import Any, Optional

def writeFits(filename: Any, stamp_ims: Any, metadata: Any, write_mask: Any, write_variance: Any) -> None: ...
def readFitsWithOptions(filename: Any, stamp_factory: Any, options: Any): ...

class AbstractStamp(abc.ABC, metaclass=abc.ABCMeta):
    @classmethod
    @abc.abstractmethod
    def factory(cls, stamp_im: Any, metadata: Any, index: Any) -> Any: ...

class Stamp(AbstractStamp):
    stamp_im: afwImage.maskedImage.MaskedImageF
    position: SpherePoint
    @classmethod
    def factory(cls, stamp_im: Any, metadata: Any, index: Any): ...
    def __init__(self, stamp_im: Any, position: Any) -> None: ...

class StampsBase(abc.ABC, Sequence, metaclass=abc.ABCMeta):
    use_mask: Any = ...
    use_variance: Any = ...
    def __init__(self, stamps: Any, metadata: Optional[Any] = ..., use_mask: bool = ..., use_variance: bool = ...) -> None: ...
    @classmethod
    @abc.abstractmethod
    def readFits(cls, filename: Any) -> Any: ...
    @classmethod
    @abc.abstractmethod
    def readFitsWithOptions(cls, filename: Any, options: Any) -> Any: ...
    def writeFits(self, filename: Any) -> None: ...
    def __len__(self): ...
    def __getitem__(self, index: Any): ...
    def __iter__(self) -> Any: ...
    def getMaskedImages(self): ...
    @property
    def metadata(self): ...

class Stamps(StampsBase):
    def getPositions(self): ...
    def append(self, item: Any) -> None: ...
    def extend(self, stamp_list: Any) -> None: ...
    @classmethod
    def readFits(cls, filename: Any): ...
    @classmethod
    def readFitsWithOptions(cls, filename: Any, options: Any): ...
