import lsst.meas.base
from typing import Any, Optional

GeneralPsfFitterComponentConfig: Any
GeneralPsfFitterConfig: Any

class GeneralShapeletPsfApproxConfig(lsst.pex.config.Config):
    models: Any = ...
    sequence: Any = ...
    def setDefaults(self) -> None: ...
    def validate(self) -> None: ...

class GeneralShapeletPsfApproxMixin:
    sequence: Any = ...
    def __init__(self, config: Any, name: Any, schema: Any) -> None: ...
    def measure(self, measRecord: Any, exposure: Any) -> None: ...
    def fail(self, measRecord: Any, error: Optional[Any] = ...) -> None: ...

class GeneralShapeletPsfApproxSingleFrameConfig(lsst.meas.base.SingleFramePluginConfig, GeneralShapeletPsfApproxConfig):
    def setDefaults(self) -> None: ...

class GeneralShapeletPsfApproxSingleFramePlugin(lsst.meas.base.SingleFramePlugin, GeneralShapeletPsfApproxMixin):
    ConfigClass: Any = ...
    @staticmethod
    def getExecutionOrder(): ...
    def __init__(self, config: Any, name: Any, schema: Any, metadata: Any) -> None: ...
    def measure(self, measRecord: Any, exposure: Any) -> None: ...
    def fail(self, measRecord: Any, error: Optional[Any] = ...) -> None: ...

class GeneralShapeletPsfApproxForcedConfig(lsst.meas.base.ForcedPluginConfig, GeneralShapeletPsfApproxConfig):
    def setDefaults(self) -> None: ...

class GeneralShapeletPsfApproxForcedPlugin(lsst.meas.base.ForcedPlugin, GeneralShapeletPsfApproxMixin):
    ConfigClass: Any = ...
    @staticmethod
    def getExecutionOrder(): ...
    def __init__(self, config: Any, name: Any, schemaMapper: Any, metadata: Any) -> None: ...
    def measure(self, measRecord: Any, exposure: Any, refRecord: Any, refWcs: Any) -> None: ...
    def fail(self, measRecord: Any, error: Optional[Any] = ...) -> None: ...
