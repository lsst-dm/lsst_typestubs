from typing import Any, Optional

class OptimizerIterationDisplay:
    parent: Any = ...
    sample: Any = ...
    grid: Any = ...
    rejected: Any = ...
    def __init__(self, parent: Any, sample: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    @property
    def objectiveValues(self): ...
    @property
    def objectiveModel(self): ...

class OptimizerDisplay:
    recorder: Any = ...
    dimensions: Any = ...
    ndim: Any = ...
    track: Any = ...
    objective: Any = ...
    unitGrid: Any = ...
    def __init__(self, history: Any, model: Any, objective: Any, steps: int = ...) -> None: ...
    def plot(self, xDim: Any, yDim: Any, n: int = ...): ...

class OptimizerDisplayFigure:
    parent: Any = ...
    xDim: Any = ...
    yDim: Any = ...
    j: Any = ...
    i: Any = ...
    yKey: Any = ...
    xKey: Any = ...
    zKey: Any = ...
    slice2d: Any = ...
    sliceX: Any = ...
    sliceY: Any = ...
    track: Any = ...
    n: Any = ...
    figure: Any = ...
    axes3d: Any = ...
    axes2d: Any = ...
    axesX: Any = ...
    axesY: Any = ...
    artists: Any = ...
    def __init__(self, parent: Any, xDim: Any, yDim: Any, n: int = ...) -> None: ...
    @property
    def xlim(self): ...
    @property
    def ylim(self): ...
    @property
    def zlim(self): ...
    def guessExtent(self) -> None: ...
    def setExtent(self, x0: Optional[Any] = ..., x1: Optional[Any] = ..., y0: Optional[Any] = ..., y1: Optional[Any] = ..., z0: Optional[Any] = ..., z1: Optional[Any] = ..., lock: bool = ...) -> None: ...
    def plotTrack(self) -> None: ...
    def plotRejected(self) -> None: ...
    def plotSurfaces(self) -> None: ...
    def move(self, n: Any) -> None: ...
