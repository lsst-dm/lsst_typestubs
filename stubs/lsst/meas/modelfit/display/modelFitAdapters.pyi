from typing import Any, Optional

class ModelFitDataAdapter:
    record: Any = ...
    pdf: Any = ...
    dimensions: Any = ...
    def __init__(self, record: Any) -> None: ...
    def eval1d(self, dim: Any, x: Any): ...
    def eval2d(self, xDim: Any, yDim: Any, x: Any, y: Any): ...

class SamplingDataAdapter(ModelFitDataAdapter):
    samples: Any = ...
    values: Any = ...
    weights: Any = ...
    def __init__(self, record: Any) -> None: ...
    lower: Any = ...
    upper: Any = ...
    def setRangesFromQuantiles(self, lower: Any, upper: Any) -> None: ...

class OptimizerTrackLayer:
    defaults: Any = ...
    tag: Any = ...
    accepted: Any = ...
    rejected: Any = ...
    def __init__(self, tag: Any, accepted: Optional[Any] = ..., rejected: Optional[Any] = ...) -> None: ...
    def plotX(self, axes: Any, data: Any, dim: Any) -> None: ...
    def plotY(self, axes: Any, data: Any, dim: Any) -> None: ...
    def plotXY(self, axes: Any, data: Any, xDim: Any, yDim: Any): ...

class OptimizerDataAdapter(ModelFitDataAdapter):
    samples: Any = ...
    parameters: Any = ...
    state: Any = ...
    accepted: Any = ...
    rejected: Any = ...
    lower: Any = ...
    upper: Any = ...
    points: Any = ...
    def __init__(self, record: Any) -> None: ...
