import collections.abc
from typing import Any, Optional

class HistogramLayer:
    defaults1d: Any = ...
    defaults2d: Any = ...
    tag: Any = ...
    bins1d: Any = ...
    bins2d: Any = ...
    kwds1d: Any = ...
    kwds2d: Any = ...
    def __init__(self, tag: Any, bins1d: int = ..., bins2d: Any = ..., kwds1d: Optional[Any] = ..., kwds2d: Optional[Any] = ...) -> None: ...
    def hist1d(self, data: Any, dim: Any, limits: Any): ...
    def hist2d(self, data: Any, xDim: Any, yDim: Any, xLimits: Any, yLimits: Any): ...
    def plotX(self, axes: Any, data: Any, dim: Any): ...
    def plotY(self, axes: Any, data: Any, dim: Any): ...
    def plotXY(self, axes: Any, data: Any, xDim: Any, yDim: Any): ...

class ScatterLayer:
    defaults: Any = ...
    tag: Any = ...
    kwds: Any = ...
    def __init__(self, tag: Any, **kwds: Any) -> None: ...
    def plotX(self, axes: Any, data: Any, dim: Any) -> None: ...
    def plotY(self, axes: Any, data: Any, dim: Any) -> None: ...
    def plotXY(self, axes: Any, data: Any, xDim: Any, yDim: Any): ...

class SurfaceLayer:
    defaults1d: Any = ...
    defaults2d: Any = ...
    tag: Any = ...
    steps1d: Any = ...
    steps2d: Any = ...
    filled: Any = ...
    kwds1d: Any = ...
    kwds2d: Any = ...
    def __init__(self, tag: Any, steps1d: int = ..., steps2d: int = ..., filled: bool = ..., kwds1d: Optional[Any] = ..., kwds2d: Optional[Any] = ...) -> None: ...
    def eval1d(self, data: Any, dim: Any, x: Any): ...
    def eval2d(self, data: Any, xDim: Any, yDim: Any, x: Any, y: Any): ...
    def plotX(self, axes: Any, data: Any, dim: Any): ...
    def plotY(self, axes: Any, data: Any, dim: Any): ...
    def plotXY(self, axes: Any, data: Any, xDim: Any, yDim: Any): ...

class CrossPointsLayer:
    defaults: Any = ...
    tag: Any = ...
    colors: Any = ...
    kwds: Any = ...
    def __init__(self, tag: Any, colors: Any = ..., **kwds: Any) -> None: ...
    def plotX(self, axes: Any, data: Any, dim: Any): ...
    def plotY(self, axes: Any, data: Any, dim: Any): ...
    def plotXY(self, axes: Any, data: Any, xDim: Any, yDim: Any): ...

class DensityPlot:
    class LayerDict(collections.abc.MutableMapping):
        def __init__(self, parent: Any) -> None: ...
        def __delitem__(self, name: Any) -> None: ...
        def __setitem__(self, name: Any, layer: Any) -> None: ...
        def __getitem__(self, name: Any): ...
        def __iter__(self) -> Any: ...
        def __len__(self): ...
        def replot(self, name: Any) -> None: ...
    figure: Any = ...
    data: Any = ...
    layers: Any = ...
    def __init__(self, figure: Any, **kwds: Any) -> None: ...
    active: Any = ...
    def replot(self) -> None: ...
    def draw(self) -> None: ...

class ExampleData:
    dimensions: Any = ...
    mu: Any = ...
    sigma: Any = ...
    lower: Any = ...
    upper: Any = ...
    values: Any = ...
    def __init__(self) -> None: ...
    def eval1d(self, dim: Any, x: Any): ...
    def eval2d(self, xDim: Any, yDim: Any, x: Any, y: Any): ...

def demo(): ...
