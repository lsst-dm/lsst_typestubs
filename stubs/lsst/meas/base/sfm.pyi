from .baseMeasurement import BaseMeasurementConfig, BaseMeasurementPlugin, BaseMeasurementPluginConfig, BaseMeasurementTask
from typing import Any, Optional

class SingleFramePluginConfig(BaseMeasurementPluginConfig): ...

class SingleFramePlugin(BaseMeasurementPlugin):
    registry: Any = ...
    ConfigClass: Any = ...
    def __init__(self, config: Any, name: Any, schema: Any, metadata: Any, logName: Optional[Any] = ..., **kwds: Any) -> None: ...
    def measure(self, measRecord: Any, exposure: Any) -> None: ...
    def measureN(self, measCat: Any, exposure: Any) -> None: ...

class SingleFrameMeasurementConfig(BaseMeasurementConfig):
    plugins: Any = ...
    algorithms: Any = ...
    undeblended: Any = ...

class SingleFrameMeasurementTask(BaseMeasurementTask):
    ConfigClass: Any = ...
    NOISE_SEED_MULTIPLIER: str = ...
    NOISE_SOURCE: str = ...
    NOISE_OFFSET: str = ...
    NOISE_EXPOSURE_ID: str = ...
    schema: Any = ...
    doBlendedness: bool = ...
    blendPlugin: Any = ...
    def __init__(self, schema: Any, algMetadata: Optional[Any] = ..., **kwds: Any) -> None: ...
    def run(self, measCat: Any, exposure: Any, noiseImage: Optional[Any] = ..., exposureId: Optional[Any] = ..., beginOrder: Optional[Any] = ..., endOrder: Optional[Any] = ...) -> None: ...
    def runPlugins(self, noiseReplacer: Any, measCat: Any, exposure: Any, beginOrder: Optional[Any] = ..., endOrder: Optional[Any] = ...) -> None: ...
    def measure(self, measCat: Any, exposure: Any) -> None: ...
