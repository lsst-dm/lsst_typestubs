import lsst.pex.config
from typing import Any, Optional

class NoiseReplacerConfig(lsst.pex.config.Config):
    noiseSource: Any = ...
    noiseOffset: Any = ...
    noiseSeedMultiplier: Any = ...

class NoiseReplacer:
    ConfigClass: Any = ...
    exposure: Any = ...
    footprints: Any = ...
    log: Any = ...
    noiseSource: Any = ...
    noiseOffset: Any = ...
    noiseSeedMultiplier: Any = ...
    noiseGenMean: Any = ...
    noiseGenStd: Any = ...
    removeplanes: Any = ...
    heavies: Any = ...
    heavyNoise: Any = ...
    def __init__(self, config: Any, exposure: Any, footprints: Any, noiseImage: Optional[Any] = ..., exposureId: Optional[Any] = ..., log: Optional[Any] = ...) -> None: ...
    def insertSource(self, id: Any) -> None: ...
    def removeSource(self, id: Any) -> None: ...
    def end(self) -> None: ...
    def getNoiseGenerator(self, exposure: Any, noiseImage: Any, noiseMeanVar: Any, exposureId: Optional[Any] = ...): ...

class NoiseReplacerList(list):
    def __init__(self, exposuresById: Any, footprintsByExp: Any) -> None: ...
    def insertSource(self, id: Any) -> None: ...
    def removeSource(self, id: Any) -> None: ...
    def end(self) -> None: ...

class NoiseGenerator:
    def getHeavyFootprint(self, fp: Any): ...
    def getMaskedImage(self, bb: Any): ...
    def getImage(self, bb: Any) -> None: ...

class ImageNoiseGenerator(NoiseGenerator):
    mim: Any = ...
    mean: Any = ...
    std: Any = ...
    def __init__(self, img: Any) -> None: ...
    def getMaskedImage(self, bb: Any): ...

class GaussianNoiseGenerator(NoiseGenerator):
    rand: Any = ...
    def __init__(self, rand: Optional[Any] = ...) -> None: ...
    def getRandomImage(self, bb: Any): ...

class FixedGaussianNoiseGenerator(GaussianNoiseGenerator):
    mean: Any = ...
    std: Any = ...
    def __init__(self, mean: Any, std: Any, rand: Optional[Any] = ...) -> None: ...
    def getImage(self, bb: Any): ...

class VariancePlaneNoiseGenerator(GaussianNoiseGenerator):
    var: Any = ...
    mean: Any = ...
    def __init__(self, var: Any, mean: Optional[Any] = ..., rand: Optional[Any] = ...) -> None: ...
    def getImage(self, bb: Any): ...

class DummyNoiseReplacer:
    def insertSource(self, id: Any) -> None: ...
    def removeSource(self, id: Any) -> None: ...
    def end(self) -> None: ...
