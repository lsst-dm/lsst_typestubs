import lsst.daf.base
from .pluginsBase import BasePlugin, BasePluginConfig
from typing import Any, Optional

class CatalogCalculationPluginConfig(BasePluginConfig): ...

class CatalogCalculationPlugin(BasePlugin):
    ConfigClass: Any = ...
    registry: Any = ...
    plugType: str = ...
    def __init__(self, config: Any, name: Any, schema: Any, metadata: Any) -> None: ...
    @classmethod
    def getExecutionOrder(cls) -> None: ...
    def calculate(self, cat: Any, **kwargs: Any) -> None: ...

class CCContext:
    plugin: Any = ...
    cat: Any = ...
    log: Any = ...
    def __init__(self, plugin: Any, cat: Any, log: Any) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any): ...

class CatalogCalculationConfig(lsst.pex.config.Config):
    plugins: Any = ...

class CatalogCalculationTask(lsst.pipe.base.Task):
    ConfigClass: Any = ...
    schema: Any = ...
    plugMetadata: Any = ...
    plugins: Any = ...
    def __init__(self, schema: Any, plugMetadata: Optional[Any] = ..., **kwargs: Any) -> None: ...
    executionDict: Any = ...
    def initializePlugins(self) -> None: ...
    def run(self, measCat: Any) -> None: ...
    def callCompute(self, catalog: Any) -> None: ...
