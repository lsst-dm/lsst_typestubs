from typing import Any, Optional

class BlendContext:
    owner: Any = ...
    parentRecord: Any = ...
    parentImage: Any = ...
    children: Any = ...
    def __init__(self, owner: Any) -> None: ...
    def __enter__(self): ...
    def addChild(self, instFlux: Any, centroid: Any, shape: Optional[Any] = ...): ...
    def __exit__(self, type_: Any, value: Any, tb: Any) -> None: ...

class TestDataset:
    @classmethod
    def makeMinimalSchema(cls): ...
    @staticmethod
    def makePerturbedWcs(oldWcs: Any, minScaleFactor: float = ..., maxScaleFactor: float = ..., minRotation: Optional[Any] = ..., maxRotation: Optional[Any] = ..., minRefShift: Optional[Any] = ..., maxRefShift: Optional[Any] = ..., minPixShift: float = ..., maxPixShift: float = ..., randomSeed: int = ...): ...
    @staticmethod
    def makeEmptyExposure(bbox: Any, wcs: Optional[Any] = ..., crval: Optional[Any] = ..., cdelt: Optional[Any] = ..., psfSigma: float = ..., psfDim: int = ..., calibration: int = ...): ...
    @staticmethod
    def drawGaussian(bbox: Any, instFlux: Any, ellipse: Any): ...
    threshold: Any = ...
    exposure: Any = ...
    psfShape: Any = ...
    schema: Any = ...
    catalog: Any = ...
    def __init__(self, bbox: Any, threshold: float = ..., exposure: Optional[Any] = ..., **kwds: Any) -> None: ...
    def addSource(self, instFlux: Any, centroid: Any, shape: Optional[Any] = ...): ...
    def addBlend(self): ...
    def transform(self, wcs: Any, **kwds: Any): ...
    def realize(self, noise: Any, schema: Any, randomSeed: int = ...): ...

class AlgorithmTestCase:
    def makeSingleFrameMeasurementConfig(self, plugin: Optional[Any] = ..., dependencies: Any = ...): ...
    def makeSingleFrameMeasurementTask(self, plugin: Optional[Any] = ..., dependencies: Any = ..., config: Optional[Any] = ..., schema: Optional[Any] = ..., algMetadata: Optional[Any] = ...): ...
    def makeForcedMeasurementConfig(self, plugin: Optional[Any] = ..., dependencies: Any = ...): ...
    def makeForcedMeasurementTask(self, plugin: Optional[Any] = ..., dependencies: Any = ..., config: Optional[Any] = ..., refSchema: Optional[Any] = ..., algMetadata: Optional[Any] = ...): ...

class TransformTestCase:
    name: str = ...
    controlClass: Any = ...
    algorithmClass: Any = ...
    transformClass: Any = ...
    flagNames: Any = ...
    singleFramePlugins: Any = ...
    forcedPlugins: Any = ...
    calexp: Any = ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def testTransform(self, baseNames: Optional[Any] = ...) -> None: ...
    def testRegistration(self) -> None: ...

class SingleFramePluginTransformSetupHelper: ...
class ForcedPluginTransformSetupHelper: ...
class FluxTransformTestCase(TransformTestCase): ...
class CentroidTransformTestCase(TransformTestCase): ...
