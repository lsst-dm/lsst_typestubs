import lsst.pipe.base.connectionTypes
from lsst.pipe.base import PipelineTaskConfig, PipelineTaskConnections
from typing import Any, Optional

class ForcedPhotImageConnections(PipelineTaskConnections):
    inputSchema: Any = ...
    outputSchema: Any = ...
    exposure: Any = ...
    refCat: Any = ...
    refWcs: Any = ...
    measCat: Any = ...

class ForcedPhotImageConfig(PipelineTaskConfig):
    references: Any = ...
    measurement: Any = ...
    coaddName: Any = ...
    doApCorr: Any = ...
    applyApCorr: Any = ...
    catalogCalculation: Any = ...
    def setDefaults(self) -> None: ...

class ForcedPhotImageTask(lsst.pipe.base.PipelineTask, lsst.pipe.base.CmdLineTask):
    ConfigClass: Any = ...
    outputSchema: Any = ...
    def __init__(self, butler: Optional[Any] = ..., refSchema: Optional[Any] = ..., initInputs: Optional[Any] = ..., **kwds: Any) -> None: ...
    def runQuantum(self, butlerQC: Any, inputRefs: Any, outputRefs: Any) -> None: ...
    def generateMeasCat(self, exposureDataId: Any, exposure: Any, refCat: Any, refWcs: Any, idPackerName: Any): ...
    def runDataRef(self, dataRef: Any, psfCache: Optional[Any] = ...) -> None: ...
    def run(self, measCat: Any, exposure: Any, refCat: Any, refWcs: Any, exposureId: Optional[Any] = ...): ...
    def makeIdFactory(self, dataRef: Any) -> None: ...
    def getExposureId(self, dataRef: Any) -> None: ...
    def fetchReferences(self, dataRef: Any, exposure: Any) -> None: ...
    def attachFootprints(self, sources: Any, refCat: Any, exposure: Any, refWcs: Any, dataRef: Any): ...
    def getExposure(self, dataRef: Any): ...
    def writeOutput(self, dataRef: Any, sources: Any) -> None: ...
    def getSchemaCatalogs(self): ...
