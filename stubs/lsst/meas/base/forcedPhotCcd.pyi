import lsst.pipe.base.connectionTypes
from .forcedPhotImage import ForcedPhotImageConfig, ForcedPhotImageTask
from lsst.pipe.base import PipelineTaskConnections
from typing import Any

class PerTractCcdDataIdContainer(lsst.pipe.base.DataIdContainer):
    def makeDataRefList(self, namespace: Any) -> None: ...

def imageOverlapsTract(tract: Any, imageWcs: Any, imageBox: Any): ...

class ForcedPhotCcdConnections(PipelineTaskConnections):
    inputSchema: Any = ...
    outputSchema: Any = ...
    exposure: Any = ...
    refCat: Any = ...
    refWcs: Any = ...
    measCat: Any = ...

class ForcedPhotCcdConfig(ForcedPhotImageConfig):
    doApplyUberCal: Any = ...
    doApplyExternalPhotoCalib: Any = ...
    doApplyExternalSkyWcs: Any = ...
    doApplySkyCorr: Any = ...
    includePhotoCalibVar: Any = ...
    externalPhotoCalibName: Any = ...
    externalSkyWcsName: Any = ...

class ForcedPhotCcdTask(ForcedPhotImageTask):
    ConfigClass: Any = ...
    RunnerClass: Any = ...
    dataPrefix: str = ...
    def runQuantum(self, butlerQC: Any, inputRefs: Any, outputRefs: Any) -> None: ...
    def filterReferences(self, exposure: Any, refCat: Any, refWcs: Any): ...
    def makeIdFactory(self, dataRef: Any): ...
    def getExposureId(self, dataRef: Any): ...
    def fetchReferences(self, dataRef: Any, exposure: Any): ...
    def getExposure(self, dataRef: Any): ...
