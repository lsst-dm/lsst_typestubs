from typing import Any, Optional

def clipFootprintToNonzeroImpl(foot: Any, image: Any) -> None: ...

class DeblenderPlugin:
    func: Any = ...
    kwargs: Any = ...
    onReset: Any = ...
    maxIterations: Any = ...
    iterations: int = ...
    def __init__(self, func: Any, onReset: Optional[Any] = ..., maxIterations: int = ..., **kwargs: Any) -> None: ...
    def run(self, debResult: Any, log: Any): ...

def fitPsfs(debResult: Any, log: Any, psfChisqCut1: float = ..., psfChisqCut2: float = ..., psfChisqCut2b: float = ..., tinyFootprintSize: int = ...): ...
def buildSymmetricTemplates(debResult: Any, log: Any, patchEdges: bool = ..., setOrigTemplate: bool = ...): ...
def rampFluxAtEdge(debResult: Any, log: Any, patchEdges: bool = ...): ...
def medianSmoothTemplates(debResult: Any, log: Any, medianFilterHalfsize: int = ...): ...
def makeTemplatesMonotonic(debResult: Any, log: Any): ...
def clipFootprintsToNonzero(debResult: Any, log: Any): ...
def weightTemplates(debResult: Any, log: Any): ...
def reconstructTemplates(debResult: Any, log: Any, maxTempDotProd: float = ...): ...
def apportionFlux(debResult: Any, log: Any, assignStrayFlux: bool = ..., strayFluxAssignment: str = ..., strayFluxToPointSources: str = ..., clipStrayFluxFraction: float = ..., getTemplateSum: bool = ...): ...
