import lsst.afw.table as pexConfig
import lsst.afw.table as pipeBase
from typing import Any, Optional

class SourceDeblendConfig(pexConfig.Config):
    edgeHandling: Any = ...
    strayFluxToPointSources: Any = ...
    assignStrayFlux: Any = ...
    strayFluxRule: Any = ...
    clipStrayFluxFraction: Any = ...
    psfChisq1: Any = ...
    psfChisq2: Any = ...
    psfChisq2b: Any = ...
    maxNumberOfPeaks: Any = ...
    maxFootprintArea: Any = ...
    maxFootprintSize: Any = ...
    minFootprintAxisRatio: Any = ...
    notDeblendedMask: Any = ...
    tinyFootprintSize: Any = ...
    propagateAllPeaks: Any = ...
    catchFailures: Any = ...
    maskPlanes: Any = ...
    maskLimits: Any = ...
    weightTemplates: Any = ...
    removeDegenerateTemplates: Any = ...
    maxTempDotProd: Any = ...
    medianSmoothTemplate: Any = ...

class SourceDeblendTask(pipeBase.Task):
    ConfigClass: Any = ...
    schema: Any = ...
    toCopyFromParent: Any = ...
    peakSchemaMapper: Any = ...
    def __init__(self, schema: Any, peakSchema: Optional[Any] = ..., **kwargs: Any) -> None: ...
    nChildKey: Any = ...
    psfKey: Any = ...
    psfCenterKey: Any = ...
    psfFluxKey: Any = ...
    tooManyPeaksKey: Any = ...
    tooBigKey: Any = ...
    maskedKey: Any = ...
    deblendFailedKey: Any = ...
    deblendSkippedKey: Any = ...
    deblendRampedTemplateKey: Any = ...
    deblendPatchedTemplateKey: Any = ...
    hasStrayFluxKey: Any = ...
    peakCenter: Any = ...
    peakIdKey: Any = ...
    nPeaksKey: Any = ...
    parentNPeaksKey: Any = ...
    def addSchemaKeys(self, schema: Any) -> None: ...
    def run(self, exposure: Any, sources: Any) -> None: ...
    def deblend(self, exposure: Any, srcs: Any, psf: Any) -> None: ...
    def preSingleDeblendHook(self, exposure: Any, srcs: Any, i: Any, fp: Any, psf: Any, psf_fwhm: Any, sigma1: Any) -> None: ...
    def postSingleDeblendHook(self, exposure: Any, srcs: Any, i: Any, npre: Any, kids: Any, fp: Any, psf: Any, psf_fwhm: Any, sigma1: Any, res: Any) -> None: ...
    def isLargeFootprint(self, footprint: Any): ...
    def isMasked(self, footprint: Any, mask: Any): ...
    def skipParent(self, source: Any, mask: Any) -> None: ...
