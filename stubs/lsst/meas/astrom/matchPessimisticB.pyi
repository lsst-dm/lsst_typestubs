import lsst.afw.table as pexConfig
import lsst.afw.table as pipeBase
from .matchOptimisticBTask import MatchTolerance
from typing import Any, Optional

class MatchTolerancePessimistic(MatchTolerance):
    maxMatchDist: Any = ...
    autoMaxMatchDist: Any = ...
    maxShift: Any = ...
    lastMatchedPattern: Any = ...
    PPMbObj: Any = ...
    failedPatternList: Any = ...
    def __init__(self, maxMatchDist: Optional[Any] = ..., autoMaxMatchDist: Optional[Any] = ..., maxShift: Optional[Any] = ..., lastMatchedPattern: Optional[Any] = ..., failedPatternList: Optional[Any] = ..., PPMbObj: Optional[Any] = ...) -> None: ...

class MatchPessimisticBConfig(pexConfig.Config):
    numBrightStars: Any = ...
    minMatchedPairs: Any = ...
    minFracMatchedPairs: Any = ...
    matcherIterations: Any = ...
    maxOffsetPix: Any = ...
    maxRotationDeg: Any = ...
    numPointsForShape: Any = ...
    numPointsForShapeAttempt: Any = ...
    minMatchDistPixels: Any = ...
    numPatternConsensus: Any = ...
    numRefRequireConsensus: Any = ...
    maxRefObjects: Any = ...
    def validate(self) -> None: ...

class MatchPessimisticBTask(pipeBase.Task):
    ConfigClass: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def matchObjectsToSources(self, refCat: Any, sourceCat: Any, wcs: Any, sourceFluxField: Any, refFluxField: Any, match_tolerance: Optional[Any] = ...): ...
