import lsst.pex.config as pexConfig
from collections import namedtuple
from typing import Any, Optional

class Timer:
    def __init__(self, name: Any, do_logging: bool = ..., log_before_cursor_execute: bool = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any): ...

Visit = namedtuple('Visit', 'visitId visitTime lastObjectId lastSourceId')

class ApdbConfig(pexConfig.Config):
    db_url: Any = ...
    isolation_level: Any = ...
    connection_pool: Any = ...
    connection_timeout: Any = ...
    sql_echo: Any = ...
    dia_object_index: Any = ...
    dia_object_nightly: Any = ...
    read_sources_months: Any = ...
    read_forced_sources_months: Any = ...
    dia_object_columns: Any = ...
    object_last_replace: Any = ...
    schema_file: Any = ...
    extra_schema_file: Any = ...
    column_map: Any = ...
    prefix: Any = ...
    explain: Any = ...
    timer: Any = ...
    diaobject_index_hint: Any = ...
    dynamic_sampling_hint: Any = ...
    cardinality_hint: Any = ...
    def validate(self) -> None: ...

class Apdb:
    config: Any = ...
    def __init__(self, config: Any, afw_schemas: Optional[Any] = ...) -> None: ...
    def lastVisit(self): ...
    def saveVisit(self, visitId: Any, visitTime: Any) -> None: ...
    def tableRowCount(self): ...
    def getDiaObjects(self, pixel_ranges: Any, return_pandas: bool = ...): ...
    def getDiaSourcesInRegion(self, pixel_ranges: Any, dt: Any, return_pandas: bool = ...): ...
    def getDiaSources(self, object_ids: Any, dt: Any, return_pandas: bool = ...): ...
    def getDiaForcedSources(self, object_ids: Any, dt: Any, return_pandas: bool = ...): ...
    def storeDiaObjects(self, objs: Any, dt: Any) -> None: ...
    def storeDiaSources(self, sources: Any) -> None: ...
    def storeDiaForcedSources(self, sources: Any) -> None: ...
    def countUnassociatedObjects(self): ...
    def isVisitProcessed(self, visitInfo: Any): ...
    def dailyJob(self) -> None: ...
    def makeSchema(self, drop: bool = ..., mysql_engine: str = ..., oracle_tablespace: Optional[Any] = ..., oracle_iot: bool = ...) -> None: ...

# Names in __all__ with no definition:
#   Visit
