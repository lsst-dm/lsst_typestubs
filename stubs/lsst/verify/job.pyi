from .jsonmixin import JsonSerializationMixin
from typing import Any, Optional

class Job(JsonSerializationMixin):
    def __init__(self, measurements: Optional[Any] = ..., metrics: Optional[Any] = ..., specs: Optional[Any] = ..., meta: Optional[Any] = ...) -> None: ...
    @classmethod
    def load_metrics_package(cls, package_name_or_path: str = ..., subset: Optional[Any] = ..., measurements: Optional[Any] = ..., meta: Optional[Any] = ...): ...
    @classmethod
    def deserialize(cls, measurements: Optional[Any] = ..., blobs: Optional[Any] = ..., metrics: Optional[Any] = ..., specs: Optional[Any] = ..., meta: Optional[Any] = ...): ...
    @property
    def measurements(self): ...
    @property
    def metrics(self): ...
    @property
    def specs(self): ...
    @property
    def meta(self): ...
    @property
    def json(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __iadd__(self, other: Any): ...
    def reload_metrics_package(self, package_name_or_path: str = ..., subset: Optional[Any] = ...) -> None: ...
    def write(self, filename: Any) -> None: ...
    def dispatch(self, api_user: Optional[Any] = ..., api_password: Optional[Any] = ..., api_url: str = ..., **kwargs: Any) -> None: ...
    def report(self, name: Optional[Any] = ..., spec_tags: Optional[Any] = ..., metric_tags: Optional[Any] = ...): ...
