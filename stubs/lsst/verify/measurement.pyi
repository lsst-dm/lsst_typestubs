from .jsonmixin import JsonSerializationMixin
from typing import Any, Optional

class Measurement(JsonSerializationMixin):
    blobs: Any = ...
    extras: Any = ...
    def __init__(self, metric: Any, quantity: Optional[Any] = ..., blobs: Optional[Any] = ..., extras: Optional[Any] = ..., notes: Optional[Any] = ...) -> None: ...
    @property
    def metric(self): ...
    @metric.setter
    def metric(self, value: Any) -> None: ...
    @property
    def metric_name(self): ...
    @metric_name.setter
    def metric_name(self, value: Any) -> None: ...
    @property
    def quantity(self): ...
    @quantity.setter
    def quantity(self, q: Any) -> None: ...
    @property
    def identifier(self): ...
    @property
    def description(self): ...
    @property
    def datum(self): ...
    def link_blob(self, blob: Any) -> None: ...
    @property
    def notes(self): ...
    @property
    def json(self): ...
    @classmethod
    def deserialize(cls, metric: Optional[Any] = ..., identifier: Optional[Any] = ..., value: Optional[Any] = ..., unit: Optional[Any] = ..., blob_refs: Optional[Any] = ..., blobs: Optional[Any] = ..., **kwargs: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class MeasurementNotes:
    def __init__(self, metric_name: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __contains__(self, key: Any): ...
    def __len__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __iter__(self) -> Any: ...
    def keys(self): ...
    def items(self) -> None: ...
    def update(self, data: Any) -> None: ...
