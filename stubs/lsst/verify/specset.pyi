from .jsonmixin import JsonSerializationMixin
from typing import Any, Optional

class SpecificationSet(JsonSerializationMixin):
    def __init__(self, specifications: Optional[Any] = ..., partials: Optional[Any] = ...) -> None: ...
    @classmethod
    def deserialize(cls, specifications: Optional[Any] = ...): ...
    @classmethod
    def load_metrics_package(cls, package_name_or_path: str = ..., subset: Optional[Any] = ...): ...
    @classmethod
    def load_single_package(cls, package_specs_dirname: Any): ...
    @property
    def json(self): ...
    def __len__(self): ...
    def __contains__(self, name: Any): ...
    def __getitem__(self, name: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __iadd__(self, other: Any): ...
    def keys(self): ...
    def items(self) -> None: ...
    def insert(self, spec: Any) -> None: ...
    def update(self, other: Any) -> None: ...
    def resolve_document(self, spec_doc: Any): ...
    def subset(self, name: Optional[Any] = ..., meta: Optional[Any] = ..., required_meta: Optional[Any] = ..., spec_tags: Optional[Any] = ..., metric_tags: Optional[Any] = ..., metrics: Optional[Any] = ...): ...
    def report(self, measurements: Any, name: Optional[Any] = ..., meta: Optional[Any] = ..., spec_tags: Optional[Any] = ..., metric_tags: Optional[Any] = ..., metrics: Optional[Any] = ...): ...

class SpecificationPartial:
    yaml_doc: Any = ...
    name: Any = ...
    def __init__(self, yaml_doc: Any) -> None: ...
    def __hash__(self) -> Any: ...
    @property
    def json(self): ...
