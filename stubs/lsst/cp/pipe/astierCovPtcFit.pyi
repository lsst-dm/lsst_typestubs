from typing import Any, Optional

class Pol2d:
    orderx: Any = ...
    ordery: Any = ...
    def __init__(self, x: Any, y: Any, z: Any, order: Any, w: Optional[Any] = ...) -> None: ...
    def monomials(self, x: Any, y: Any): ...
    def eval(self, x: Any, y: Any): ...

class CovFit:
    sqrtW: Any = ...
    r: Any = ...
    logger: Any = ...
    maskMu: Any = ...
    def __init__(self, inputTuple: Any, maxRangeFromTuple: int = ..., meanSignalMask: Any = ...) -> None: ...
    cov: Any = ...
    vcov: Any = ...
    def subtractDistantOffset(self, maxLag: int = ..., startLag: int = ..., polDegree: int = ...) -> None: ...
    def copy(self): ...
    params: Any = ...
    def initFit(self) -> None: ...
    def getParamValues(self): ...
    def setParamValues(self, p: Any) -> None: ...
    def evalCovModel(self, mu: Optional[Any] = ...): ...
    def getA(self): ...
    def getB(self): ...
    def getC(self): ...
    def getACov(self): ...
    def getASig(self): ...
    def getBCov(self): ...
    def getCCov(self): ...
    def getGainErr(self): ...
    def getNoiseCov(self): ...
    def getNoiseSig(self): ...
    def getGain(self): ...
    def getRon(self): ...
    def getRonErr(self): ...
    def getNoise(self): ...
    def getMaskCov(self, i: Any, j: Any): ...
    def setAandB(self, a: Any, b: Any) -> None: ...
    def chi2(self): ...
    def wres(self, params: Optional[Any] = ...): ...
    def weightedRes(self, params: Optional[Any] = ...): ...
    covParams: Any = ...
    def fitFullModel(self, pInit: Optional[Any] = ...): ...
    def ndof(self): ...
    def getFitData(self, i: Any, j: Any, divideByMu: bool = ..., unitsElectrons: bool = ..., returnMasked: bool = ...): ...
    def __call__(self, params: Any): ...
