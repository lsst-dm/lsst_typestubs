import lsst.pipe.base.connectionTypes as pipeBase
from typing import Any, Optional

class CpFlatMeasureConnections(pipeBase.PipelineTaskConnections):
    inputExp: Any = ...
    outputStats: Any = ...

class CpFlatMeasureTaskConfig(pipeBase.PipelineTaskConfig):
    maskNameList: Any = ...
    doVignette: Any = ...
    numSigmaClip: Any = ...
    clipMaxIter: Any = ...

class CpFlatMeasureTask(pipeBase.PipelineTask, pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    def run(self, inputExp: Any): ...

class CpFlatNormalizationConnections(pipeBase.PipelineTaskConnections):
    inputMDs: Any = ...
    camera: Any = ...
    outputScales: Any = ...

class CpFlatNormalizationTaskConfig(pipeBase.PipelineTaskConfig):
    level: Any = ...
    scaleMaxIter: Any = ...

class CpFlatNormalizationTask(pipeBase.PipelineTask, pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    def runQuantum(self, butlerQC: Any, inputRefs: Any, outputRefs: Any) -> None: ...
    def run(self, inputMDs: Any, inputDims: Any, camera: Any): ...
    def measureScales(self, bgMatrix: Any, bgCounts: Optional[Any] = ..., iterations: int = ...): ...
