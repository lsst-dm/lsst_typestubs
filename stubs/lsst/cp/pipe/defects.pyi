import lsst.afw.display as pexConfig
import lsst.afw.display as pipeBase
from typing import Any

class MeasureDefectsConnections(pipeBase.PipelineTaskConnections):
    inputExp: Any = ...
    camera: Any = ...
    outputDefects: Any = ...

class MeasureDefectsTaskConfig(pipeBase.PipelineTaskConfig):
    nSigmaBright: Any = ...
    nSigmaDark: Any = ...
    nPixBorderUpDown: Any = ...
    nPixBorderLeftRight: Any = ...
    badOnAndOffPixelColumnThreshold: Any = ...
    goodPixelColumnGapThreshold: Any = ...
    def validate(self) -> None: ...

class MeasureDefectsTask(pipeBase.PipelineTask, pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    def run(self, inputExp: Any, camera: Any): ...
    def findHotAndColdPixels(self, exp: Any, nSigma: Any): ...
    def maskBlocksIfIntermitentBadPixelsInColumn(self, defects: Any): ...
    def debugView(self, stepname: Any, ampImage: Any, defects: Any, detector: Any) -> None: ...
    def debugHistogram(self, stepname: Any, ampImage: Any, nSigmaUsed: Any, exp: Any) -> None: ...

class MergeDefectsConnections(pipeBase.PipelineTaskConnections):
    inputDefects: Any = ...
    camera: Any = ...
    mergedDefects: Any = ...

class MergeDefectsTaskConfig(pipeBase.PipelineTaskConfig):
    assertSameRun: Any = ...
    ignoreFilters: Any = ...
    nullFilterName: Any = ...
    combinationMode: Any = ...
    combinationFraction: Any = ...
    edgesAsDefects: Any = ...

class MergeDefectsTask(pipeBase.PipelineTask, pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    def run(self, inputDefects: Any, camera: Any): ...

class FindDefectsTaskConfig(pexConfig.Config):
    measure: Any = ...
    merge: Any = ...
    isrForFlats: Any = ...
    isrForDarks: Any = ...
    isrMandatoryStepsFlats: Any = ...
    isrMandatoryStepsDarks: Any = ...
    isrForbiddenStepsFlats: Any = ...
    isrForbiddenStepsDarks: Any = ...
    isrDesirableSteps: Any = ...
    ccdKey: Any = ...
    imageTypeKey: Any = ...

class FindDefectsTask(pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    RunnerClass: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def runDataRef(self, dataRefList: Any): ...
