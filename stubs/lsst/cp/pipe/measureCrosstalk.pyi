import lsst.pipe.base.connectionTypes as pipeBase
from lsst.pex.config import Config
from typing import Any, Optional

class CrosstalkExtractConnections(pipeBase.PipelineTaskConnections):
    inputExp: Any = ...
    sourceExp: Any = ...
    outputRatios: Any = ...
    outputFluxes: Any = ...
    def __init__(self, *, config: Optional[Any] = ...) -> None: ...

class CrosstalkExtractConfig(pipeBase.PipelineTaskConfig):
    doMeasureInterchip: Any = ...
    threshold: Any = ...
    ignoreSaturatedPixels: Any = ...
    badMask: Any = ...
    isTrimmed: Any = ...
    def validate(self) -> None: ...

class CrosstalkExtractTask(pipeBase.PipelineTask, pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    def run(self, inputExp: Any, sourceExps: Any = ...): ...
    def debugView(self, stepname: Any, exposure: Any) -> None: ...
    def debugPixels(self, stepname: Any, pixelsIn: Any, pixelsOut: Any, sourceName: Any, targetName: Any) -> None: ...

class CrosstalkSolveConnections(pipeBase.PipelineTaskConnections):
    inputRatios: Any = ...
    inputFluxes: Any = ...
    camera: Any = ...
    outputCrosstalk: Any = ...
    def __init__(self, *, config: Optional[Any] = ...) -> None: ...

class CrosstalkSolveConfig(pipeBase.PipelineTaskConfig):
    rejIter: Any = ...
    rejSigma: Any = ...
    fluxOrder: Any = ...
    doFiltering: Any = ...

class CrosstalkSolveTask(pipeBase.PipelineTask, pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    def runQuantum(self, butlerQC: Any, inputRefs: Any, outputRefs: Any) -> None: ...
    def run(self, inputRatios: Any, inputFluxes: Optional[Any] = ..., camera: Optional[Any] = ..., inputDims: Optional[Any] = ..., outputDims: Optional[Any] = ...): ...
    def measureCrosstalkCoefficients(self, ratios: Any, rejIter: Any, rejSigma: Any): ...
    @staticmethod
    def sigmaClipCorrection(nSigClip: Any): ...
    @staticmethod
    def filterCrosstalkCalib(inCalib: Any): ...
    def debugRatios(self, stepname: Any, ratios: Any, i: Any, j: Any, coeff: float = ..., valid: bool = ...) -> None: ...

class MeasureCrosstalkConfig(Config):
    extract: Any = ...
    solver: Any = ...

class MeasureCrosstalkTask(pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    RunnerClass: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def runDataRef(self, dataRefList: Any): ...
