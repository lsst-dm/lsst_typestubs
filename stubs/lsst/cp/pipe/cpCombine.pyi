import lsst.afw.image as pexConfig
import lsst.afw.image as pipeBase
from lsst.geom import Point2D as Point2D
from lsst.log import Log as Log
from typing import Any, Optional

class CalibStatsConfig(pexConfig.Config):
    stat: Any = ...
    clip: Any = ...
    nIter: Any = ...
    mask: Any = ...

class CalibStatsTask(pipeBase.Task):
    ConfigClass: Any = ...
    def run(self, exposureOrImage: Any): ...

class CalibCombineConnections(pipeBase.PipelineTaskConnections):
    inputExps: Any = ...
    inputScales: Any = ...
    outputData: Any = ...
    def __init__(self, *, config: Optional[Any] = ...) -> None: ...

class CalibCombineConfig(pipeBase.PipelineTaskConfig):
    calibrationType: Any = ...
    calibrationDimensions: Any = ...
    exposureScaling: Any = ...
    scalingLevel: Any = ...
    maxVisitsToCalcErrorFromInputVariance: Any = ...
    doVignette: Any = ...
    mask: Any = ...
    combine: Any = ...
    clip: Any = ...
    nIter: Any = ...
    stats: Any = ...

class CalibCombineTask(pipeBase.PipelineTask, pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def runQuantum(self, butlerQC: Any, inputRefs: Any, outputRefs: Any) -> None: ...
    def run(self, inputExps: Any, inputScales: Optional[Any] = ..., inputDims: Optional[Any] = ...): ...
    def getDimensions(self, expList: Any): ...
    def getSize(self, dimList: Any): ...
    def applyScale(self, exposure: Any, scale: Optional[Any] = ...) -> None: ...
    def combine(self, target: Any, expList: Any, stats: Any) -> None: ...
    def combineHeaders(self, expList: Any, calib: Any, calibType: str = ..., scales: Optional[Any] = ...): ...
    def interpolateNans(self, exp: Any) -> None: ...

def VignetteExposure(exposure: Any, polygon: Optional[Any] = ..., doUpdateMask: bool = ..., maskPlane: str = ..., doSetValue: bool = ..., vignetteValue: float = ..., log: Optional[Any] = ...) -> None: ...
