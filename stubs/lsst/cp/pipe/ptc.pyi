import lsst.pipe.base as pexConfig
import lsst.pipe.base as pipeBase
from typing import Any, Optional

class MeasurePhotonTransferCurveTaskConfig(pexConfig.Config):
    ccdKey: Any = ...
    ptcFitType: Any = ...
    maximumRangeCovariancesAstier: Any = ...
    covAstierRealSpace: Any = ...
    polynomialFitDegree: Any = ...
    linearity: Any = ...
    doCreateLinearizer: Any = ...
    binSize: Any = ...
    minMeanSignal: Any = ...
    maxMeanSignal: Any = ...
    initialNonLinearityExclusionThresholdPositive: Any = ...
    initialNonLinearityExclusionThresholdNegative: Any = ...
    minMeanRatioTest: Any = ...
    minVarPivotSearch: Any = ...
    sigmaCutPtcOutliers: Any = ...
    maskNameList: Any = ...
    nSigmaClipPtc: Any = ...
    nIterSigmaClipPtc: Any = ...
    minNumberGoodPixelsForFft: Any = ...
    maxIterationsPtcOutliers: Any = ...
    doFitBootstrap: Any = ...
    doPhotodiode: Any = ...
    photodiodeDataPath: Any = ...
    instrumentName: Any = ...

class MeasurePhotonTransferCurveTask(pipeBase.CmdLineTask):
    RunnerClass: Any = ...
    ConfigClass: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def runDataRef(self, dataRefList: Any): ...
    def makePairs(self, dataRefList: Any): ...
    def fitCovariancesAstier(self, dataset: Any, covariancesWithTagsArray: Any): ...
    def getOutputPtcDataCovAstier(self, dataset: Any, covFits: Any, covFitsNoB: Any): ...
    def measureMeanVarCov(self, exposure1: Any, exposure2: Any, region: Optional[Any] = ..., covAstierRealSpace: bool = ...): ...
    def computeCovDirect(self, diffImage: Any, weightImage: Any, maxRange: Any): ...
    def covDirectValue(self, diffImage: Any, weightImage: Any, dx: Any, dy: Any): ...
    def fitPtc(self, dataset: Any, ptcFitType: Any): ...
    def fillBadAmp(self, dataset: Any, ptcFitType: Any, ampName: Any) -> None: ...
