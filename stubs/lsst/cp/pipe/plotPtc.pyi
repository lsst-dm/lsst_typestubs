import lsst.pipe.base as pexConfig
import lsst.pipe.base as pipeBase
from typing import Any, Optional

class PlotPhotonTransferCurveTaskConfig(pexConfig.Config):
    datasetFileName: Any = ...
    linearizerFileName: Any = ...
    ccdKey: Any = ...
    signalElectronsRelativeA: Any = ...
    plotNormalizedCovariancesNumberOfBins: Any = ...

class PlotPhotonTransferCurveTask(pipeBase.CmdLineTask):
    ConfigClass: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def runDataRef(self, dataRef: Any): ...
    def run(self, filenameFull: Any, datasetPtc: Any, linearizer: Optional[Any] = ..., log: Optional[Any] = ...) -> None: ...
    def covAstierMakeAllPlots(self, dataset: Any, pdfPages: Any, log: Optional[Any] = ...) -> None: ...
    @staticmethod
    def plotCovariances(mu: Any, covs: Any, covsModel: Any, covsWeights: Any, covsNoB: Any, covsModelNoB: Any, covsWeightsNoB: Any, gainDict: Any, noiseDict: Any, aDict: Any, bDict: Any, expIdMask: Any, pdfPages: Any) -> None: ...
    def plotNormalizedCovariances(self, i: Any, j: Any, inputMu: Any, covs: Any, covsModel: Any, covsWeights: Any, covsNoB: Any, covsModelNoB: Any, covsWeightsNoB: Any, expIdMask: Any, pdfPages: Any, offset: float = ..., numberOfBins: int = ..., plotData: bool = ..., topPlot: bool = ..., log: Optional[Any] = ...) -> None: ...
    @staticmethod
    def plot_a_b(aDict: Any, bDict: Any, pdfPages: Any, bRange: int = ...) -> None: ...
    @staticmethod
    def ab_vs_dist(aDict: Any, bDict: Any, pdfPages: Any, bRange: int = ...) -> None: ...
    @staticmethod
    def plotAcoeffsSum(aDict: Any, bDict: Any, pdfPages: Any) -> None: ...
    @staticmethod
    def plotRelativeBiasACoeffs(aDict: Any, aDictNoB: Any, fullCovsModel: Any, fullCovsModelNoB: Any, signalElectrons: Any, gainDict: Any, pdfPages: Any, maxr: Optional[Any] = ...) -> None: ...
    @staticmethod
    def findGroups(x: Any, maxDiff: Any): ...
    @staticmethod
    def indexForBins(x: Any, nBins: Any): ...
    @staticmethod
    def binData(x: Any, y: Any, binIndex: Any, wy: Optional[Any] = ...): ...
