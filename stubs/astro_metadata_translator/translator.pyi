import abc
from abc import abstractmethod
from typing import Any, Optional

def cache_translation(func: Any, method: Optional[Any] = ...): ...

class MetadataTranslator(metaclass=abc.ABCMeta):
    default_search_path: Any = ...
    default_resource_package: Any = ...
    default_resource_root: Any = ...
    translators: Any = ...
    supported_instrument: Any = ...
    @classmethod
    def defined_in_this_class(cls, name: Any): ...
    @classmethod
    def __init_subclass__(cls, **kwargs: Any) -> None: ...
    filename: Any = ...
    def __init__(self, header: Any, filename: Optional[Any] = ...) -> None: ...
    @classmethod
    @abstractmethod
    def can_translate(cls, header: Any, filename: Optional[Any] = ...) -> Any: ...
    @classmethod
    def can_translate_with_options(cls, header: Any, options: Any, filename: Optional[Any] = ...): ...
    @classmethod
    def determine_translator(cls, header: Any, filename: Optional[Any] = ...): ...
    @classmethod
    def fix_header(cls, header: Any, instrument: Any, obsid: Any, filename: Optional[Any] = ...): ...
    def cards_used(self): ...
    @staticmethod
    def validate_value(value: Any, default: Any, minimum: Optional[Any] = ..., maximum: Optional[Any] = ...): ...
    @staticmethod
    def is_keyword_defined(header: Any, keyword: Any): ...
    def resource_root(self): ...
    def search_paths(self): ...
    def is_key_ok(self, keyword: Any): ...
    def are_keys_ok(self, keywords: Any): ...
    def quantity_from_card(self, keywords: Any, unit: Any, default: Optional[Any] = ..., minimum: Optional[Any] = ..., maximum: Optional[Any] = ..., checker: Optional[Any] = ...): ...
    def to_detector_unique_name(self): ...
    def to_exposure_group(self): ...
    def to_observation_reason(self): ...
    def to_observing_day(self): ...
    def to_observation_counter(self): ...

class StubTranslator(MetadataTranslator, metaclass=abc.ABCMeta): ...
